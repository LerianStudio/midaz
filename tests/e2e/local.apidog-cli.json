{"apidogCli":"1.2.21","item":[{"item":[{"id":"5f7ad94c-4e59-54d4-ba12-68b56db1e78e","type":"group","metaInfo":{"id":"5f7ad94c-4e59-54d4-ba12-68b56db1e78e","type":"group","scopeType":"start","scopeEndId":"c4f168c3-92c8-533f-b4c1-a97297937231","name":"root","onError":"ignore"}},{"id":"d4ec0da4-83c1-56da-9684-3e5bfc403597","type":"group","metaInfo":{"id":"d4ec0da4-83c1-56da-9684-3e5bfc403597","type":"group","scopeType":"start","scopeEndId":"558e464f-cef4-5610-9dca-de0a0eeaf115","name":"Organization - Create"}},{"id":"17cc118f-7562-5d36-b07c-aa09ef101b0a","name":"Create an Organization ([Success] Create Organization)","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations"],"host":["127","0","0","1"],"query":[],"variable":[]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","baseUrl":"http://127.0.0.1:3000","body":{"mode":"raw","raw":"{\n    \"legalName\": \"Release Test Legal Name\",\n    \"doingBusinessAs\": \"Release Test Doing Business As\",\n    \"legalDocument\": \"0000000000000\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"New Test Organization\"\n    },\n    \"address\": {\n        \"line1\": \"Release Test Avenue\",\n        \"line2\": \"123\",\n        \"zipCode\": \"10000123\",\n        \"city\": \"SÃ£o Paulo\",\n        \"state\": \"SP\",\n        \"country\": \"BR\"\n    },\n    \"metadata\": {\n        \"key_string\": \"string_value\",\n        \"key_int\": 1,\n        \"key_boolean\": true\n    }\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`organization_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable organization_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}},{"listen":"test","script":{"id":"postProcessors.1.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        const responseData = pm.response.json();","","pm.test(\"Validate Metadata\", function () {","    pm.expect(Object.keys(responseData.metadata).length).to.eql(3);","});","","pm.test(\"Validate Parent Organization\", function () {","    pm.expect(responseData.parentOrganizationId).to.eql(null);","});","      "]}}],"responseDefinition":{"id":24931409,"name":"Created","code":201,"contentType":"json","jsonSchema":{"type":"object","properties":{},"x-apidog-orders":["01JMJCZ9CA6V51X3YXCBQGC4FJ"],"required":[],"x-apidog-refs":{"01JMJCZ9CA6V51X3YXCBQGC4FJ":{"$ref":"#/definitions/5299823"}}},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"3670550":{"type":"object","properties":{"legalName":{"type":"string","description":"The legal name of the Organization. Max length: 256","x-apidog-mock":"{{$company.name}}","maxLength":256},"parentOrganizationId":{"type":["string","null"],"description":"The unique identifier of the parent Organization.","x-apidog-mock":"{{$string.uuid}}","format":"uuid"},"doingBusinessAs":{"type":["string","null"],"x-apidog-mock":"{{$company.name}}","maxLength":256,"description":"The trade name of the Organization. Max length: 256"},"legalDocument":{"type":"string","description":"The document of the Organization. Max length: 256","x-apidog-mock":"{{$string.numeric(min=14,max=14)}}","maxLength":256},"address":{"type":"object","properties":{"line1":{"type":"string","x-apidog-mock":"{{$location.streetAddress}}","description":"The first line of the address. Usually used to inform the name of the street and the number of the building"},"line2":{"type":"string","x-apidog-mock":"{{$location.secondaryAddress}}","description":"The second line of the address. Usually used to inform about any complements such as the number of the apartment."},"zipCode":{"type":"string","x-apidog-mock":"{{$location.zipCode}}","description":"The postal code."},"city":{"type":"string","x-apidog-mock":"{{$location.city}}","description":"The name of the city where the Organization is established."},"state":{"type":"string","x-apidog-mock":"{{$location.state}}","description":"The two-letter abbreviation that represents the State where the Organization is."},"country":{"description":"The two-letter code (ISO 3166-1 alpha2) that represents the country where the Organization is.","type":"string","x-apidog-mock":"{{$location.countryCode}}"}},"required":["line1","line2","zipCode","city","state","country"],"x-apidog-orders":["line1","line2","zipCode","city","state","country"],"description":"An object containing information about the address of the Organization."}},"required":["legalName","legalDocument"],"x-apidog-orders":["legalName","parentOrganizationId","doingBusinessAs","legalDocument","01JMJCWQRYRQYHWPFNAXCR6EWK","address","01JMJCQ30S11CPHT86CSTND4PF"],"x-apidog-refs":{"01JMJCQ30S11CPHT86CSTND4PF":{"$ref":"#/definitions/5295307"},"01JMJCWQRYRQYHWPFNAXCR6EWK":{"$ref":"#/definitions/5295306"}},"title":"organization.request.v3.x.x","name":"organization.request.v3.x.x","moduleId":760453},"5295306":{"type":"object","properties":{"status":{"type":"object","properties":{"description":{"type":["string","null"],"description":"The description of the status. Max length: 256"},"code":{"type":"string","description":"The name of the status. Max length:100"}},"x-apidog-orders":["description","code"],"description":"An object containing information about the status."}},"x-apidog-orders":["status"],"title":"status","name":"status","moduleId":760453},"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299823":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique reference of the Organization."}},"x-apidog-orders":["id","01JMCYXQ79XF1Z2H2FCZFK6T1J","01JMCZEPGEYNEKH7NZZHJHM7TJ"],"x-apidog-refs":{"01JMCYXQ79XF1Z2H2FCZFK6T1J":{"$ref":"#/definitions/3670550"},"01JMCZEPGEYNEKH7NZZHJHM7TJ":{"$ref":"#/definitions/5299902"}},"title":"organization.response.v3.x.x","name":"organization.response.v3.x.x","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453}}},"requestDefinition":{"jsonSchema":{"type":"object","properties":{},"x-apidog-orders":["01JG1HSP0RG46V2G2ZRZ93RW40"],"required":[],"x-apidog-refs":{"01JG1HSP0RG46V2G2ZRZ93RW40":{"$ref":"#/definitions/3670550"}}}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"36ccc792-fb2a-4e6c-9a42-d453c606266c","id":"17cc118f-7562-5d36-b07c-aa09ef101b0a","type":"http","name":"Create an Organization ([Success] Create Organization)","projectId":699928,"relatedId":1259295,"environmentId":2661460,"blockNumber":55,"httpApiId":17810492,"httpApiCaseId":30129761,"httpApiName":"Create an Organization","httpApiPath":"/v1/organizations","httpApiMethod":"post","httpApiCaseName":"[Success] Create","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"79a57678-3920-538c-8a16-ca4f722c8ace","name":"Create an Organization ([Success] Create Organization with Parent Id)","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations"],"host":["127","0","0","1"],"query":[],"variable":[]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","baseUrl":"http://127.0.0.1:3000","body":{"mode":"raw","raw":"{\n    \"legalName\": \"Release Test Legal Name\",\n    \"doingBusinessAs\": \"Release Test Doing Business As\",\n    \"legalDocument\": \"0000000000000\",\n    \"parentOrganizationId\": \"{{organization_id}}\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"New Test Organization\"\n    },\n    \"address\": {\n        \"line1\": \"Release Test Avenue\",\n        \"line2\": \"123\",\n        \"zipCode\": \"10000123\",\n        \"city\": \"SÃ£o Paulo\",\n        \"state\": \"SP\",\n        \"country\": \"BR\"\n    },\n    \"metadata\": {\n        \"key_string\": \"string_value\",\n        \"key_int\": 1,\n        \"key_boolean\": true\n    }\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        const responseData = pm.response.json();","","pm.test(\"Validate Metadata\", function () {","    pm.expect(Object.keys(responseData.metadata).length).to.eql(3);","});","","pm.test(\"Validate Parent Organization is not null\", function () {","    pm.expect(responseData.parentOrganizationId).to.not.eql(null);","});","","pm.test(\"Validate Parent Organization is correct\", function () {","    pm.expect(responseData.parentOrganizationId).to.eql(pm.environment.get(\"organization_id\"));","});","      "]}}],"responseDefinition":{"id":24931409,"name":"Created","code":201,"contentType":"json","jsonSchema":{"type":"object","properties":{},"x-apidog-orders":["01JMJCZ9CA6V51X3YXCBQGC4FJ"],"required":[],"x-apidog-refs":{"01JMJCZ9CA6V51X3YXCBQGC4FJ":{"$ref":"#/definitions/5299823"}}},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"3670550":{"type":"object","properties":{"legalName":{"type":"string","description":"The legal name of the Organization. Max length: 256","x-apidog-mock":"{{$company.name}}","maxLength":256},"parentOrganizationId":{"type":["string","null"],"description":"The unique identifier of the parent Organization.","x-apidog-mock":"{{$string.uuid}}","format":"uuid"},"doingBusinessAs":{"type":["string","null"],"x-apidog-mock":"{{$company.name}}","maxLength":256,"description":"The trade name of the Organization. Max length: 256"},"legalDocument":{"type":"string","description":"The document of the Organization. Max length: 256","x-apidog-mock":"{{$string.numeric(min=14,max=14)}}","maxLength":256},"address":{"type":"object","properties":{"line1":{"type":"string","x-apidog-mock":"{{$location.streetAddress}}","description":"The first line of the address. Usually used to inform the name of the street and the number of the building"},"line2":{"type":"string","x-apidog-mock":"{{$location.secondaryAddress}}","description":"The second line of the address. Usually used to inform about any complements such as the number of the apartment."},"zipCode":{"type":"string","x-apidog-mock":"{{$location.zipCode}}","description":"The postal code."},"city":{"type":"string","x-apidog-mock":"{{$location.city}}","description":"The name of the city where the Organization is established."},"state":{"type":"string","x-apidog-mock":"{{$location.state}}","description":"The two-letter abbreviation that represents the State where the Organization is."},"country":{"description":"The two-letter code (ISO 3166-1 alpha2) that represents the country where the Organization is.","type":"string","x-apidog-mock":"{{$location.countryCode}}"}},"required":["line1","line2","zipCode","city","state","country"],"x-apidog-orders":["line1","line2","zipCode","city","state","country"],"description":"An object containing information about the address of the Organization."}},"required":["legalName","legalDocument"],"x-apidog-orders":["legalName","parentOrganizationId","doingBusinessAs","legalDocument","01JMJCWQRYRQYHWPFNAXCR6EWK","address","01JMJCQ30S11CPHT86CSTND4PF"],"x-apidog-refs":{"01JMJCQ30S11CPHT86CSTND4PF":{"$ref":"#/definitions/5295307"},"01JMJCWQRYRQYHWPFNAXCR6EWK":{"$ref":"#/definitions/5295306"}},"title":"organization.request.v3.x.x","name":"organization.request.v3.x.x","moduleId":760453},"5295306":{"type":"object","properties":{"status":{"type":"object","properties":{"description":{"type":["string","null"],"description":"The description of the status. Max length: 256"},"code":{"type":"string","description":"The name of the status. Max length:100"}},"x-apidog-orders":["description","code"],"description":"An object containing information about the status."}},"x-apidog-orders":["status"],"title":"status","name":"status","moduleId":760453},"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299823":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique reference of the Organization."}},"x-apidog-orders":["id","01JMCYXQ79XF1Z2H2FCZFK6T1J","01JMCZEPGEYNEKH7NZZHJHM7TJ"],"x-apidog-refs":{"01JMCYXQ79XF1Z2H2FCZFK6T1J":{"$ref":"#/definitions/3670550"},"01JMCZEPGEYNEKH7NZZHJHM7TJ":{"$ref":"#/definitions/5299902"}},"title":"organization.response.v3.x.x","name":"organization.response.v3.x.x","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453}}},"requestDefinition":{"jsonSchema":{"type":"object","properties":{},"x-apidog-orders":["01JG1HSP0RG46V2G2ZRZ93RW40"],"required":[],"x-apidog-refs":{"01JG1HSP0RG46V2G2ZRZ93RW40":{"$ref":"#/definitions/3670550"}}}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"8b793808-5d43-4330-8aa2-1a61930fa7c6","id":"79a57678-3920-538c-8a16-ca4f722c8ace","type":"http","name":"Create an Organization ([Success] Create Organization with Parent Id)","projectId":699928,"relatedId":1259295,"environmentId":2661460,"blockNumber":56,"httpApiId":17810492,"httpApiCaseId":30129883,"httpApiName":"Create an Organization","httpApiPath":"/v1/organizations","httpApiMethod":"post","httpApiCaseName":"[Success] Create with Parent Id","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"84723a65-8e0f-52a3-b290-7c14f7b04bed","name":"Create an Organization ([0009] Organization - Missing Fields in Request)","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations"],"host":["127","0","0","1"],"query":[],"variable":[]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","baseUrl":"http://127.0.0.1:3000","body":{"mode":"raw","raw":"{\n    \"legalName\": \"Release Test Legal Name\",\n    \"doingBusinessAs\": \"Release Test Doing Business As\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"New Test Organization\"\n    },\n    \"address\": {\n        \"line1\": \"138 West Street\",\n        \"line2\": \"Apt. 458\",\n        \"zipCode\": \"97446-2761\",\n        \"city\": \"Sandyview\",\n        \"state\": \"Massachusetts\",\n        \"country\": \"BI\"\n    },\n    \"metadata\": {}\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        const responseData = pm.response.json();","","pm.test(\"legalDocument is present in the fields response\", function () {","    pm.expect(responseData.fields.hasOwnProperty(\"legalDocument\"));","});","","pm.test(\"Error Code 0009\", function () {","    pm.expect(responseData.code).to.eql(\"0009\");","});","      "]}}],"responseDefinition":{"id":2739826,"createdAt":"2024-10-21T13:24:59.000Z","updatedAt":"2025-09-18T19:31:13.000Z","name":"[0009] Missing Fields in Request","apiDetailId":0,"projectId":699928,"moduleId":760453,"code":400,"contentType":"json","ordering":150,"jsonSchema":{"type":"object","properties":{"code":{"type":"string"},"title":{"type":"string"},"message":{"type":"string"},"fields":{"type":"object","properties":{},"x-apidog-orders":[]}},"required":["code","title","message","fields"],"x-apidog-orders":["code","title","message","fields"]},"defaultEnable":false,"folderId":743415,"responseExamples":[{"id":3970643,"name":"Missing Fields in Request","data":"{\n    \"code\": \"0009\",\n    \"title\": \"Missing Fields in Request\",\n    \"message\": \"Your request is missing one or more required fields. Please refer to the documentation to ensure all necessary fields are included in your request.\",\n    \"fields\": {\n        \"{{field}}\": \"{{field}} is a required field\"\n    }\n}","apiDetailId":0,"responseId":2739826,"ordering":1,"description":null,"oasKey":"","oasExtensions":null}],"mediaType":"","headers":[],"description":"","oasExtensions":null,"schemaDefinitions":{}},"requestDefinition":{"jsonSchema":{"type":"object","properties":{},"x-apidog-orders":["01JG1HSP0RG46V2G2ZRZ93RW40"],"required":[],"x-apidog-refs":{"01JG1HSP0RG46V2G2ZRZ93RW40":{"$ref":"#/definitions/3670550"}}}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"456ce741-7d9b-48c0-8c55-82636e457054","id":"84723a65-8e0f-52a3-b290-7c14f7b04bed","type":"http","name":"Create an Organization ([0009] Organization - Missing Fields in Request)","projectId":699928,"relatedId":1259295,"environmentId":2661460,"blockNumber":57,"httpApiId":17810492,"httpApiCaseId":30130206,"httpApiName":"Create an Organization","httpApiPath":"/v1/organizations","httpApiMethod":"post","httpApiCaseName":"[0009] Missing Fields in Request","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"071f20c4-641d-5ae2-84b1-6cb6102a786f","name":"Create an Organization ([0032] Organization - Invalid Country Code)","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations"],"host":["127","0","0","1"],"query":[],"variable":[]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","baseUrl":"http://127.0.0.1:3000","body":{"mode":"raw","raw":"{\n    \"legalName\": \"Release Test Legal Name\",\n    \"doingBusinessAs\": \"Release Test Doing Business As\",\n    \"legalDocument\": \"0000000000000\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"New Org\"\n    },\n    \"address\": {\n        \"line1\": \"138 West Street\",\n        \"line2\": \"Apt. 458\",\n        \"zipCode\": \"97446-2761\",\n        \"city\": \"Sandyview\",\n        \"state\": \"Massachusetts\",\n        \"country\": \"XX\"\n    },\n    \"metadata\": {}\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        const responseData = pm.response.json();","","pm.test(\"Error Code 0032\", function () {","    pm.expect(responseData.code).to.eql(\"0032\");","});","      "]}}],"responseDefinition":{"id":2739875,"createdAt":"2024-10-21T13:40:44.000Z","updatedAt":"2025-09-18T19:31:13.000Z","name":"[0032] Invalid Country Code","apiDetailId":0,"projectId":699928,"moduleId":760453,"code":400,"contentType":"json","ordering":380,"jsonSchema":{"type":"object","properties":{"code":{"type":"string"},"title":{"type":"string"},"message":{"type":"string"}},"required":["code","title","message"],"x-apidog-orders":["code","title","message"]},"defaultEnable":false,"folderId":743415,"responseExamples":[{"id":3970666,"name":"Invalid Country Code","data":"{\n    \"code\": \"0032\",\n    \"title\": \"Invalid Country Code\",\n    \"message\": \"The provided country code in the 'address.country' field does not conform to the ISO-3166 alpha-2 standard. Please provide a valid alpha-2 country code.\"\n}","apiDetailId":0,"responseId":2739875,"ordering":1,"description":null,"oasKey":"","oasExtensions":null}],"mediaType":"","headers":[],"description":"","oasExtensions":null,"schemaDefinitions":{}},"requestDefinition":{"jsonSchema":{"type":"object","properties":{},"x-apidog-orders":["01JG1HSP0RG46V2G2ZRZ93RW40"],"required":[],"x-apidog-refs":{"01JG1HSP0RG46V2G2ZRZ93RW40":{"$ref":"#/definitions/3670550"}}}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"bf42b123-9de5-4df4-9342-0015ad30d393","id":"071f20c4-641d-5ae2-84b1-6cb6102a786f","type":"http","name":"Create an Organization ([0032] Organization - Invalid Country Code)","projectId":699928,"relatedId":1259295,"environmentId":2661460,"blockNumber":58,"httpApiId":17810492,"httpApiCaseId":30130298,"httpApiName":"Create an Organization","httpApiPath":"/v1/organizations","httpApiMethod":"post","httpApiCaseName":"[0032] Invalid Country Code","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"9e86d140-358e-5a5e-aabc-37a6ee81e387","name":"Create an Organization ([0047] Organization - Bad Request)","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations"],"host":["127","0","0","1"],"query":[],"variable":[]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","baseUrl":"http://127.0.0.1:3000","body":{"mode":"raw","raw":"{\n    \"legalName\": \"{{$string.alphanumeric(min=300,max=300)}}\",\n    \"doingBusinessAs\": \"Release Test Doing Business As\",\n    \"legalDocument\": \"0000000000000\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"New Org\"\n    },\n    \"address\": {\n        \"line1\": \"138 West Street\",\n        \"line2\": \"Apt. 458\",\n        \"zipCode\": \"97446-2761\",\n        \"city\": \"Sandyview\",\n        \"state\": \"Massachusetts\",\n        \"country\": \"US\"\n    },\n    \"metadata\": {}\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        const responseData = pm.response.json();","","pm.test(\"Error Code 0047\", function () {","    pm.expect(responseData.code).to.eql(\"0047\");","});","","pm.test(\"legalName is present in the fields response\", function () {","    pm.expect(responseData.fields.hasOwnProperty(\"legalName\"));","});","      "]}}],"responseDefinition":{"id":2739902,"createdAt":"2024-10-21T13:48:49.000Z","updatedAt":"2025-09-18T19:31:13.000Z","name":"[0047] Bad Request","apiDetailId":0,"projectId":699928,"moduleId":760453,"code":400,"contentType":"json","ordering":530,"jsonSchema":{"type":"object","properties":{"code":{"type":"string"},"title":{"type":"string"},"message":{"type":"string"},"fields":{"type":"object","properties":{},"x-apidog-orders":[]}},"required":["code","title","message","fields"],"x-apidog-orders":["code","title","message","fields"]},"defaultEnable":false,"folderId":743415,"responseExamples":[{"id":3970681,"name":"Bad Request","data":"{\n    \"code\": \"0047\",\n    \"title\": \"Bad Request\",\n    \"message\": \"The server could not understand the request due to malformed syntax. Please check the listed fields and try again.\",\n    \"fields\": {\n        \"{{field}}\": \"{{error_message}}\"\n    }\n}","apiDetailId":0,"responseId":2739902,"ordering":1,"description":null,"oasKey":"","oasExtensions":null}],"mediaType":"","headers":[],"description":"","oasExtensions":null,"schemaDefinitions":{}},"requestDefinition":{"jsonSchema":{"type":"object","properties":{},"x-apidog-orders":["01JG1HSP0RG46V2G2ZRZ93RW40"],"required":[],"x-apidog-refs":{"01JG1HSP0RG46V2G2ZRZ93RW40":{"$ref":"#/definitions/3670550"}}}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"7ece9552-0b7f-4501-96b4-ef06dfd1fb31","id":"9e86d140-358e-5a5e-aabc-37a6ee81e387","type":"http","name":"Create an Organization ([0047] Organization - Bad Request)","projectId":699928,"relatedId":1259295,"environmentId":2661460,"blockNumber":59,"httpApiId":17810492,"httpApiCaseId":30130340,"httpApiName":"Create an Organization","httpApiPath":"/v1/organizations","httpApiMethod":"post","httpApiCaseName":"[0047] Bad Request","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"eabc8e06-901c-5c9f-8415-429d668e5385","name":"Create an Organization ([0053] Organization - Unexpected Fields)","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations"],"host":["127","0","0","1"],"query":[],"variable":[]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","baseUrl":"http://127.0.0.1:3000","body":{"mode":"raw","raw":"{\n    \"legalName\": \"Release Test Legal Name\",\n    \"invalidField\": \"invalidValue\",\n    \"doingBusinessAs\": \"Release Test Doing Business As\",\n    \"legalDocument\": \"0000000000000\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"New Org\"\n    },\n    \"address\": {\n        \"line1\": \"138 West Street\",\n        \"line2\": \"Apt. 458\",\n        \"zipCode\": \"97446-2761\",\n        \"city\": \"Sandyview\",\n        \"state\": \"Massachusetts\",\n        \"country\": \"US\"\n    },\n    \"metadata\": {}\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        const responseData = pm.response.json();","","pm.test(\"invalidField is present in the fields response\", function () {","    pm.expect(responseData.fields.hasOwnProperty(\"invalidField\"));","});","","pm.test(\"Error Code 0053\", function () {","    pm.expect(responseData.code).to.eql(\"0053\");","});","      "]}}],"responseDefinition":{"id":2739918,"createdAt":"2024-10-21T13:52:19.000Z","updatedAt":"2024-10-30T21:12:49.000Z","name":"[0053] Unexpected Fields in the Request","apiDetailId":0,"projectId":699928,"moduleId":760453,"code":400,"contentType":"json","ordering":590,"jsonSchema":{"type":"object","properties":{"code":{"type":"string"},"title":{"type":"string"},"message":{"type":"string"},"fields":{"type":"object","properties":{},"x-apidog-orders":[]}},"required":["code","title","message","fields"],"x-apidog-orders":["code","title","message","fields"]},"defaultEnable":false,"folderId":743415,"responseExamples":[{"id":3970687,"name":"Unexpected Fields in the Request","data":"{\n    \"code\": \"0053\",\n    \"title\": \"Unexpected Fields in the Request\",\n    \"message\": \"The request body contains more fields than expected. Please send only the allowed fields as per the documentation. The unexpected fields are listed in the fields object.\",\n    \"fields\": {\n        \"{{field}}\": \"{{value}}\"\n    }\n}","apiDetailId":0,"responseId":2739918,"ordering":1,"description":null,"oasKey":"","oasExtensions":null}],"mediaType":"","headers":[],"description":"","oasExtensions":null,"schemaDefinitions":{}},"requestDefinition":{"jsonSchema":{"type":"object","properties":{},"x-apidog-orders":["01JG1HSP0RG46V2G2ZRZ93RW40"],"required":[],"x-apidog-refs":{"01JG1HSP0RG46V2G2ZRZ93RW40":{"$ref":"#/definitions/3670550"}}}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"cc57dadd-c802-4b5a-be25-d2910e63e871","id":"eabc8e06-901c-5c9f-8415-429d668e5385","type":"http","name":"Create an Organization ([0053] Organization - Unexpected Fields)","projectId":699928,"relatedId":1259295,"environmentId":2661460,"blockNumber":60,"httpApiId":17810492,"httpApiCaseId":30130435,"httpApiName":"Create an Organization","httpApiPath":"/v1/organizations","httpApiMethod":"post","httpApiCaseName":"[0053] Unexpected Fields","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"622e1469-b01c-5988-8124-86e2b0adda6d","name":"Create an Organization ([0067] Organization - Metadata Nesting)","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations"],"host":["127","0","0","1"],"query":[],"variable":[]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","baseUrl":"http://127.0.0.1:3000","body":{"mode":"raw","raw":"{\n    \"legalName\": \"Regression Test\",\n    \"doingBusinessAs\": \"Regression Test\",\n    \"legalDocument\": \"0000000000000\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"New Org\"\n    },\n    \"address\": {\n        \"line1\": \"138 West Street\",\n        \"line2\": \"Apt. 458\",\n        \"zipCode\": \"97446-2761\",\n        \"city\": \"Sandyview\",\n        \"state\": \"Massachusetts\",\n        \"country\": \"US\"\n    },\n    \"metadata\": {\n        \"nesting\": {\n            \"text\": \"text\"\n        }\n    }\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        const responseData = pm.response.json();","","pm.test(\"Error Code 0067\", function () {","    pm.expect(responseData.code).to.eql(\"0067\");","});","      "]}}],"responseDefinition":{"id":2839092,"createdAt":"2024-12-26T17:50:31.000Z","updatedAt":"2024-12-26T17:51:06.000Z","name":"[0067] Invalid Metadata Nesting","apiDetailId":0,"projectId":699928,"moduleId":760453,"code":400,"contentType":"json","ordering":740,"jsonSchema":{"type":"object","properties":{"code":{"type":"string"},"title":{"type":"string"},"message":{"type":"string"}},"required":["code","title","message"],"x-apidog-orders":["code","title","message"]},"defaultEnable":false,"folderId":743415,"responseExamples":[{"id":3974047,"name":"Invalid Path Parameter","data":"{\n    \"code\": \"0067\",\n    \"title\": \"Invalid Metadata Nesting\",\n    \"message\": \"The metadata object cannot contain nested values. Please ensure that the value {{value}} is not nested and try again.\"\n}","apiDetailId":0,"responseId":2839092,"ordering":1,"description":null,"oasKey":"","oasExtensions":null}],"mediaType":"","headers":[],"description":"","oasExtensions":null,"schemaDefinitions":{}},"requestDefinition":{"jsonSchema":{"type":"object","properties":{},"x-apidog-orders":["01JG1HSP0RG46V2G2ZRZ93RW40"],"required":[],"x-apidog-refs":{"01JG1HSP0RG46V2G2ZRZ93RW40":{"$ref":"#/definitions/3670550"}}}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"1a40bd19-1a07-4e79-a0e0-8325e6f0dba5","id":"622e1469-b01c-5988-8124-86e2b0adda6d","type":"http","name":"Create an Organization ([0067] Organization - Metadata Nesting)","projectId":699928,"relatedId":1259295,"environmentId":2661460,"blockNumber":61,"httpApiId":17810492,"httpApiCaseId":30130438,"httpApiName":"Create an Organization","httpApiPath":"/v1/organizations","httpApiMethod":"post","httpApiCaseName":"[0067] Metadata Nesting","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"581957c3-35c0-59cb-a2c4-394308f24352","name":"Create an Organization ([0039] Organization - Parent Not Found)","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations"],"host":["127","0","0","1"],"query":[],"variable":[]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","baseUrl":"http://127.0.0.1:3000","body":{"mode":"raw","raw":"{\n    \"legalName\": \"Release Test Legal Name\",\n    \"doingBusinessAs\": \"Release Test Doing Business As\",\n    \"legalDocument\": \"0000000000000\",\n    \"parentOrganizationId\": \"{{$string.uuid}}\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"New Org\"\n    },\n    \"address\": {\n        \"line1\": \"138 West Street\",\n        \"line2\": \"Apt. 458\",\n        \"zipCode\": \"97446-2761\",\n        \"city\": \"Sandyview\",\n        \"state\": \"Massachusetts\",\n        \"country\": \"US\"\n    },\n    \"metadata\": {\n    }\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        const responseData = pm.response.json();","","pm.test(\"Error Code 0039\", function () {","    pm.expect(responseData.code).to.eql(\"0039\");","});","      "]}}],"responseDefinition":{"id":2739886,"createdAt":"2024-10-21T13:44:27.000Z","updatedAt":"2025-09-18T19:31:13.000Z","name":"[0039] Parent Organization ID Not Found","apiDetailId":0,"projectId":699928,"moduleId":760453,"code":404,"contentType":"json","ordering":450,"jsonSchema":{"type":"object","properties":{"code":{"type":"string"},"title":{"type":"string"},"message":{"type":"string"}},"required":["code","title","message"],"x-apidog-orders":["code","title","message"]},"defaultEnable":false,"folderId":743415,"responseExamples":[{"id":3970673,"name":"Parent Organization ID Not Found","data":"{\n    \"code\": \"0039\",\n    \"title\": \"Parent Organization ID Not Found\",\n    \"message\": \"The provided parent organization ID does not exist in our records. Please verify the parent organization ID and try again.\"\n}","apiDetailId":0,"responseId":2739886,"ordering":1,"description":null,"oasKey":"","oasExtensions":null}],"mediaType":"","headers":[],"description":"","oasExtensions":null,"schemaDefinitions":{}},"requestDefinition":{"jsonSchema":{"type":"object","properties":{},"x-apidog-orders":["01JG1HSP0RG46V2G2ZRZ93RW40"],"required":[],"x-apidog-refs":{"01JG1HSP0RG46V2G2ZRZ93RW40":{"$ref":"#/definitions/3670550"}}}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"e5a1d031-30f8-4d5d-aaf4-f474cd7a47da","id":"581957c3-35c0-59cb-a2c4-394308f24352","type":"http","name":"Create an Organization ([0039] Organization - Parent Not Found)","projectId":699928,"relatedId":1259295,"environmentId":2661460,"blockNumber":62,"httpApiId":17810492,"httpApiCaseId":30130863,"httpApiName":"Create an Organization","httpApiPath":"/v1/organizations","httpApiMethod":"post","httpApiCaseName":"[0039] Parent Not Found","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"558e464f-cef4-5610-9dca-de0a0eeaf115","type":"group","metaInfo":{"id":"558e464f-cef4-5610-9dca-de0a0eeaf115","type":"group","scopeType":"end","scopeStartId":"d4ec0da4-83c1-56da-9684-3e5bfc403597"}},{"id":"efd21438-be86-59b5-bcf8-a4129dae68df","type":"group","metaInfo":{"id":"efd21438-be86-59b5-bcf8-a4129dae68df","type":"group","scopeType":"start","scopeEndId":"3bd2abc5-0209-5f49-88ba-720af41ef176","name":"Organization - List"}},{"id":"0468a082-9ee4-5e13-b991-01c3b7f76448","name":"List Organizations ([Success] List)","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations"],"host":["127","0","0","1"],"query":[{"disabled":true,"key":"limit","value":"10"},{"disabled":true,"key":"page","value":"1"},{"disabled":true,"key":"metadata.chave","value":"mymetadata"},{"disabled":true,"key":"start_date","value":"2025-01-01"},{"disabled":true,"key":"end_date","value":"2025-01-01"},{"disabled":true,"key":"sort_order","value":"asc"}],"variable":[]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","baseUrl":"http://127.0.0.1:3000","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        var responseData = pm.response.json();","","pm.test(\"Validate Response Data Length \", function () {","  pm.expect(responseData.items.length).to.be.above(0);","});","      "]}}],"responseDefinition":{"id":24931410,"name":"Success","code":200,"contentType":"json","jsonSchema":{"type":"object","properties":{"items":{"type":"array","items":{"$ref":"#/definitions/5299823"}}},"x-apidog-orders":["items","01JMN0JSEM0VPZ7F22H69Q6EGB"],"required":["items"],"x-apidog-refs":{"01JMN0JSEM0VPZ7F22H69Q6EGB":{"$ref":"#/definitions/5381622"}}},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"3670550":{"type":"object","properties":{"legalName":{"type":"string","description":"The legal name of the Organization. Max length: 256","x-apidog-mock":"{{$company.name}}","maxLength":256},"parentOrganizationId":{"type":["string","null"],"description":"The unique identifier of the parent Organization.","x-apidog-mock":"{{$string.uuid}}","format":"uuid"},"doingBusinessAs":{"type":["string","null"],"x-apidog-mock":"{{$company.name}}","maxLength":256,"description":"The trade name of the Organization. Max length: 256"},"legalDocument":{"type":"string","description":"The document of the Organization. Max length: 256","x-apidog-mock":"{{$string.numeric(min=14,max=14)}}","maxLength":256},"address":{"type":"object","properties":{"line1":{"type":"string","x-apidog-mock":"{{$location.streetAddress}}","description":"The first line of the address. Usually used to inform the name of the street and the number of the building"},"line2":{"type":"string","x-apidog-mock":"{{$location.secondaryAddress}}","description":"The second line of the address. Usually used to inform about any complements such as the number of the apartment."},"zipCode":{"type":"string","x-apidog-mock":"{{$location.zipCode}}","description":"The postal code."},"city":{"type":"string","x-apidog-mock":"{{$location.city}}","description":"The name of the city where the Organization is established."},"state":{"type":"string","x-apidog-mock":"{{$location.state}}","description":"The two-letter abbreviation that represents the State where the Organization is."},"country":{"description":"The two-letter code (ISO 3166-1 alpha2) that represents the country where the Organization is.","type":"string","x-apidog-mock":"{{$location.countryCode}}"}},"required":["line1","line2","zipCode","city","state","country"],"x-apidog-orders":["line1","line2","zipCode","city","state","country"],"description":"An object containing information about the address of the Organization."}},"required":["legalName","legalDocument"],"x-apidog-orders":["legalName","parentOrganizationId","doingBusinessAs","legalDocument","01JMJCWQRYRQYHWPFNAXCR6EWK","address","01JMJCQ30S11CPHT86CSTND4PF"],"x-apidog-refs":{"01JMJCQ30S11CPHT86CSTND4PF":{"$ref":"#/definitions/5295307"},"01JMJCWQRYRQYHWPFNAXCR6EWK":{"$ref":"#/definitions/5295306"}},"title":"organization.request.v3.x.x","name":"organization.request.v3.x.x","moduleId":760453},"5295306":{"type":"object","properties":{"status":{"type":"object","properties":{"description":{"type":["string","null"],"description":"The description of the status. Max length: 256"},"code":{"type":"string","description":"The name of the status. Max length:100"}},"x-apidog-orders":["description","code"],"description":"An object containing information about the status."}},"x-apidog-orders":["status"],"title":"status","name":"status","moduleId":760453},"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299823":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique reference of the Organization."}},"x-apidog-orders":["id","01JMCYXQ79XF1Z2H2FCZFK6T1J","01JMCZEPGEYNEKH7NZZHJHM7TJ"],"x-apidog-refs":{"01JMCYXQ79XF1Z2H2FCZFK6T1J":{"$ref":"#/definitions/3670550"},"01JMCZEPGEYNEKH7NZZHJHM7TJ":{"$ref":"#/definitions/5299902"}},"title":"organization.response.v3.x.x","name":"organization.response.v3.x.x","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5381622":{"type":"object","properties":{"page":{"type":"integer","x-apidog-mock":"1"},"limit":{"type":"integer","x-apidog-mock":"10"}},"x-apidog-orders":["page","limit"],"required":["page","limit"],"title":"pagination.pagenumber","name":"pagination.pagenumber","moduleId":760453}}},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"e8b69243-6db5-480e-91bc-9187eed2eb39","id":"0468a082-9ee4-5e13-b991-01c3b7f76448","type":"http","name":"List Organizations ([Success] List)","projectId":699928,"relatedId":1259295,"environmentId":2661460,"blockNumber":63,"httpApiId":17810493,"httpApiCaseId":30130943,"httpApiName":"List Organizations","httpApiPath":"/v1/organizations","httpApiMethod":"get","httpApiCaseName":"[Success] List","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"73e3d26c-955a-5c39-92e4-fc2360744b51","name":"List Organizations ([0080] List Org - Page Limit Exceeds )","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations"],"host":["127","0","0","1"],"query":[{"disabled":false,"key":"limit","value":"10000000"},{"disabled":false,"key":"page","value":"1"},{"disabled":true,"key":"metadata.chave","value":"mymetadata"},{"disabled":true,"key":"start_date","value":"2025-01-01"},{"disabled":true,"key":"end_date","value":"2025-01-01"},{"disabled":true,"key":"sort_order","value":"asc"}],"variable":[]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","baseUrl":"http://127.0.0.1:3000","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        const responseData = pm.response.json();","","pm.test(\"Error Code 0080\", function () {","    pm.expect(responseData.code).to.eql(\"0080\");","});","      "]}}],"responseDefinition":{"id":2839124,"createdAt":"2024-12-26T18:08:07.000Z","updatedAt":"2024-12-26T18:08:46.000Z","name":"[0080] Pagination Limit Exceeded","apiDetailId":0,"projectId":699928,"moduleId":760453,"code":400,"contentType":"json","ordering":860,"jsonSchema":{"type":"object","properties":{"code":{"type":"string"},"title":{"type":"string"},"message":{"type":"string"}},"required":["code","title","message"],"x-apidog-orders":["code","title","message"]},"defaultEnable":false,"folderId":743415,"responseExamples":[{"id":3974059,"name":"Pagination Limit Exceeded","data":"{\n    \"code\": \"0080\",\n    \"title\": \"Pagination Limit Exceeded\",\n    \"message\": \"The pagination limit exceeds the maximum allowed of {{pageLimit}} items per page. Please verify the limit and try again.\"\n}","apiDetailId":0,"responseId":2839124,"ordering":1,"description":null,"oasKey":"","oasExtensions":null}],"mediaType":"","headers":[],"description":"","oasExtensions":null,"schemaDefinitions":{}},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"bd3b4a19-f0da-4234-adba-53148b1f5c06","id":"73e3d26c-955a-5c39-92e4-fc2360744b51","type":"http","name":"List Organizations ([0080] List Org - Page Limit Exceeds )","projectId":699928,"relatedId":1259295,"environmentId":2661460,"blockNumber":64,"httpApiId":17810493,"httpApiCaseId":30130945,"httpApiName":"List Organizations","httpApiPath":"/v1/organizations","httpApiMethod":"get","httpApiCaseName":"[0080] Page Limit Exceeds ","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"e651aef4-b5f2-5d79-9b36-393a164ecb49","name":"List Organizations ([0081] List Org - Invalid Sort Order )","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations"],"host":["127","0","0","1"],"query":[{"disabled":true,"key":"limit","value":"10"},{"disabled":true,"key":"page","value":"1"},{"disabled":true,"key":"metadata.chave","value":"mymetadata"},{"disabled":true,"key":"start_date","value":"2025-01-01"},{"disabled":true,"key":"end_date","value":"2025-01-01"},{"disabled":false,"key":"sort_order","value":"invalid"}],"variable":[]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","baseUrl":"http://127.0.0.1:3000","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        const responseData = pm.response.json();","","pm.test(\"Error Code 0081\", function () {","    pm.expect(responseData.code).to.eql(\"0081\");","});","      "]}}],"responseDefinition":{"id":2839127,"createdAt":"2024-12-26T18:09:14.000Z","updatedAt":"2024-12-26T18:09:36.000Z","name":"[0081] Invalid Sort Order","apiDetailId":0,"projectId":699928,"moduleId":760453,"code":400,"contentType":"json","ordering":870,"jsonSchema":{"type":"object","properties":{"code":{"type":"string"},"title":{"type":"string"},"message":{"type":"string"}},"required":["code","title","message"],"x-apidog-orders":["code","title","message"]},"defaultEnable":false,"folderId":743415,"responseExamples":[{"id":3974060,"name":"Date Range Exceeds Limit Error","data":"{\n    \"code\": \"0081\",\n    \"title\": \"Invalid Sort Order\",\n    \"message\": \"The 'sort_order' field must be 'asc' or 'desc'. Please provide a valid sort order and try again.\"\n}","apiDetailId":0,"responseId":2839127,"ordering":1,"description":null,"oasKey":"","oasExtensions":null}],"mediaType":"","headers":[],"description":"","oasExtensions":null,"schemaDefinitions":{}},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"5bf78f43-c165-4756-b4ff-c718fcfb78fa","id":"e651aef4-b5f2-5d79-9b36-393a164ecb49","type":"http","name":"List Organizations ([0081] List Org - Invalid Sort Order )","projectId":699928,"relatedId":1259295,"environmentId":2661460,"blockNumber":65,"httpApiId":17810493,"httpApiCaseId":30130980,"httpApiName":"List Organizations","httpApiPath":"/v1/organizations","httpApiMethod":"get","httpApiCaseName":"[0081] Invalid Sort Order ","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"9ce0a6be-970b-5cc8-b99e-332d07eae981","name":"List Organizations ([0083] List Org - Invalid Data Range )","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations"],"host":["127","0","0","1"],"query":[{"disabled":true,"key":"limit","value":"10"},{"disabled":true,"key":"page","value":"1"},{"disabled":true,"key":"metadata.chave","value":"mymetadata"},{"disabled":false,"key":"start_date","value":"2021-01-01"},{"disabled":true,"key":"end_date","value":"2025-01-01"},{"disabled":true,"key":"sort_order","value":"asc"}],"variable":[]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","baseUrl":"http://127.0.0.1:3000","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        const responseData = pm.response.json();","","pm.test(\"Error Code 0083\", function () {","    pm.expect(responseData.code).to.eql(\"0083\");","});","      "]}}],"responseDefinition":{"id":2839135,"createdAt":"2024-12-26T18:12:00.000Z","updatedAt":"2025-03-06T13:26:37.000Z","name":"[0083] Invalid Date Range Error","apiDetailId":0,"projectId":699928,"moduleId":760453,"code":400,"contentType":"json","ordering":890,"jsonSchema":{"type":"object","properties":{"code":{"type":"string"},"title":{"type":"string"},"message":{"type":"string"}},"required":["code","title","message"],"x-apidog-orders":["code","title","message"]},"defaultEnable":false,"folderId":743415,"responseExamples":[{"id":3974062,"name":"Invalid Sort Parameters","data":"{\n    \"title\": \"Invalid Date Range Error\",\n    \"message\": \"Both 'initialDate' and 'finalDate' fields are required and must be in the 'yyyy-mm-dd' format. Please provide valid dates and try again.\",\n    \"code\": \"0083\"\n}","apiDetailId":0,"responseId":2839135,"ordering":1,"description":null,"oasKey":"","oasExtensions":null}],"mediaType":"","headers":[],"description":"","oasExtensions":null,"schemaDefinitions":{}},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"0d49d104-80e9-49c8-a167-8b20f959e53b","id":"9ce0a6be-970b-5cc8-b99e-332d07eae981","type":"http","name":"List Organizations ([0083] List Org - Invalid Data Range )","projectId":699928,"relatedId":1259295,"environmentId":2661460,"blockNumber":66,"httpApiId":17810493,"httpApiCaseId":30130983,"httpApiName":"List Organizations","httpApiPath":"/v1/organizations","httpApiMethod":"get","httpApiCaseName":"[0083] Invalid Data Range ","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"3bd2abc5-0209-5f49-88ba-720af41ef176","type":"group","metaInfo":{"id":"3bd2abc5-0209-5f49-88ba-720af41ef176","type":"group","scopeType":"end","scopeStartId":"efd21438-be86-59b5-bcf8-a4129dae68df"}},{"id":"c957f44a-331a-50bf-8f54-7d1c0ee0abe1","type":"group","metaInfo":{"id":"c957f44a-331a-50bf-8f54-7d1c0ee0abe1","type":"group","scopeType":"start","scopeEndId":"7aa681e4-7292-508a-900d-f01c0d0d8bd4","name":"Organization - Retrieve"}},{"id":"e9ac560e-8fc2-5c09-9fac-a38c520c9bdc","name":"Retrieve an Organization ([Success] Retrieve)","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","baseUrl":"http://127.0.0.1:3000","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[],"responseDefinition":{"id":24931411,"name":"Success","code":200,"contentType":"json","jsonSchema":{"type":"object","properties":{},"x-apidog-orders":["01JMJD28SZV1WVQX36WPW0PVRG"],"required":[],"x-apidog-refs":{"01JMJD28SZV1WVQX36WPW0PVRG":{"$ref":"#/definitions/5299823"}}},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"3670550":{"type":"object","properties":{"legalName":{"type":"string","description":"The legal name of the Organization. Max length: 256","x-apidog-mock":"{{$company.name}}","maxLength":256},"parentOrganizationId":{"type":["string","null"],"description":"The unique identifier of the parent Organization.","x-apidog-mock":"{{$string.uuid}}","format":"uuid"},"doingBusinessAs":{"type":["string","null"],"x-apidog-mock":"{{$company.name}}","maxLength":256,"description":"The trade name of the Organization. Max length: 256"},"legalDocument":{"type":"string","description":"The document of the Organization. Max length: 256","x-apidog-mock":"{{$string.numeric(min=14,max=14)}}","maxLength":256},"address":{"type":"object","properties":{"line1":{"type":"string","x-apidog-mock":"{{$location.streetAddress}}","description":"The first line of the address. Usually used to inform the name of the street and the number of the building"},"line2":{"type":"string","x-apidog-mock":"{{$location.secondaryAddress}}","description":"The second line of the address. Usually used to inform about any complements such as the number of the apartment."},"zipCode":{"type":"string","x-apidog-mock":"{{$location.zipCode}}","description":"The postal code."},"city":{"type":"string","x-apidog-mock":"{{$location.city}}","description":"The name of the city where the Organization is established."},"state":{"type":"string","x-apidog-mock":"{{$location.state}}","description":"The two-letter abbreviation that represents the State where the Organization is."},"country":{"description":"The two-letter code (ISO 3166-1 alpha2) that represents the country where the Organization is.","type":"string","x-apidog-mock":"{{$location.countryCode}}"}},"required":["line1","line2","zipCode","city","state","country"],"x-apidog-orders":["line1","line2","zipCode","city","state","country"],"description":"An object containing information about the address of the Organization."}},"required":["legalName","legalDocument"],"x-apidog-orders":["legalName","parentOrganizationId","doingBusinessAs","legalDocument","01JMJCWQRYRQYHWPFNAXCR6EWK","address","01JMJCQ30S11CPHT86CSTND4PF"],"x-apidog-refs":{"01JMJCQ30S11CPHT86CSTND4PF":{"$ref":"#/definitions/5295307"},"01JMJCWQRYRQYHWPFNAXCR6EWK":{"$ref":"#/definitions/5295306"}},"title":"organization.request.v3.x.x","name":"organization.request.v3.x.x","moduleId":760453},"5295306":{"type":"object","properties":{"status":{"type":"object","properties":{"description":{"type":["string","null"],"description":"The description of the status. Max length: 256"},"code":{"type":"string","description":"The name of the status. Max length:100"}},"x-apidog-orders":["description","code"],"description":"An object containing information about the status."}},"x-apidog-orders":["status"],"title":"status","name":"status","moduleId":760453},"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299823":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique reference of the Organization."}},"x-apidog-orders":["id","01JMCYXQ79XF1Z2H2FCZFK6T1J","01JMCZEPGEYNEKH7NZZHJHM7TJ"],"x-apidog-refs":{"01JMCYXQ79XF1Z2H2FCZFK6T1J":{"$ref":"#/definitions/3670550"},"01JMCZEPGEYNEKH7NZZHJHM7TJ":{"$ref":"#/definitions/5299902"}},"title":"organization.response.v3.x.x","name":"organization.response.v3.x.x","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453}}},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"69acd4c2-8595-476c-b606-e6027474b673","id":"e9ac560e-8fc2-5c09-9fac-a38c520c9bdc","type":"http","name":"Retrieve an Organization ([Success] Retrieve)","projectId":699928,"relatedId":1259295,"environmentId":2661460,"blockNumber":67,"httpApiId":17810494,"httpApiCaseId":30130998,"httpApiName":"Retrieve an Organization","httpApiPath":"/v1/organizations/{organization_id}","httpApiMethod":"get","httpApiCaseName":"[Success] Retrieve","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"a086d6bf-a85a-5156-9ff9-4672fd340aea","name":"Retrieve an Organization ([0007] Entity Not Found)","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{$string.uuid}}"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{$string.uuid}}","key":"organization_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","baseUrl":"http://127.0.0.1:3000","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        const responseData = pm.response.json();","","pm.test(\"Error Code 0007\", function () {","    pm.expect(responseData.code).to.eql(\"0007\");","});","      "]}}],"responseDefinition":{"id":2739824,"createdAt":"2024-10-21T13:23:57.000Z","updatedAt":"2025-09-18T19:31:13.000Z","name":"[0007] Entity Not Found","apiDetailId":0,"projectId":699928,"moduleId":760453,"code":404,"contentType":"json","ordering":130,"jsonSchema":{"type":"object","properties":{"code":{"type":"string"},"title":{"type":"string"},"message":{"type":"string"}},"required":["code","title","message"],"x-apidog-orders":["code","title","message"]},"defaultEnable":false,"folderId":743415,"responseExamples":[{"id":3970641,"createdAt":"2024-10-21T13:24:18.000Z","updatedAt":"2024-10-21T13:24:18.000Z","deletedAt":null,"apiDetailId":0,"name":"Entity Not Found","responseId":2739824,"data":"{\n    \"code\": \"0007\",\n    \"title\": \"Entity Not Found\",\n    \"message\": \"No entity was found for the given ID. Please make sure to use the correct ID for the entity you are trying to manage.\"\n}","description":null,"oasKey":"","oasExtensions":null,"ordering":1}],"mediaType":"","headers":[],"description":"","oasExtensions":null,"schemaDefinitions":{}},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"4636e34e-7151-4d6d-a4e3-be085ee4777d","id":"a086d6bf-a85a-5156-9ff9-4672fd340aea","type":"http","name":"Retrieve an Organization ([0007] Entity Not Found)","projectId":699928,"relatedId":1259295,"environmentId":2661460,"blockNumber":68,"httpApiId":17810494,"httpApiCaseId":30131001,"httpApiName":"Retrieve an Organization","httpApiPath":"/v1/organizations/{organization_id}","httpApiMethod":"get","httpApiCaseName":"[0007] Entity Not Found","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"8f339486-c3ed-59a6-a496-2cb72fb989e2","name":"Retrieve an Organization ([0065] Invalid Path Param)","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","invalid"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"invalid","key":"organization_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","baseUrl":"http://127.0.0.1:3000","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        const responseData = pm.response.json();","","pm.test(\"Error Code 0065\", function () {","    pm.expect(responseData.code).to.eql(\"0065\");","});","      "]}}],"responseDefinition":{"id":2739946,"createdAt":"2024-10-21T13:59:15.000Z","updatedAt":"2024-10-30T21:13:05.000Z","name":"[0065] Invalid Path Parameter","apiDetailId":0,"projectId":699928,"moduleId":760453,"code":400,"contentType":"json","ordering":710,"jsonSchema":{"type":"object","properties":{"code":{"type":"string"},"title":{"type":"string"},"message":{"type":"string"}},"required":["code","title","message"],"x-apidog-orders":["code","title","message"]},"defaultEnable":false,"folderId":743415,"responseExamples":[{"id":3970699,"createdAt":"2024-10-21T13:59:36.000Z","updatedAt":"2024-10-21T13:59:36.000Z","deletedAt":null,"apiDetailId":0,"name":"Invalid Path Parameter","responseId":2739946,"data":"{\n    \"code\": \"0065\",\n    \"title\": \"Invalid Path Parameter\",\n    \"message\": \"The provided path parameter {{parameter_name}} is not in the expected format. Please ensure the parameter adheres to the required format and try again.\"\n}","description":null,"oasKey":"","oasExtensions":null,"ordering":1}],"mediaType":"","headers":[],"description":"","oasExtensions":null,"schemaDefinitions":{}},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"003e8699-8839-4504-a596-4c6e1e3fd9c6","id":"8f339486-c3ed-59a6-a496-2cb72fb989e2","type":"http","name":"Retrieve an Organization ([0065] Invalid Path Param)","projectId":699928,"relatedId":1259295,"environmentId":2661460,"blockNumber":69,"httpApiId":17810494,"httpApiCaseId":30131008,"httpApiName":"Retrieve an Organization","httpApiPath":"/v1/organizations/{organization_id}","httpApiMethod":"get","httpApiCaseName":"[0065] Invalid Path Param","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"7aa681e4-7292-508a-900d-f01c0d0d8bd4","type":"group","metaInfo":{"id":"7aa681e4-7292-508a-900d-f01c0d0d8bd4","type":"group","scopeType":"end","scopeStartId":"c957f44a-331a-50bf-8f54-7d1c0ee0abe1"}},{"id":"5053ae29-f668-58c3-a05a-99366b38e537","type":"group","metaInfo":{"id":"5053ae29-f668-58c3-a05a-99366b38e537","type":"group","scopeType":"start","scopeEndId":"28973dde-6439-5d01-93ce-1f646c99f01c","name":"Organization - Update"}},{"id":"370059e2-40cf-5f5f-a3dc-a2b81e503baa","name":"Update an Organizations (Update an Organization)","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"PATCH","baseUrl":"http://127.0.0.1:3000","body":{"mode":"raw","raw":"{\n    \"legalName\": \"Updated Release Test Legal Name\",\n    \"doingBusinessAs\": \"Updated Release Test Doing Business As\",\n    \"status\": {\n        \"code\": \"BLOCKED\",\n        \"description\": \"Blocked Value\"\n    },\n    \"address\": {\n        \"line1\": \"New Avenue\",\n        \"line2\": \"4567\",\n        \"zipCode\": \"04696040\",\n        \"city\": \"{{$randomCity}}\",\n        \"state\": \"{{$randomCountryCode}}\",\n        \"country\": \"{{$randomCountryCode}}\"\n    },\n    \"metadata\": {\n        \"key_4\": 1.15\n    }\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[],"responseDefinition":{"id":24931412,"name":"Success","code":200,"contentType":"json","jsonSchema":{"type":"object","properties":{},"x-apidog-orders":["01JMN0M7VRVXPPQDP756SR5E13"],"required":[],"x-apidog-refs":{"01JMN0M7VRVXPPQDP756SR5E13":{"$ref":"#/definitions/5299823"}}},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"3670550":{"type":"object","properties":{"legalName":{"type":"string","description":"The legal name of the Organization. Max length: 256","x-apidog-mock":"{{$company.name}}","maxLength":256},"parentOrganizationId":{"type":["string","null"],"description":"The unique identifier of the parent Organization.","x-apidog-mock":"{{$string.uuid}}","format":"uuid"},"doingBusinessAs":{"type":["string","null"],"x-apidog-mock":"{{$company.name}}","maxLength":256,"description":"The trade name of the Organization. Max length: 256"},"legalDocument":{"type":"string","description":"The document of the Organization. Max length: 256","x-apidog-mock":"{{$string.numeric(min=14,max=14)}}","maxLength":256},"address":{"type":"object","properties":{"line1":{"type":"string","x-apidog-mock":"{{$location.streetAddress}}","description":"The first line of the address. Usually used to inform the name of the street and the number of the building"},"line2":{"type":"string","x-apidog-mock":"{{$location.secondaryAddress}}","description":"The second line of the address. Usually used to inform about any complements such as the number of the apartment."},"zipCode":{"type":"string","x-apidog-mock":"{{$location.zipCode}}","description":"The postal code."},"city":{"type":"string","x-apidog-mock":"{{$location.city}}","description":"The name of the city where the Organization is established."},"state":{"type":"string","x-apidog-mock":"{{$location.state}}","description":"The two-letter abbreviation that represents the State where the Organization is."},"country":{"description":"The two-letter code (ISO 3166-1 alpha2) that represents the country where the Organization is.","type":"string","x-apidog-mock":"{{$location.countryCode}}"}},"required":["line1","line2","zipCode","city","state","country"],"x-apidog-orders":["line1","line2","zipCode","city","state","country"],"description":"An object containing information about the address of the Organization."}},"required":["legalName","legalDocument"],"x-apidog-orders":["legalName","parentOrganizationId","doingBusinessAs","legalDocument","01JMJCWQRYRQYHWPFNAXCR6EWK","address","01JMJCQ30S11CPHT86CSTND4PF"],"x-apidog-refs":{"01JMJCQ30S11CPHT86CSTND4PF":{"$ref":"#/definitions/5295307"},"01JMJCWQRYRQYHWPFNAXCR6EWK":{"$ref":"#/definitions/5295306"}},"title":"organization.request.v3.x.x","name":"organization.request.v3.x.x","moduleId":760453},"5295306":{"type":"object","properties":{"status":{"type":"object","properties":{"description":{"type":["string","null"],"description":"The description of the status. Max length: 256"},"code":{"type":"string","description":"The name of the status. Max length:100"}},"x-apidog-orders":["description","code"],"description":"An object containing information about the status."}},"x-apidog-orders":["status"],"title":"status","name":"status","moduleId":760453},"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299823":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique reference of the Organization."}},"x-apidog-orders":["id","01JMCYXQ79XF1Z2H2FCZFK6T1J","01JMCZEPGEYNEKH7NZZHJHM7TJ"],"x-apidog-refs":{"01JMCYXQ79XF1Z2H2FCZFK6T1J":{"$ref":"#/definitions/3670550"},"01JMCZEPGEYNEKH7NZZHJHM7TJ":{"$ref":"#/definitions/5299902"}},"title":"organization.response.v3.x.x","name":"organization.response.v3.x.x","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453}}},"requestDefinition":{"jsonSchema":{"type":"object","properties":{},"x-apidog-orders":["01JMWN5W3CWEEFQYQRKC48N3R5"],"required":[],"x-apidog-refs":{"01JMWN5W3CWEEFQYQRKC48N3R5":{"$ref":"#/definitions/5398340"}}}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"5e14af93-a808-4e81-8e99-0ccdd55d48af","id":"370059e2-40cf-5f5f-a3dc-a2b81e503baa","type":"http","name":"Update an Organizations (Update an Organization)","projectId":699928,"relatedId":1259295,"environmentId":2661460,"blockNumber":70,"httpApiId":17810495,"httpApiCaseId":30131077,"httpApiName":"Update an Organizations","httpApiPath":"/v1/organizations/{organization_id}","httpApiMethod":"patch","httpApiCaseName":"Update an Organization","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"46665d30-8d31-57ca-a089-ee4f944133b1","name":"Update an Organizations ([0007] Entity Not Found)","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{$string.uuid}}"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{$string.uuid}}","key":"organization_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"PATCH","baseUrl":"http://127.0.0.1:3000","body":{"mode":"raw","raw":"{\n    \"legalName\": \"{{$randomCompanyName}}\",\n    \"parentOrganizationId\": \"{{organization_id}}\",\n    \"doingBusinessAs\": \"The ledger.io\",\n    \"status\": {\n        \"code\": \"BLOCKED\",\n        \"description\": \"Teste Blocked\"\n    },\n    \"address\": {\n        \"line1\": \"Avenida Paulista, 1234\",\n        \"line2\": \"CJ 203\",\n        \"zipCode\": \"04696040\",\n        \"city\": \"{{$randomCity}}\",\n        \"state\": \"{{$randomCountryCode}}\",\n        \"country\": \"{{$randomCountryCode}}\"\n    },\n    \"metadata\": {\n        \"chave\": \"metadata_chave_update\",\n        \"bitcoinn\": \"{{$randomBitcoin}}\",\n        \"boolean\": {{$randomBoolean}},\n        \"double\": 10.5,\n        \"int\": 1\n    }\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        const responseData = pm.response.json();","","pm.test(\"Error Code 0007\", function () {","    pm.expect(responseData.code).to.eql(\"0007\");","});","      "]}}],"responseDefinition":{"id":2739824,"createdAt":"2024-10-21T13:23:57.000Z","updatedAt":"2025-09-18T19:31:13.000Z","name":"[0007] Entity Not Found","apiDetailId":0,"projectId":699928,"moduleId":760453,"code":404,"contentType":"json","ordering":130,"jsonSchema":{"type":"object","properties":{"code":{"type":"string"},"title":{"type":"string"},"message":{"type":"string"}},"required":["code","title","message"],"x-apidog-orders":["code","title","message"]},"defaultEnable":false,"folderId":743415,"responseExamples":[{"id":3970641,"createdAt":"2024-10-21T13:24:18.000Z","updatedAt":"2024-10-21T13:24:18.000Z","deletedAt":null,"apiDetailId":0,"name":"Entity Not Found","responseId":2739824,"data":"{\n    \"code\": \"0007\",\n    \"title\": \"Entity Not Found\",\n    \"message\": \"No entity was found for the given ID. Please make sure to use the correct ID for the entity you are trying to manage.\"\n}","description":null,"oasKey":"","oasExtensions":null,"ordering":1}],"mediaType":"","headers":[],"description":"","oasExtensions":null,"schemaDefinitions":{}},"requestDefinition":{"jsonSchema":{"type":"object","properties":{},"x-apidog-orders":["01JMWN5W3CWEEFQYQRKC48N3R5"],"required":[],"x-apidog-refs":{"01JMWN5W3CWEEFQYQRKC48N3R5":{"$ref":"#/definitions/5398340"}}}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"9e5a6802-904c-45ac-8784-82c5ed594475","id":"46665d30-8d31-57ca-a089-ee4f944133b1","type":"http","name":"Update an Organizations ([0007] Entity Not Found)","projectId":699928,"relatedId":1259295,"environmentId":2661460,"blockNumber":71,"httpApiId":17810495,"httpApiCaseId":30131079,"httpApiName":"Update an Organizations","httpApiPath":"/v1/organizations/{organization_id}","httpApiMethod":"patch","httpApiCaseName":"[0007] Entity Not Found","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"ac4acd3b-ffec-5486-a013-c1b98075e573","name":"Update an Organizations ([0039] Parent Org Not Found)","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"PATCH","baseUrl":"http://127.0.0.1:3000","body":{"mode":"raw","raw":"{\n    \"legalName\": \"{{$randomCompanyName}}\",\n    \"parentOrganizationId\": \"{{$string.uuid}}\",\n    \"doingBusinessAs\": \"The ledger.io\",\n    \"status\": {\n        \"code\": \"BLOCKED\",\n        \"description\": \"Teste Blocked\"\n    },\n    \"address\": {\n        \"line1\": \"Avenida Paulista, 1234\",\n        \"line2\": \"CJ 203\",\n        \"zipCode\": \"04696040\",\n        \"city\": \"{{$randomCity}}\",\n        \"state\": \"{{$randomCountryCode}}\",\n        \"country\": \"{{$randomCountryCode}}\"\n    },\n    \"metadata\": {\n        \"chave\": \"metadata_chave_update\",\n        \"bitcoinn\": \"{{$randomBitcoin}}\",\n        \"boolean\": {{$randomBoolean}},\n        \"double\": 10.5,\n        \"int\": 1\n    }\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        const responseData = pm.response.json();","","pm.test(\"Error Code 0039\", function () {","    pm.expect(responseData.code).to.eql(\"0039\");","});","      "]}}],"responseDefinition":{"id":2739886,"createdAt":"2024-10-21T13:44:27.000Z","updatedAt":"2025-09-18T19:31:13.000Z","name":"[0039] Parent Organization ID Not Found","apiDetailId":0,"projectId":699928,"moduleId":760453,"code":404,"contentType":"json","ordering":450,"jsonSchema":{"type":"object","properties":{"code":{"type":"string"},"title":{"type":"string"},"message":{"type":"string"}},"required":["code","title","message"],"x-apidog-orders":["code","title","message"]},"defaultEnable":false,"folderId":743415,"responseExamples":[{"id":3970673,"name":"Parent Organization ID Not Found","data":"{\n    \"code\": \"0039\",\n    \"title\": \"Parent Organization ID Not Found\",\n    \"message\": \"The provided parent organization ID does not exist in our records. Please verify the parent organization ID and try again.\"\n}","apiDetailId":0,"responseId":2739886,"ordering":1,"description":null,"oasKey":"","oasExtensions":null}],"mediaType":"","headers":[],"description":"","oasExtensions":null,"schemaDefinitions":{}},"requestDefinition":{"jsonSchema":{"type":"object","properties":{},"x-apidog-orders":["01JMWN5W3CWEEFQYQRKC48N3R5"],"required":[],"x-apidog-refs":{"01JMWN5W3CWEEFQYQRKC48N3R5":{"$ref":"#/definitions/5398340"}}}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"ab07efa6-c481-40ee-ba14-76f1a04a6973","id":"ac4acd3b-ffec-5486-a013-c1b98075e573","type":"http","name":"Update an Organizations ([0039] Parent Org Not Found)","projectId":699928,"relatedId":1259295,"environmentId":2661460,"blockNumber":72,"httpApiId":17810495,"httpApiCaseId":30131123,"httpApiName":"Update an Organizations","httpApiPath":"/v1/organizations/{organization_id}","httpApiMethod":"patch","httpApiCaseName":"[0039] Parent Org Not Found","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"c7d849b4-39a8-5ae9-b712-98d979f37dcb","name":"Update an Organizations ([0047] Bad Request)","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"PATCH","baseUrl":"http://127.0.0.1:3000","body":{"mode":"raw","raw":"{\n    \"legalName\": \"{{$string.alphanumeric(min=300,max=300)}}\",\n    \"parentOrganizationId\": \"\",\n    \"doingBusinessAs\": \"The ledger.io\",\n    \"status\": {\n        \"code\": \"BLOCKED\",\n        \"description\": \"Teste Blocked\"\n    },\n    \"address\": {\n        \"line1\": \"Avenida Paulista, 1234\",\n        \"line2\": \"CJ 203\",\n        \"zipCode\": \"04696040\",\n        \"city\": \"{{$randomCity}}\",\n        \"state\": \"{{$randomCountryCode}}\",\n        \"country\": \"{{$randomCountryCode}}\"\n    },\n    \"metadata\": {\n        \"chave\": \"metadata_chave_update\",\n        \"bitcoinn\": \"{{$randomBitcoin}}\",\n        \"boolean\": {{$randomBoolean}},\n        \"double\": 10.5,\n        \"int\": 1\n    }\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        const responseData = pm.response.json();","","pm.test(\"Error Code 0047\", function () {","    pm.expect(responseData.code).to.eql(\"0047\");","});","      "]}}],"responseDefinition":{"id":2739902,"createdAt":"2024-10-21T13:48:49.000Z","updatedAt":"2025-09-18T19:31:13.000Z","name":"[0047] Bad Request","apiDetailId":0,"projectId":699928,"moduleId":760453,"code":400,"contentType":"json","ordering":530,"jsonSchema":{"type":"object","properties":{"code":{"type":"string"},"title":{"type":"string"},"message":{"type":"string"},"fields":{"type":"object","properties":{},"x-apidog-orders":[]}},"required":["code","title","message","fields"],"x-apidog-orders":["code","title","message","fields"]},"defaultEnable":false,"folderId":743415,"responseExamples":[{"id":3970681,"name":"Bad Request","data":"{\n    \"code\": \"0047\",\n    \"title\": \"Bad Request\",\n    \"message\": \"The server could not understand the request due to malformed syntax. Please check the listed fields and try again.\",\n    \"fields\": {\n        \"{{field}}\": \"{{error_message}}\"\n    }\n}","apiDetailId":0,"responseId":2739902,"ordering":1,"description":null,"oasKey":"","oasExtensions":null}],"mediaType":"","headers":[],"description":"","oasExtensions":null,"schemaDefinitions":{}},"requestDefinition":{"jsonSchema":{"type":"object","properties":{},"x-apidog-orders":["01JMWN5W3CWEEFQYQRKC48N3R5"],"required":[],"x-apidog-refs":{"01JMWN5W3CWEEFQYQRKC48N3R5":{"$ref":"#/definitions/5398340"}}}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"fc4e818d-5011-4ea1-96fd-b217fe7a2ee8","id":"c7d849b4-39a8-5ae9-b712-98d979f37dcb","type":"http","name":"Update an Organizations ([0047] Bad Request)","projectId":699928,"relatedId":1259295,"environmentId":2661460,"blockNumber":73,"httpApiId":17810495,"httpApiCaseId":30131124,"httpApiName":"Update an Organizations","httpApiPath":"/v1/organizations/{organization_id}","httpApiMethod":"patch","httpApiCaseName":"[0047] Bad Request","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"606cb127-64a9-577f-8ae4-2d878daceb80","name":"Update an Organizations ([0053] Unexpected Fields)","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"PATCH","baseUrl":"http://127.0.0.1:3000","body":{"mode":"raw","raw":"{\n    \"legalName\": \"New Ledger\",\n    \"invalidField\": \"invalidValue\",\n    \"doingBusinessAs\": \"The ledger.io\",\n    \"status\": {\n        \"code\": \"BLOCKED\",\n        \"description\": \"Teste Blocked\"\n    },\n    \"address\": {\n        \"line1\": \"Avenida Paulista, 1234\",\n        \"line2\": \"CJ 203\",\n        \"zipCode\": \"04696040\",\n        \"city\": \"{{$randomCity}}\",\n        \"state\": \"{{$randomCountryCode}}\",\n        \"country\": \"{{$randomCountryCode}}\"\n    },\n    \"metadata\": {\n        \"chave\": \"metadata_chave_update\",\n        \"bitcoinn\": \"{{$randomBitcoin}}\",\n        \"boolean\": {{$randomBoolean}},\n        \"double\": 10.5,\n        \"int\": 1\n    }\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        const responseData = pm.response.json();","","pm.test(\"Error Code 0053\", function () {","    pm.expect(responseData.code).to.eql(\"0053\");","});","      "]}}],"responseDefinition":{"id":2739918,"createdAt":"2024-10-21T13:52:19.000Z","updatedAt":"2024-10-30T21:12:49.000Z","name":"[0053] Unexpected Fields in the Request","apiDetailId":0,"projectId":699928,"moduleId":760453,"code":400,"contentType":"json","ordering":590,"jsonSchema":{"type":"object","properties":{"code":{"type":"string"},"title":{"type":"string"},"message":{"type":"string"},"fields":{"type":"object","properties":{},"x-apidog-orders":[]}},"required":["code","title","message","fields"],"x-apidog-orders":["code","title","message","fields"]},"defaultEnable":false,"folderId":743415,"responseExamples":[{"id":3970687,"name":"Unexpected Fields in the Request","data":"{\n    \"code\": \"0053\",\n    \"title\": \"Unexpected Fields in the Request\",\n    \"message\": \"The request body contains more fields than expected. Please send only the allowed fields as per the documentation. The unexpected fields are listed in the fields object.\",\n    \"fields\": {\n        \"{{field}}\": \"{{value}}\"\n    }\n}","apiDetailId":0,"responseId":2739918,"ordering":1,"description":null,"oasKey":"","oasExtensions":null}],"mediaType":"","headers":[],"description":"","oasExtensions":null,"schemaDefinitions":{}},"requestDefinition":{"jsonSchema":{"type":"object","properties":{},"x-apidog-orders":["01JMWN5W3CWEEFQYQRKC48N3R5"],"required":[],"x-apidog-refs":{"01JMWN5W3CWEEFQYQRKC48N3R5":{"$ref":"#/definitions/5398340"}}}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"86a53cab-25f7-4cb2-a438-b45c6e9bdf21","id":"606cb127-64a9-577f-8ae4-2d878daceb80","type":"http","name":"Update an Organizations ([0053] Unexpected Fields)","projectId":699928,"relatedId":1259295,"environmentId":2661460,"blockNumber":74,"httpApiId":17810495,"httpApiCaseId":30131136,"httpApiName":"Update an Organizations","httpApiPath":"/v1/organizations/{organization_id}","httpApiMethod":"patch","httpApiCaseName":"[0053] Unexpected Fields","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"9946c208-8ee7-5b91-930a-0eee9de1ab7b","name":"Update an Organizations ([0067] Metadata Nesting)","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"PATCH","baseUrl":"http://127.0.0.1:3000","body":{"mode":"raw","raw":"{\n    \"legalName\": \"New Ledger\",\n    \"doingBusinessAs\": \"The ledger.io\",\n    \"status\": {\n        \"code\": \"BLOCKED\",\n        \"description\": \"Teste Blocked\"\n    },\n    \"address\": {\n        \"line1\": \"Avenida Paulista, 1234\",\n        \"line2\": \"CJ 203\",\n        \"zipCode\": \"04696040\",\n        \"city\": \"{{$randomCity}}\",\n        \"state\": \"{{$randomCountryCode}}\",\n        \"country\": \"{{$randomCountryCode}}\"\n    },\n    \"metadata\": {\n        \"key\": {\n            \"new_key\": \"new_value\"\n        }\n    }\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        const responseData = pm.response.json();","","pm.test(\"Error Code 0067\", function () {","    pm.expect(responseData.code).to.eql(\"0067\");","});","      "]}}],"responseDefinition":{"id":2839092,"createdAt":"2024-12-26T17:50:31.000Z","updatedAt":"2024-12-26T17:51:06.000Z","name":"[0067] Invalid Metadata Nesting","apiDetailId":0,"projectId":699928,"moduleId":760453,"code":400,"contentType":"json","ordering":740,"jsonSchema":{"type":"object","properties":{"code":{"type":"string"},"title":{"type":"string"},"message":{"type":"string"}},"required":["code","title","message"],"x-apidog-orders":["code","title","message"]},"defaultEnable":false,"folderId":743415,"responseExamples":[{"id":3974047,"name":"Invalid Path Parameter","data":"{\n    \"code\": \"0067\",\n    \"title\": \"Invalid Metadata Nesting\",\n    \"message\": \"The metadata object cannot contain nested values. Please ensure that the value {{value}} is not nested and try again.\"\n}","apiDetailId":0,"responseId":2839092,"ordering":1,"description":null,"oasKey":"","oasExtensions":null}],"mediaType":"","headers":[],"description":"","oasExtensions":null,"schemaDefinitions":{}},"requestDefinition":{"jsonSchema":{"type":"object","properties":{},"x-apidog-orders":["01JMWN5W3CWEEFQYQRKC48N3R5"],"required":[],"x-apidog-refs":{"01JMWN5W3CWEEFQYQRKC48N3R5":{"$ref":"#/definitions/5398340"}}}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"1d0d376c-0a3f-4820-96c7-949dec1f016a","id":"9946c208-8ee7-5b91-930a-0eee9de1ab7b","type":"http","name":"Update an Organizations ([0067] Metadata Nesting)","projectId":699928,"relatedId":1259295,"environmentId":2661460,"blockNumber":75,"httpApiId":17810495,"httpApiCaseId":30131143,"httpApiName":"Update an Organizations","httpApiPath":"/v1/organizations/{organization_id}","httpApiMethod":"patch","httpApiCaseName":"[0067] Metadata Nesting","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"28973dde-6439-5d01-93ce-1f646c99f01c","type":"group","metaInfo":{"id":"28973dde-6439-5d01-93ce-1f646c99f01c","type":"group","scopeType":"end","scopeStartId":"5053ae29-f668-58c3-a05a-99366b38e537"}},{"id":"0e988b73-4752-59b3-9c03-5c755383f235","type":"group","metaInfo":{"id":"0e988b73-4752-59b3-9c03-5c755383f235","type":"group","scopeType":"start","scopeEndId":"73cb05df-e631-5efd-bbdb-3a8d1c84568b","name":"Organization - Delete"}},{"id":"a0627588-9d16-58e3-b658-5adcabf0f289","name":"Delete an Organization ([0007] Entity Not Found)","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{$string.uuid}}"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{$string.uuid}}","key":"organization_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"DELETE","baseUrl":"http://127.0.0.1:3000","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        const responseData = pm.response.json();","","pm.test(\"Error Code 0007\", function () {","    pm.expect(responseData.code).to.eql(\"0007\");","});","      "]}}],"responseDefinition":{"id":2739824,"createdAt":"2024-10-21T13:23:57.000Z","updatedAt":"2025-09-18T19:31:13.000Z","name":"[0007] Entity Not Found","apiDetailId":0,"projectId":699928,"moduleId":760453,"code":404,"contentType":"json","ordering":130,"jsonSchema":{"type":"object","properties":{"code":{"type":"string"},"title":{"type":"string"},"message":{"type":"string"}},"required":["code","title","message"],"x-apidog-orders":["code","title","message"]},"defaultEnable":false,"folderId":743415,"responseExamples":[{"id":3970641,"createdAt":"2024-10-21T13:24:18.000Z","updatedAt":"2024-10-21T13:24:18.000Z","deletedAt":null,"apiDetailId":0,"name":"Entity Not Found","responseId":2739824,"data":"{\n    \"code\": \"0007\",\n    \"title\": \"Entity Not Found\",\n    \"message\": \"No entity was found for the given ID. Please make sure to use the correct ID for the entity you are trying to manage.\"\n}","description":null,"oasKey":"","oasExtensions":null,"ordering":1}],"mediaType":"","headers":[],"description":"","oasExtensions":null,"schemaDefinitions":{}},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"81bf870e-e1d4-409f-86c3-52da18c84cd7","id":"a0627588-9d16-58e3-b658-5adcabf0f289","type":"http","name":"Delete an Organization ([0007] Entity Not Found)","projectId":699928,"relatedId":1259295,"environmentId":2661460,"blockNumber":76,"httpApiId":17810496,"httpApiCaseId":30131151,"httpApiName":"Delete an Organization","httpApiPath":"/v1/organizations/{organization_id}","httpApiMethod":"delete","httpApiCaseName":"[0007] Entity Not Found","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"1cd67093-33f7-5cef-a413-ec0278af7076","name":"Delete an Organization ([0065] Invalid Path Param)","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","invalid"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"invalid","key":"organization_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"DELETE","baseUrl":"http://127.0.0.1:3000","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        const responseData = pm.response.json();","","pm.test(\"Error Code 0065\", function () {","    pm.expect(responseData.code).to.eql(\"0065\");","});","      "]}}],"responseDefinition":{"id":2739946,"createdAt":"2024-10-21T13:59:15.000Z","updatedAt":"2024-10-30T21:13:05.000Z","name":"[0065] Invalid Path Parameter","apiDetailId":0,"projectId":699928,"moduleId":760453,"code":400,"contentType":"json","ordering":710,"jsonSchema":{"type":"object","properties":{"code":{"type":"string"},"title":{"type":"string"},"message":{"type":"string"}},"required":["code","title","message"],"x-apidog-orders":["code","title","message"]},"defaultEnable":false,"folderId":743415,"responseExamples":[{"id":3970699,"createdAt":"2024-10-21T13:59:36.000Z","updatedAt":"2024-10-21T13:59:36.000Z","deletedAt":null,"apiDetailId":0,"name":"Invalid Path Parameter","responseId":2739946,"data":"{\n    \"code\": \"0065\",\n    \"title\": \"Invalid Path Parameter\",\n    \"message\": \"The provided path parameter {{parameter_name}} is not in the expected format. Please ensure the parameter adheres to the required format and try again.\"\n}","description":null,"oasKey":"","oasExtensions":null,"ordering":1}],"mediaType":"","headers":[],"description":"","oasExtensions":null,"schemaDefinitions":{}},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"cdb4dd46-b9a8-4696-b0f0-5f39f7c84c90","id":"1cd67093-33f7-5cef-a413-ec0278af7076","type":"http","name":"Delete an Organization ([0065] Invalid Path Param)","projectId":699928,"relatedId":1259295,"environmentId":2661460,"blockNumber":77,"httpApiId":17810496,"httpApiCaseId":30131400,"httpApiName":"Delete an Organization","httpApiPath":"/v1/organizations/{organization_id}","httpApiMethod":"delete","httpApiCaseName":"[0065] Invalid Path Param","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"1d0b84a6-cb87-56eb-9140-e78977b677a4","name":"Delete an Organization ([Success] Delete)","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"DELETE","baseUrl":"http://127.0.0.1:3000","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[],"responseDefinition":{"id":24931413,"name":"No Content","code":204,"contentType":"raw","jsonSchema":{"type":"object","properties":{},"x-apidog-orders":[]},"description":"","mediaType":"","headers":[],"oasExtensions":""},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"fa06ddcd-5936-4f8b-8902-5d3c06de6385","id":"1d0b84a6-cb87-56eb-9140-e78977b677a4","type":"http","name":"Delete an Organization ([Success] Delete)","projectId":699928,"relatedId":1259295,"environmentId":2661460,"blockNumber":78,"httpApiId":17810496,"httpApiCaseId":30131401,"httpApiName":"Delete an Organization","httpApiPath":"/v1/organizations/{organization_id}","httpApiMethod":"delete","httpApiCaseName":"[Success] Delete","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"73cb05df-e631-5efd-bbdb-3a8d1c84568b","type":"group","metaInfo":{"id":"73cb05df-e631-5efd-bbdb-3a8d1c84568b","type":"group","scopeType":"end","scopeStartId":"0e988b73-4752-59b3-9c03-5c755383f235"}},{"id":"44a76f43-9ea7-55ea-ab48-a25596003b23","type":"group","metaInfo":{"id":"44a76f43-9ea7-55ea-ab48-a25596003b23","type":"group","scopeType":"start","scopeEndId":"5d5ba466-b0b0-5c97-88b4-0f5db8204932","name":"Setup Organization"}},{"id":"1f0684be-6e60-5be7-b75b-fdd73125f828","name":"Create an Organization ([Success] Create)","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations"],"host":["127","0","0","1"],"query":[],"variable":[]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","baseUrl":"http://127.0.0.1:3000","body":{"mode":"raw","raw":"{\n    \"legalName\": \"Release Test Legal Name\",\n    \"doingBusinessAs\": \"Release Test Doing Business As\",\n    \"legalDocument\": \"0000000000000\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"New Test Organization\"\n    },\n    \"address\": {\n        \"line1\": \"Release Test Avenue\",\n        \"line2\": \"123\",\n        \"zipCode\": \"10000123\",\n        \"city\": \"SÃ£o Paulo\",\n        \"state\": \"SP\",\n        \"country\": \"BR\"\n    },\n    \"metadata\": {\n        \"key_string\": \"string_value\",\n        \"key_int\": 1,\n        \"key_boolean\": true\n    }\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`organization_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable organization_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}},{"listen":"test","script":{"id":"postProcessors.1.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        const responseData = pm.response.json();","","pm.test(\"Validate Metadata\", function () {","    pm.expect(Object.keys(responseData.metadata).length).to.eql(3);","});","","pm.test(\"Validate Parent Organization\", function () {","    pm.expect(responseData.parentOrganizationId).to.eql(null);","});","      "]}}],"responseDefinition":{"id":24931409,"name":"Created","code":201,"contentType":"json","jsonSchema":{"type":"object","properties":{},"x-apidog-orders":["01JMJCZ9CA6V51X3YXCBQGC4FJ"],"required":[],"x-apidog-refs":{"01JMJCZ9CA6V51X3YXCBQGC4FJ":{"$ref":"#/definitions/5299823"}}},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"3670550":{"type":"object","properties":{"legalName":{"type":"string","description":"The legal name of the Organization. Max length: 256","x-apidog-mock":"{{$company.name}}","maxLength":256},"parentOrganizationId":{"type":["string","null"],"description":"The unique identifier of the parent Organization.","x-apidog-mock":"{{$string.uuid}}","format":"uuid"},"doingBusinessAs":{"type":["string","null"],"x-apidog-mock":"{{$company.name}}","maxLength":256,"description":"The trade name of the Organization. Max length: 256"},"legalDocument":{"type":"string","description":"The document of the Organization. Max length: 256","x-apidog-mock":"{{$string.numeric(min=14,max=14)}}","maxLength":256},"address":{"type":"object","properties":{"line1":{"type":"string","x-apidog-mock":"{{$location.streetAddress}}","description":"The first line of the address. Usually used to inform the name of the street and the number of the building"},"line2":{"type":"string","x-apidog-mock":"{{$location.secondaryAddress}}","description":"The second line of the address. Usually used to inform about any complements such as the number of the apartment."},"zipCode":{"type":"string","x-apidog-mock":"{{$location.zipCode}}","description":"The postal code."},"city":{"type":"string","x-apidog-mock":"{{$location.city}}","description":"The name of the city where the Organization is established."},"state":{"type":"string","x-apidog-mock":"{{$location.state}}","description":"The two-letter abbreviation that represents the State where the Organization is."},"country":{"description":"The two-letter code (ISO 3166-1 alpha2) that represents the country where the Organization is.","type":"string","x-apidog-mock":"{{$location.countryCode}}"}},"required":["line1","line2","zipCode","city","state","country"],"x-apidog-orders":["line1","line2","zipCode","city","state","country"],"description":"An object containing information about the address of the Organization."}},"required":["legalName","legalDocument"],"x-apidog-orders":["legalName","parentOrganizationId","doingBusinessAs","legalDocument","01JMJCWQRYRQYHWPFNAXCR6EWK","address","01JMJCQ30S11CPHT86CSTND4PF"],"x-apidog-refs":{"01JMJCQ30S11CPHT86CSTND4PF":{"$ref":"#/definitions/5295307"},"01JMJCWQRYRQYHWPFNAXCR6EWK":{"$ref":"#/definitions/5295306"}},"title":"organization.request.v3.x.x","name":"organization.request.v3.x.x","moduleId":760453},"5295306":{"type":"object","properties":{"status":{"type":"object","properties":{"description":{"type":["string","null"],"description":"The description of the status. Max length: 256"},"code":{"type":"string","description":"The name of the status. Max length:100"}},"x-apidog-orders":["description","code"],"description":"An object containing information about the status."}},"x-apidog-orders":["status"],"title":"status","name":"status","moduleId":760453},"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299823":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique reference of the Organization."}},"x-apidog-orders":["id","01JMCYXQ79XF1Z2H2FCZFK6T1J","01JMCZEPGEYNEKH7NZZHJHM7TJ"],"x-apidog-refs":{"01JMCYXQ79XF1Z2H2FCZFK6T1J":{"$ref":"#/definitions/3670550"},"01JMCZEPGEYNEKH7NZZHJHM7TJ":{"$ref":"#/definitions/5299902"}},"title":"organization.response.v3.x.x","name":"organization.response.v3.x.x","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453}}},"requestDefinition":{"jsonSchema":{"type":"object","properties":{},"x-apidog-orders":["01JG1HSP0RG46V2G2ZRZ93RW40"],"required":[],"x-apidog-refs":{"01JG1HSP0RG46V2G2ZRZ93RW40":{"$ref":"#/definitions/3670550"}}}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"2d80d854-e0d4-4ca1-b209-8c0cdb0eceb9","id":"1f0684be-6e60-5be7-b75b-fdd73125f828","type":"http","name":"Create an Organization ([Success] Create)","projectId":699928,"relatedId":1259296,"environmentId":2661460,"blockNumber":59,"httpApiId":17810492,"httpApiCaseId":30129761,"httpApiName":"Create an Organization","httpApiPath":"/v1/organizations","httpApiMethod":"post","httpApiCaseName":"[Success] Create","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"5d5ba466-b0b0-5c97-88b4-0f5db8204932","type":"group","metaInfo":{"id":"5d5ba466-b0b0-5c97-88b4-0f5db8204932","type":"group","scopeType":"end","scopeStartId":"44a76f43-9ea7-55ea-ab48-a25596003b23"}},{"id":"07a5f061-808b-5c83-af14-c97a5b3d7987","type":"group","metaInfo":{"id":"07a5f061-808b-5c83-af14-c97a5b3d7987","type":"group","scopeType":"start","scopeEndId":"eb9042ed-8113-507a-98a4-29a6f9f2ec46","name":"Ledger - Create"}},{"id":"17b6ae8d-a95f-5714-8a93-3448c87ca796","name":"[Success] Create a Ledger","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","body":{"mode":"raw","raw":"{\n    \"name\": \"Regression Ledger\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"New Ledger\"\n    },\n    \"metadata\": {\n        \"key\": \"value\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`ledger_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable ledger_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"key":{"type":"string"}},"required":["key"]}},"required":["name","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"f2ccdd44-e0f5-4383-bf3d-8066a653a86b","id":"17b6ae8d-a95f-5714-8a93-3448c87ca796","type":"customHttp","name":"[Success] Create a Ledger","projectId":699928,"relatedId":1259296,"environmentId":2661460,"blockNumber":34,"httpApiId":546192,"httpApiCaseId":546192,"httpApiName":"[Success] Create a Ledger","httpApiPath":"/v1/organizations/{organization_id}/ledgers","httpApiMethod":"post","httpApiCaseName":"[Success] Create a Ledger"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"cac79a35-cdf3-552c-86b9-1d100be7c882","name":"[0002] Ledger Name Conflict","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","body":{"mode":"raw","raw":"{\n    \"name\": \"Regression Ledger\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"New Ledger\"\n    },\n    \"metadata\": {\n        \"key\": \"value\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0002`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0002`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"key":{"type":"string"}},"required":["key"]}},"required":["name","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"c3abfa31-cef3-4a1f-94e3-b9a33ce36b7a","id":"cac79a35-cdf3-552c-86b9-1d100be7c882","type":"customHttp","name":"[0002] Ledger Name Conflict","projectId":699928,"relatedId":1259296,"environmentId":2661460,"blockNumber":35,"httpApiId":546193,"httpApiCaseId":546193,"httpApiName":"[0002] Ledger Name Conflict","httpApiPath":"/v1/organizations/{organization_id}/ledgers","httpApiMethod":"post","httpApiCaseName":"[0002] Ledger Name Conflict"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"583f75b2-e473-503f-a6e1-35cec022f820","name":"[0009] Missing Fields","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","body":{"mode":"raw","raw":"{\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"New Ledger\"\n    },\n    \"metadata\": {\n        \"key\": \"value\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0009`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0009`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"key":{"type":"string"}},"required":["key"]}},"required":["status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"a147d210-b613-4d84-8da2-5be088f50312","id":"583f75b2-e473-503f-a6e1-35cec022f820","type":"customHttp","name":"[0009] Missing Fields","projectId":699928,"relatedId":1259296,"environmentId":2661460,"blockNumber":36,"httpApiId":546194,"httpApiCaseId":546194,"httpApiName":"[0009] Missing Fields","httpApiPath":"/v1/organizations/{organization_id}/ledgers","httpApiMethod":"post","httpApiCaseName":"[0009] Missing Fields"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"999c9fbb-67f4-5d3e-a3af-4773606b9141","name":"[0038] Organization Not Found","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{$string.uuid}}","ledgers"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{$string.uuid}}","key":"organization_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","body":{"mode":"raw","raw":"{\n    \"name\": \"New Ledger\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"New Ledger\"\n    },\n    \"metadata\": {\n        \"key\": \"value\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0038`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0038`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"key":{"type":"string"}},"required":["key"]}},"required":["name","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"b9799a04-debd-4849-b180-5f961edb6be9","id":"999c9fbb-67f4-5d3e-a3af-4773606b9141","type":"customHttp","name":"[0038] Organization Not Found","projectId":699928,"relatedId":1259296,"environmentId":2661460,"blockNumber":37,"httpApiId":546195,"httpApiCaseId":546195,"httpApiName":"[0038] Organization Not Found","httpApiPath":"/v1/organizations/{organization_id}/ledgers","httpApiMethod":"post","httpApiCaseName":"[0038] Organization Not Found"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"1fff7189-a580-5330-9f2b-69f9385146bf","name":"[0047] Bad Request","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","body":{"mode":"raw","raw":"{\n    \"name\": \"{{$string.alphanumeric(min=300,max=300)}}\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"New Ledger\"\n    },\n    \"metadata\": {\n        \"key\": \"value\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0047`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0047`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"key":{"type":"string"}},"required":["key"]}},"required":["name","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"bb542a62-2733-4bc9-9f0b-8bc828705098","id":"1fff7189-a580-5330-9f2b-69f9385146bf","type":"customHttp","name":"[0047] Bad Request","projectId":699928,"relatedId":1259296,"environmentId":2661460,"blockNumber":38,"httpApiId":546196,"httpApiCaseId":546196,"httpApiName":"[0047] Bad Request","httpApiPath":"/v1/organizations/{organization_id}/ledgers","httpApiMethod":"post","httpApiCaseName":"[0047] Bad Request"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"7ca27360-b72b-5700-ae5a-aff9cc35662e","name":"[0053] Unexpected Fields","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","body":{"mode":"raw","raw":"{\n    \"name\": \"New Ledger\",\n    \"invalidField\": \"invalidData\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"New Ledger\"\n    },\n    \"metadata\": {\n        \"key\": \"value\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0053`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0053`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"invalidField":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"key":{"type":"string"}},"required":["key"]}},"required":["name","invalidField","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"f75a8ba1-7cba-4dee-91ab-01cd8e4121ab","id":"7ca27360-b72b-5700-ae5a-aff9cc35662e","type":"customHttp","name":"[0053] Unexpected Fields","projectId":699928,"relatedId":1259296,"environmentId":2661460,"blockNumber":39,"httpApiId":546197,"httpApiCaseId":546197,"httpApiName":"[0053] Unexpected Fields","httpApiPath":"/v1/organizations/{organization_id}/ledgers","httpApiMethod":"post","httpApiCaseName":"[0053] Unexpected Fields"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"937fe356-06ec-560f-a7e6-42923548b45e","name":"[0067] Metadata Nesting","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","body":{"mode":"raw","raw":"{\n    \"name\": \"New Ledger\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"New Ledger\"\n    },\n    \"metadata\": {\n        \"key\": {\n            \"new_key\": \"new_value\"\n        }\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0067`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0067`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"key":{"type":"object","properties":{"new_key":{"type":"string"}},"required":["new_key"]}},"required":["key"]}},"required":["name","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"e686f320-e996-409a-9e99-2313245b805a","id":"937fe356-06ec-560f-a7e6-42923548b45e","type":"customHttp","name":"[0067] Metadata Nesting","projectId":699928,"relatedId":1259296,"environmentId":2661460,"blockNumber":40,"httpApiId":546198,"httpApiCaseId":546198,"httpApiName":"[0067] Metadata Nesting","httpApiPath":"/v1/organizations/{organization_id}/ledgers","httpApiMethod":"post","httpApiCaseName":"[0067] Metadata Nesting"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"eb9042ed-8113-507a-98a4-29a6f9f2ec46","type":"group","metaInfo":{"id":"eb9042ed-8113-507a-98a4-29a6f9f2ec46","type":"group","scopeType":"end","scopeStartId":"07a5f061-808b-5c83-af14-c97a5b3d7987"}},{"id":"ab0796a3-bab3-5d52-82d2-7d51bd70a7e8","type":"group","metaInfo":{"id":"ab0796a3-bab3-5d52-82d2-7d51bd70a7e8","type":"group","scopeType":"start","scopeEndId":"3d770966-09cd-590b-afc7-5d8bfbed77f2","name":"Ledger - List"}},{"id":"5de8e7e6-122b-5c7b-8f13-aeed27cad202","name":"[Success] List Ledgers","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.1.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        pm.test(\"Validate Response Data Length \", function () {","  var jsonData = pm.response.json();","  pm.expect(jsonData.items.length).to.be.above(0);","});","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"925dee85-48cf-4b37-b8a4-42420bfdf40a","id":"5de8e7e6-122b-5c7b-8f13-aeed27cad202","type":"customHttp","name":"[Success] List Ledgers","projectId":699928,"relatedId":1259296,"environmentId":2661460,"blockNumber":41,"httpApiId":546199,"httpApiCaseId":546199,"httpApiName":"[Success] List Ledgers","httpApiPath":"/v1/organizations/{organization_id}/ledgers","httpApiMethod":"get","httpApiCaseName":"[Success] List Ledgers"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"3a16c9f9-12e4-51ce-9e22-70d1a7cad2ad","name":"[0065] Invalid Path","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","1234","ledgers"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"1234","key":"organization_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.1.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0065`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0065`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"82e75c2c-cba9-45dc-93bc-bae7da60c167","id":"3a16c9f9-12e4-51ce-9e22-70d1a7cad2ad","type":"customHttp","name":"[0065] Invalid Path","projectId":699928,"relatedId":1259296,"environmentId":2661460,"blockNumber":42,"httpApiId":546200,"httpApiCaseId":546200,"httpApiName":"[0065] Invalid Path","httpApiPath":"/v1/organizations/{organization_id}/ledgers","httpApiMethod":"get","httpApiCaseName":"[0065] Invalid Path"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"26fde3ca-0a14-5c9a-884a-cc07dd56cee3","name":"[0080] Pagination Limit","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers"],"host":["127","0","0","1"],"query":[{"key":"limit","value":"1000"}],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.1.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0080`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0080`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"89b6f3a3-344f-4667-ad7b-c8aab3c8762a","id":"26fde3ca-0a14-5c9a-884a-cc07dd56cee3","type":"customHttp","name":"[0080] Pagination Limit","projectId":699928,"relatedId":1259296,"environmentId":2661460,"blockNumber":44,"httpApiId":546202,"httpApiCaseId":546202,"httpApiName":"[0080] Pagination Limit","httpApiPath":"/v1/organizations/{organization_id}/ledgers?limit=1000","httpApiMethod":"get","httpApiCaseName":"[0080] Pagination Limit"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"8659ce93-6183-5c0d-a1aa-e01df4486b16","name":"[0081] Invalid Sort Order","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers"],"host":["127","0","0","1"],"query":[{"key":"sort_order","value":"capybara"}],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.1.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0081`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0081`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"e40f7971-11f2-425d-9079-f1ad2b2b9ec2","id":"8659ce93-6183-5c0d-a1aa-e01df4486b16","type":"customHttp","name":"[0081] Invalid Sort Order","projectId":699928,"relatedId":1259296,"environmentId":2661460,"blockNumber":45,"httpApiId":546203,"httpApiCaseId":546203,"httpApiName":"[0081] Invalid Sort Order","httpApiPath":"/v1/organizations/{organization_id}/ledgers?sort_order=capybara","httpApiMethod":"get","httpApiCaseName":"[0081] Invalid Sort Order"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"7ffbbb43-1148-55bd-84f2-293983a91b86","name":"[0083] Invalid Data Range","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers"],"host":["127","0","0","1"],"query":[{"key":"start_date","value":"2021-01-01"}],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.1.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0083`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0083`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"2ef0acd3-3ade-4378-82bc-974fa30bd144","id":"7ffbbb43-1148-55bd-84f2-293983a91b86","type":"customHttp","name":"[0083] Invalid Data Range","projectId":699928,"relatedId":1259296,"environmentId":2661460,"blockNumber":46,"httpApiId":546204,"httpApiCaseId":546204,"httpApiName":"[0083] Invalid Data Range","httpApiPath":"/v1/organizations/{organization_id}/ledgers?start_date=2021-01-01","httpApiMethod":"get","httpApiCaseName":"[0083] Invalid Data Range"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"3d770966-09cd-590b-afc7-5d8bfbed77f2","type":"group","metaInfo":{"id":"3d770966-09cd-590b-afc7-5d8bfbed77f2","type":"group","scopeType":"end","scopeStartId":"ab0796a3-bab3-5d52-82d2-7d51bd70a7e8"}},{"id":"c3fbb74e-d50f-54a7-aba6-2157b0d975a0","type":"group","metaInfo":{"id":"c3fbb74e-d50f-54a7-aba6-2157b0d975a0","type":"group","scopeType":"start","scopeEndId":"c602061a-4f05-5a7a-a163-28ef72936144","name":"Ledger - Retrieve"}},{"id":"166ed7d8-3dd5-5915-b19d-5d903d54492c","name":"[Success] Retrieve a Ledger","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"7884c9e4-ebe0-486c-8780-b569e550fa47","id":"166ed7d8-3dd5-5915-b19d-5d903d54492c","type":"customHttp","name":"[Success] Retrieve a Ledger","projectId":699928,"relatedId":1259296,"environmentId":2661460,"blockNumber":47,"httpApiId":546205,"httpApiCaseId":546205,"httpApiName":"[Success] Retrieve a Ledger","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}","httpApiMethod":"get","httpApiCaseName":"[Success] Retrieve a Ledger"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"abaa3a0e-5fed-5cd9-805a-a26941896c1e","name":"[0007] Entity Not Found","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{$string.uuid}}","ledgers","{{ledger_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{$string.uuid}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.1.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0007`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0007`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"89f984be-efcd-49cd-b1b0-368492b58fe2","id":"abaa3a0e-5fed-5cd9-805a-a26941896c1e","type":"customHttp","name":"[0007] Entity Not Found","projectId":699928,"relatedId":1259296,"environmentId":2661460,"blockNumber":48,"httpApiId":546206,"httpApiCaseId":546206,"httpApiName":"[0007] Entity Not Found","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}","httpApiMethod":"get","httpApiCaseName":"[0007] Entity Not Found"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"a55a0e4c-e77a-51a4-a719-83c608a77dcc","name":"[0065] Invalid Path","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","1234","ledgers","{{ledger_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"1234","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.1.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0065`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0065`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"8ce5c4d7-629b-47e6-8bfc-d89c233a5c92","id":"a55a0e4c-e77a-51a4-a719-83c608a77dcc","type":"customHttp","name":"[0065] Invalid Path","projectId":699928,"relatedId":1259296,"environmentId":2661460,"blockNumber":49,"httpApiId":546207,"httpApiCaseId":546207,"httpApiName":"[0065] Invalid Path","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}","httpApiMethod":"get","httpApiCaseName":"[0065] Invalid Path"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"c602061a-4f05-5a7a-a163-28ef72936144","type":"group","metaInfo":{"id":"c602061a-4f05-5a7a-a163-28ef72936144","type":"group","scopeType":"end","scopeStartId":"c3fbb74e-d50f-54a7-aba6-2157b0d975a0"}},{"id":"df4167a7-901d-5212-81c6-f2b95817c40e","type":"group","metaInfo":{"id":"df4167a7-901d-5212-81c6-f2b95817c40e","type":"group","scopeType":"start","scopeEndId":"a9bfd30b-9934-5798-be88-9a7e2a59da24","name":"Ledger - Update"}},{"id":"9ded8ed7-cc5d-5c34-af17-28e8dfa1df38","name":"[Success] Update a Ledger","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"PATCH","body":{"mode":"raw","raw":"{\n    \"name\": \"Ledger Regression New Name\",\n    \"status\": {\n        \"code\": \"Active\",\n        \"description\": \"Ledger\"\n    },\n    \"metadata\": {\n        \"chave\": \"metadata_chave\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"chave":{"type":"string"}},"required":["chave"]}},"required":["name","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"397fd108-7fb3-44e7-845a-2cfc86ff1592","id":"9ded8ed7-cc5d-5c34-af17-28e8dfa1df38","type":"customHttp","name":"[Success] Update a Ledger","projectId":699928,"relatedId":1259296,"environmentId":2661460,"blockNumber":50,"httpApiId":546208,"httpApiCaseId":546208,"httpApiName":"[Success] Update a Ledger","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}","httpApiMethod":"patch","httpApiCaseName":"[Success] Update a Ledger"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"197a7873-0491-5246-ad5d-2155a2307065","name":"[0047] Bad Request","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"PATCH","body":{"mode":"raw","raw":"{\n    \"name\": \"{{$string.alphanumeric(min=300,max=300)}}\",\n    \"status\": {\n        \"code\": \"Active\",\n        \"description\": \"Ledger\"\n    },\n    \"metadata\": {\n        \"chave\": \"metadata_chave\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.1.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0047`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0047`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"chave":{"type":"string"}},"required":["chave"]}},"required":["name","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"4a80945a-8d0d-4f81-973f-73757dc3d6a6","id":"197a7873-0491-5246-ad5d-2155a2307065","type":"customHttp","name":"[0047] Bad Request","projectId":699928,"relatedId":1259296,"environmentId":2661460,"blockNumber":51,"httpApiId":546209,"httpApiCaseId":546209,"httpApiName":"[0047] Bad Request","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}","httpApiMethod":"patch","httpApiCaseName":"[0047] Bad Request"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"d685a038-6a0b-5bbd-8ad5-d695d562d761","name":"[0065] Invalid Patch","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","1234","ledgers","{{ledger_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"1234","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"PATCH","body":{"mode":"raw","raw":"{\n    \"name\": \"Ledger Regression New Name\",\n    \"status\": {\n        \"code\": \"Active\",\n        \"description\": \"Ledger\"\n    },\n    \"metadata\": {\n        \"chave\": \"metadata_chave\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.1.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0065`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0065`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"chave":{"type":"string"}},"required":["chave"]}},"required":["name","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"93277c99-75e0-4c12-80d8-da69ffd06110","id":"d685a038-6a0b-5bbd-8ad5-d695d562d761","type":"customHttp","name":"[0065] Invalid Patch","projectId":699928,"relatedId":1259296,"environmentId":2661460,"blockNumber":52,"httpApiId":546210,"httpApiCaseId":546210,"httpApiName":"[0065] Invalid Patch","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}","httpApiMethod":"patch","httpApiCaseName":"[0065] Invalid Patch"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"ceee4e8b-0bcb-5fa2-b257-295dccc3e8f6","name":"[0007] Entity Not Found","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{$string.uuid}}","ledgers","{{ledger_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{$string.uuid}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"PATCH","body":{"mode":"raw","raw":"{\n    \"name\": \"Ledger Regression New Name\",\n    \"status\": {\n        \"code\": \"Active\",\n        \"description\": \"Ledger\"\n    },\n    \"metadata\": {\n        \"chave\": \"metadata_chave\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.1.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0007`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0007`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"chave":{"type":"string"}},"required":["chave"]}},"required":["name","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"0618a746-b231-4f52-8331-e2a318fd8a54","id":"ceee4e8b-0bcb-5fa2-b257-295dccc3e8f6","type":"customHttp","name":"[0007] Entity Not Found","projectId":699928,"relatedId":1259296,"environmentId":2661460,"blockNumber":53,"httpApiId":546211,"httpApiCaseId":546211,"httpApiName":"[0007] Entity Not Found","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}","httpApiMethod":"patch","httpApiCaseName":"[0007] Entity Not Found"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"fca853e2-7487-5c5e-9576-142e82297694","name":"[0053] Unexpected Fields","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"PATCH","body":{"mode":"raw","raw":"{\n    \"name\": \"Ledger Regression New Name\",\n    \"invalidField\": \"invalidData\",\n    \"status\": {\n        \"code\": \"Active\",\n        \"description\": \"Ledger\"\n    },\n    \"metadata\": {\n        \"chave\": \"metadata_chave\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.1.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0053`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0053`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"invalidField":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"chave":{"type":"string"}},"required":["chave"]}},"required":["name","invalidField","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"f051015c-717c-4724-9f3e-2f45994758bc","id":"fca853e2-7487-5c5e-9576-142e82297694","type":"customHttp","name":"[0053] Unexpected Fields","projectId":699928,"relatedId":1259296,"environmentId":2661460,"blockNumber":54,"httpApiId":546212,"httpApiCaseId":546212,"httpApiName":"[0053] Unexpected Fields","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}","httpApiMethod":"patch","httpApiCaseName":"[0053] Unexpected Fields"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"c283bdff-1d8d-58ac-8678-026232aa78ee","name":"[0067] Metadata Nesting","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"PATCH","body":{"mode":"raw","raw":"{\n    \"name\": \"Ledger Regression New Name\",\n    \"status\": {\n        \"code\": \"Active\",\n        \"description\": \"Ledger\"\n    },\n    \"metadata\": {\n        \"key\": {\n            \"new_key\": \"new_value\"\n        }\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.1.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0067`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0067`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"key":{"type":"object","properties":{"new_key":{"type":"string"}},"required":["new_key"]}},"required":["key"]}},"required":["name","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"2e7d2c8f-3a21-4092-973a-68c920af3019","id":"c283bdff-1d8d-58ac-8678-026232aa78ee","type":"customHttp","name":"[0067] Metadata Nesting","projectId":699928,"relatedId":1259296,"environmentId":2661460,"blockNumber":55,"httpApiId":546213,"httpApiCaseId":546213,"httpApiName":"[0067] Metadata Nesting","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}","httpApiMethod":"patch","httpApiCaseName":"[0067] Metadata Nesting"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"a9bfd30b-9934-5798-be88-9a7e2a59da24","type":"group","metaInfo":{"id":"a9bfd30b-9934-5798-be88-9a7e2a59da24","type":"group","scopeType":"end","scopeStartId":"df4167a7-901d-5212-81c6-f2b95817c40e"}},{"id":"d6e0f4f7-e92a-5887-b48a-8575dc460aa4","type":"group","metaInfo":{"id":"d6e0f4f7-e92a-5887-b48a-8575dc460aa4","type":"group","scopeType":"start","scopeEndId":"04d02282-2c8d-5c3d-bbf1-b314218e2009","name":"Ledger - Delete"}},{"id":"be951896-8d2a-5e8b-9f0a-4979c6b1c412","name":"[0007] Entity Not Found","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{$string.uuid}}","ledgers","{{$string.uuid}}"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{$string.uuid}}","key":"organization_id"},{"type":"any","value":"{{$string.uuid}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"DELETE","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.1.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Erro code is 0007`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0007`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"2a252e3e-ce37-480d-9ab9-7fcc546b5870","id":"be951896-8d2a-5e8b-9f0a-4979c6b1c412","type":"customHttp","name":"[0007] Entity Not Found","projectId":699928,"relatedId":1259296,"environmentId":2661460,"blockNumber":56,"httpApiId":546214,"httpApiCaseId":546214,"httpApiName":"[0007] Entity Not Found","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}","httpApiMethod":"delete","httpApiCaseName":"[0007] Entity Not Found"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"9b8bf4fc-692c-5902-997f-71748056ecb0","name":"[0065] Invalid Path","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","1234","ledgers","{{$string.uuid}}"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"1234","key":"organization_id"},{"type":"any","value":"{{$string.uuid}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"DELETE","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.1.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0065`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0065`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"4d9688cf-71bc-4d8b-ab10-809997a6bcce","id":"9b8bf4fc-692c-5902-997f-71748056ecb0","type":"customHttp","name":"[0065] Invalid Path","projectId":699928,"relatedId":1259296,"environmentId":2661460,"blockNumber":57,"httpApiId":546215,"httpApiCaseId":546215,"httpApiName":"[0065] Invalid Path","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}","httpApiMethod":"delete","httpApiCaseName":"[0065] Invalid Path"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"d8c950b5-1ea6-5763-aee3-4ad72d164910","name":"Delete a Ledger","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"DELETE","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"f4a745c0-62b8-44bf-b7c5-feafcbb3545c","id":"d8c950b5-1ea6-5763-aee3-4ad72d164910","type":"customHttp","name":"Delete a Ledger","projectId":699928,"relatedId":1259296,"environmentId":2661460,"blockNumber":58,"httpApiId":546216,"httpApiCaseId":546216,"httpApiName":"Delete a Ledger","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}","httpApiMethod":"delete","httpApiCaseName":"Delete a Ledger"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"04d02282-2c8d-5c3d-bbf1-b314218e2009","type":"group","metaInfo":{"id":"04d02282-2c8d-5c3d-bbf1-b314218e2009","type":"group","scopeType":"end","scopeStartId":"d6e0f4f7-e92a-5887-b48a-8575dc460aa4"}},{"id":"fde305f2-9331-5db2-86f6-ac2bc2763fb3","type":"group","metaInfo":{"id":"fde305f2-9331-5db2-86f6-ac2bc2763fb3","type":"group","scopeType":"start","scopeEndId":"693e9a1c-863b-5e55-bd27-ac318aff1ad9","name":"Setup"}},{"id":"794cee33-35fc-5288-b9bb-520bdb71d6ac","name":"Create an Organization","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations"],"host":["127","0","0","1"],"query":[],"variable":[]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","body":{"mode":"raw","raw":"{\n    \"legalName\": \"Org Asset Regression Test\",\n    \"doingBusinessAs\": \"Org Asset Regression Test\",\n    \"legalDocument\": \"123456789\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"acies stillicidium angustus vulgaris contego\"\n    },\n    \"address\": {\n        \"line1\": \"138 West Street\",\n        \"line2\": \"Apt. 458\",\n        \"zipCode\": \"97446-2761\",\n        \"city\": \"Sandyview\",\n        \"state\": \"Massachusetts\",\n        \"country\": \"BI\"\n    },\n    \"metadata\": {}\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`organization_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable organization_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"legalName":{"type":"string"},"doingBusinessAs":{"type":"string"},"legalDocument":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"address":{"type":"object","properties":{"line1":{"type":"string"},"line2":{"type":"string"},"zipCode":{"type":"string"},"city":{"type":"string"},"state":{"type":"string"},"country":{"type":"string"}},"required":["line1","line2","zipCode","city","state","country"]},"metadata":{"type":"object","properties":{}}},"required":["legalName","doingBusinessAs","legalDocument","status","address","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"2c92e0a4-cac3-4e0d-a0f2-3b6336426482","id":"794cee33-35fc-5288-b9bb-520bdb71d6ac","type":"customHttp","name":"Create an Organization","projectId":699928,"relatedId":1259297,"environmentId":2661460,"blockNumber":41,"httpApiId":546157,"httpApiCaseId":546157,"httpApiName":"Create an Organization","httpApiPath":"/v1/organizations","httpApiMethod":"post","httpApiCaseName":"Create an Organization"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"6aec0498-c92c-553e-ac53-7ee816afcb76","name":"Create a Ledger","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","body":{"mode":"raw","raw":"{\n    \"name\": \"Ledger Asset Regression Test\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"Teste Ledger\"\n    },\n    \"metadata\": {\n        \"chave\": \"metadata_chave\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`ledger_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable ledger_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"chave":{"type":"string"}},"required":["chave"]}},"required":["name","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"9f036b9e-34aa-4de5-9e74-8a85ac242a91","id":"6aec0498-c92c-553e-ac53-7ee816afcb76","type":"customHttp","name":"Create a Ledger","projectId":699928,"relatedId":1259297,"environmentId":2661460,"blockNumber":42,"httpApiId":546158,"httpApiCaseId":546158,"httpApiName":"Create a Ledger","httpApiPath":"/v1/organizations/{organization_id}/ledgers","httpApiMethod":"post","httpApiCaseName":"Create a Ledger"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"693e9a1c-863b-5e55-bd27-ac318aff1ad9","type":"group","metaInfo":{"id":"693e9a1c-863b-5e55-bd27-ac318aff1ad9","type":"group","scopeType":"end","scopeStartId":"fde305f2-9331-5db2-86f6-ac2bc2763fb3"}},{"id":"03e4fc57-f1a3-56e9-b9a8-237e16293540","type":"group","metaInfo":{"id":"03e4fc57-f1a3-56e9-b9a8-237e16293540","type":"group","scopeType":"start","scopeEndId":"d8727ea7-4a14-55c7-8c7c-511554c86480","name":"Asset - Create"}},{"id":"ef346ddd-8f45-5d8c-9bc3-e237675f1092","name":"[Success] Create an Asset - Currency","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","assets"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","body":{"mode":"raw","raw":"{\n    \"name\": \"Brazilian Real\",\n    \"type\": \"currency\",\n    \"code\": \"BRL\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"New BRL\"\n    },\n    \"metadata\": {\n        \"chave\": \"metadata_chave\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`asset_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable asset_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"type":{"type":"string"},"code":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"chave":{"type":"string"}},"required":["chave"]}},"required":["name","type","code","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"10478073-981f-4f89-8435-765782c70a14","id":"ef346ddd-8f45-5d8c-9bc3-e237675f1092","type":"customHttp","name":"[Success] Create an Asset - Currency","projectId":699928,"relatedId":1259297,"environmentId":2661460,"blockNumber":43,"httpApiId":546159,"httpApiCaseId":546159,"httpApiName":"[Success] Create an Asset - Currency","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets","httpApiMethod":"post","httpApiCaseName":"[Success] Create an Asset - Currency"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"209d6788-7595-5bed-b1d8-62fb5cd7a3c8","name":"[Success] Create an Asset - Crypto","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","assets"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","body":{"mode":"raw","raw":"{\n    \"name\": \"Bitcoin\",\n    \"type\": \"crypto\",\n    \"code\": \"BTC\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"New BTC\"\n    },\n    \"metadata\": {\n        \"chave\": \"metadata_chave\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`asset_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable asset_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"type":{"type":"string"},"code":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"chave":{"type":"string"}},"required":["chave"]}},"required":["name","type","code","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"3964d223-a7fb-446b-b433-00d7a7381e81","id":"209d6788-7595-5bed-b1d8-62fb5cd7a3c8","type":"customHttp","name":"[Success] Create an Asset - Crypto","projectId":699928,"relatedId":1259297,"environmentId":2661460,"blockNumber":44,"httpApiId":546160,"httpApiCaseId":546160,"httpApiName":"[Success] Create an Asset - Crypto","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets","httpApiMethod":"post","httpApiCaseName":"[Success] Create an Asset - Crypto"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"45f929f6-bb8f-569c-a061-cfee34640c18","name":"[0003] Duplicated Name","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","assets"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","body":{"mode":"raw","raw":"{\n    \"name\": \"Bitcoin\",\n    \"type\": \"crypto\",\n    \"code\": \"ABC\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"New BTC\"\n    },\n    \"metadata\": {\n        \"chave\": \"metadata_chave\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0003`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0003`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"type":{"type":"string"},"code":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"chave":{"type":"string"}},"required":["chave"]}},"required":["name","type","code","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"9f7e6aa4-059c-4088-86b6-f61e69a32b86","id":"45f929f6-bb8f-569c-a061-cfee34640c18","type":"customHttp","name":"[0003] Duplicated Name","projectId":699928,"relatedId":1259297,"environmentId":2661460,"blockNumber":45,"httpApiId":546161,"httpApiCaseId":546161,"httpApiName":"[0003] Duplicated Name","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets","httpApiMethod":"post","httpApiCaseName":"[0003] Duplicated Name"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"1bef03f3-3910-52fa-90bc-2e2c23bdae9f","name":"[0003] Duplicated Code","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","assets"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","body":{"mode":"raw","raw":"{\n    \"name\": \"Capybara\",\n    \"type\": \"crypto\",\n    \"code\": \"BTC\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"New BTC\"\n    },\n    \"metadata\": {\n        \"chave\": \"metadata_chave\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0003`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0003`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"type":{"type":"string"},"code":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"chave":{"type":"string"}},"required":["chave"]}},"required":["name","type","code","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"d5cb8e20-481f-42b6-ae2d-3090a2ec02ff","id":"1bef03f3-3910-52fa-90bc-2e2c23bdae9f","type":"customHttp","name":"[0003] Duplicated Code","projectId":699928,"relatedId":1259297,"environmentId":2661460,"blockNumber":46,"httpApiId":546162,"httpApiCaseId":546162,"httpApiName":"[0003] Duplicated Code","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets","httpApiMethod":"post","httpApiCaseName":"[0003] Duplicated Code"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"095d03d3-3d8e-55e5-85d2-506d5a16a3f6","name":"[0004] Code Uppercase","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","assets"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","body":{"mode":"raw","raw":"{\n    \"name\": \"Ethereum\",\n    \"type\": \"crypto\",\n    \"code\": \"eth\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"New BTC\"\n    },\n    \"metadata\": {\n        \"chave\": \"metadata_chave\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0004`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0004`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"type":{"type":"string"},"code":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"chave":{"type":"string"}},"required":["chave"]}},"required":["name","type","code","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"7c02f0b3-36f9-4df2-a603-971b285cd855","id":"095d03d3-3d8e-55e5-85d2-506d5a16a3f6","type":"customHttp","name":"[0004] Code Uppercase","projectId":699928,"relatedId":1259297,"environmentId":2661460,"blockNumber":47,"httpApiId":546163,"httpApiCaseId":546163,"httpApiName":"[0004] Code Uppercase","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets","httpApiMethod":"post","httpApiCaseName":"[0004] Code Uppercase"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"ad0a1e10-4182-5ad7-89d0-dabdfd507e8d","name":"[0005] Invalid Currecy Code","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","assets"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","body":{"mode":"raw","raw":"{\n    \"name\": \"Abc\",\n    \"type\": \"currency\",\n    \"code\": \"ABC\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"New ABC\"\n    },\n    \"metadata\": {\n        \"chave\": \"metadata_chave\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0005`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0005`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"type":{"type":"string"},"code":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"chave":{"type":"string"}},"required":["chave"]}},"required":["name","type","code","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"27e6e594-1f31-421d-9387-e34f503dcb3c","id":"ad0a1e10-4182-5ad7-89d0-dabdfd507e8d","type":"customHttp","name":"[0005] Invalid Currecy Code","projectId":699928,"relatedId":1259297,"environmentId":2661460,"blockNumber":48,"httpApiId":546164,"httpApiCaseId":546164,"httpApiName":"[0005] Invalid Currecy Code","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets","httpApiMethod":"post","httpApiCaseName":"[0005] Invalid Currecy Code"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"54d2fe4a-edfd-55a4-a5e4-53d9914fa54e","name":"[0033] Invalid Code Format","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","assets"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","body":{"mode":"raw","raw":"{\n    \"name\": \"Abc\",\n    \"type\": \"currency\",\n    \"code\": \"123\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"New ABC\"\n    },\n    \"metadata\": {\n        \"chave\": \"metadata_chave\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0033`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0033`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"type":{"type":"string"},"code":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"chave":{"type":"string"}},"required":["chave"]}},"required":["name","type","code","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"b8b24c6e-eead-436d-9af3-99a1931af674","id":"54d2fe4a-edfd-55a4-a5e4-53d9914fa54e","type":"customHttp","name":"[0033] Invalid Code Format","projectId":699928,"relatedId":1259297,"environmentId":2661460,"blockNumber":49,"httpApiId":546165,"httpApiCaseId":546165,"httpApiName":"[0033] Invalid Code Format","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets","httpApiMethod":"post","httpApiCaseName":"[0033] Invalid Code Format"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"e64fc11a-cfe5-530a-8f1d-ee36c155e20c","name":"[0009] Missing Fields","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","assets"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","body":{"mode":"raw","raw":"{\n    \"name\": \"Abc\",\n    \"type\": \"currency\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"New ABC\"\n    },\n    \"metadata\": {\n        \"chave\": \"metadata_chave\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0009`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0009`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"type":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"chave":{"type":"string"}},"required":["chave"]}},"required":["name","type","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"f12e5805-b4d4-4664-b8e3-b4f7a04459c2","id":"e64fc11a-cfe5-530a-8f1d-ee36c155e20c","type":"customHttp","name":"[0009] Missing Fields","projectId":699928,"relatedId":1259297,"environmentId":2661460,"blockNumber":50,"httpApiId":546166,"httpApiCaseId":546166,"httpApiName":"[0009] Missing Fields","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets","httpApiMethod":"post","httpApiCaseName":"[0009] Missing Fields"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"adae983c-8c50-5d3b-916c-bf2427f40324","name":"[0040] Invalid Type","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","assets"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","body":{"mode":"raw","raw":"{\n    \"name\": \"Abc\",\n    \"type\": \"capybara\",\n    \"code\": \"ABC\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"New ABC\"\n    },\n    \"metadata\": {\n        \"chave\": \"metadata_chave\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0040`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0040`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"type":{"type":"string"},"code":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"chave":{"type":"string"}},"required":["chave"]}},"required":["name","type","code","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"170e905b-2a4f-496c-a421-d8e3d0e733fe","id":"adae983c-8c50-5d3b-916c-bf2427f40324","type":"customHttp","name":"[0040] Invalid Type","projectId":699928,"relatedId":1259297,"environmentId":2661460,"blockNumber":51,"httpApiId":546167,"httpApiCaseId":546167,"httpApiName":"[0040] Invalid Type","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets","httpApiMethod":"post","httpApiCaseName":"[0040] Invalid Type"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"d965b5cf-12c0-5a45-ba55-28e38721a246","name":"[0047] Bad Request","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","assets"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","body":{"mode":"raw","raw":"{\n    \"name\": \"{{$string.alphanumeric(min=300,max=300)}}\",\n    \"type\": \"crypto\",\n    \"code\": \"ABC\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"New ABC\"\n    },\n    \"metadata\": {\n        \"chave\": \"metadata_chave\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0047`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0047`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"type":{"type":"string"},"code":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"chave":{"type":"string"}},"required":["chave"]}},"required":["name","type","code","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"f6dbeae9-2594-49dc-9f70-dee719670d06","id":"d965b5cf-12c0-5a45-ba55-28e38721a246","type":"customHttp","name":"[0047] Bad Request","projectId":699928,"relatedId":1259297,"environmentId":2661460,"blockNumber":52,"httpApiId":546168,"httpApiCaseId":546168,"httpApiName":"[0047] Bad Request","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets","httpApiMethod":"post","httpApiCaseName":"[0047] Bad Request"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"aa5df4bc-c204-5a4f-88d8-0031b92ff8f6","name":"[0038] Org Not Found","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{$string.uuid}}","ledgers","{{ledger_id}}","assets"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{$string.uuid}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","body":{"mode":"raw","raw":"{\n    \"name\": \"Abc\",\n    \"type\": \"crypto\",\n    \"code\": \"ABC\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"New ABC\"\n    },\n    \"metadata\": {\n        \"chave\": \"metadata_chave\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0038`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0038`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"type":{"type":"string"},"code":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"chave":{"type":"string"}},"required":["chave"]}},"required":["name","type","code","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"eec60b72-53a2-4561-980e-5d14f22092c2","id":"aa5df4bc-c204-5a4f-88d8-0031b92ff8f6","type":"customHttp","name":"[0038] Org Not Found","projectId":699928,"relatedId":1259297,"environmentId":2661460,"blockNumber":53,"httpApiId":546169,"httpApiCaseId":546169,"httpApiName":"[0038] Org Not Found","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets","httpApiMethod":"post","httpApiCaseName":"[0038] Org Not Found"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"28f27d0c-6420-5c32-ae5e-f4eeda5579e0","name":"[0037] Ledger Not Found","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{$string.uuid}}","assets"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{$string.uuid}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","body":{"mode":"raw","raw":"{\n    \"name\": \"Abc\",\n    \"type\": \"crypto\",\n    \"code\": \"ABC\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"New ABC\"\n    },\n    \"metadata\": {\n        \"chave\": \"metadata_chave\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0037`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0037`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"type":{"type":"string"},"code":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"chave":{"type":"string"}},"required":["chave"]}},"required":["name","type","code","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"8ca116a0-1785-4de6-a3b8-7f324f801a21","id":"28f27d0c-6420-5c32-ae5e-f4eeda5579e0","type":"customHttp","name":"[0037] Ledger Not Found","projectId":699928,"relatedId":1259297,"environmentId":2661460,"blockNumber":54,"httpApiId":546170,"httpApiCaseId":546170,"httpApiName":"[0037] Ledger Not Found","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets","httpApiMethod":"post","httpApiCaseName":"[0037] Ledger Not Found"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"c01bf9aa-26b6-583a-82f1-bf53770cb057","name":"[0053] Unexpected Fields","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{$string.uuid}}","assets"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{$string.uuid}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","body":{"mode":"raw","raw":"{\n    \"name\": \"Abc\",\n    \"capybara\": \"Capybara on the track\",\n    \"type\": \"crypto\",\n    \"code\": \"ABC\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"New ABC\"\n    },\n    \"metadata\": {\n        \"chave\": \"metadata_chave\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0053`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0053`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"capybara":{"type":"string"},"type":{"type":"string"},"code":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"chave":{"type":"string"}},"required":["chave"]}},"required":["name","capybara","type","code","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"095afb0b-b990-404c-925e-a5930badd181","id":"c01bf9aa-26b6-583a-82f1-bf53770cb057","type":"customHttp","name":"[0053] Unexpected Fields","projectId":699928,"relatedId":1259297,"environmentId":2661460,"blockNumber":55,"httpApiId":546171,"httpApiCaseId":546171,"httpApiName":"[0053] Unexpected Fields","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets","httpApiMethod":"post","httpApiCaseName":"[0053] Unexpected Fields"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"656b28b0-18b7-597d-bddf-0ae849ad2dc3","name":"[0067] Metadata Nesting","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","assets"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","body":{"mode":"raw","raw":"{\n    \"name\": \"Abc\",\n    \"type\": \"crypto\",\n    \"code\": \"ABC\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"New ABC\"\n    },\n    \"metadata\": {\n        \"key\": {\n            \"new_key\": \"new_value\"\n        }\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0067`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0067`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"type":{"type":"string"},"code":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"key":{"type":"object","properties":{"new_key":{"type":"string"}},"required":["new_key"]}},"required":["key"]}},"required":["name","type","code","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"250d582e-208a-4402-8fd1-5908de96ce4c","id":"656b28b0-18b7-597d-bddf-0ae849ad2dc3","type":"customHttp","name":"[0067] Metadata Nesting","projectId":699928,"relatedId":1259297,"environmentId":2661460,"blockNumber":56,"httpApiId":546172,"httpApiCaseId":546172,"httpApiName":"[0067] Metadata Nesting","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets","httpApiMethod":"post","httpApiCaseName":"[0067] Metadata Nesting"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"d8727ea7-4a14-55c7-8c7c-511554c86480","type":"group","metaInfo":{"id":"d8727ea7-4a14-55c7-8c7c-511554c86480","type":"group","scopeType":"end","scopeStartId":"03e4fc57-f1a3-56e9-b9a8-237e16293540"}},{"id":"479b956a-0599-572d-8237-662e90bdf319","type":"group","metaInfo":{"id":"479b956a-0599-572d-8237-662e90bdf319","type":"group","scopeType":"start","scopeEndId":"7e97782f-fcb2-5caf-8fe2-79405b410de2","name":"Asset - List"}},{"id":"d67c5038-bd71-5906-a003-6bc13fa46976","name":"[Success] List Assets","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","assets"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        pm.test(\"Validate Response Data Length \", function () {","  var jsonData = pm.response.json();","  pm.expect(jsonData.items.length).to.be.above(0);","});","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"e96a6611-2415-47b6-92a8-d692442410b5","id":"d67c5038-bd71-5906-a003-6bc13fa46976","type":"customHttp","name":"[Success] List Assets","projectId":699928,"relatedId":1259297,"environmentId":2661460,"blockNumber":57,"httpApiId":546173,"httpApiCaseId":546173,"httpApiName":"[Success] List Assets","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets","httpApiMethod":"get","httpApiCaseName":"[Success] List Assets"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"1197b222-1b75-5c62-af86-bb5e2533b789","name":"[0065] Invalid Path","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","1234","ledgers","{{ledger_id}}","assets"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"1234","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code 0065`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0065`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"ae49180f-b55f-4046-9af4-ac3d3151d773","id":"1197b222-1b75-5c62-af86-bb5e2533b789","type":"customHttp","name":"[0065] Invalid Path","projectId":699928,"relatedId":1259297,"environmentId":2661460,"blockNumber":58,"httpApiId":546174,"httpApiCaseId":546174,"httpApiName":"[0065] Invalid Path","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets","httpApiMethod":"get","httpApiCaseName":"[0065] Invalid Path"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"50f58756-9747-53c4-852e-308ded1aa74c","name":"[0080] Pagination Limit","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","assets"],"host":["127","0","0","1"],"query":[{"key":"limit","value":"200"}],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code 0080`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0080`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"10e07b88-6638-43eb-ac27-e59adb769293","id":"50f58756-9747-53c4-852e-308ded1aa74c","type":"customHttp","name":"[0080] Pagination Limit","projectId":699928,"relatedId":1259297,"environmentId":2661460,"blockNumber":60,"httpApiId":546176,"httpApiCaseId":546176,"httpApiName":"[0080] Pagination Limit","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets?limit=200","httpApiMethod":"get","httpApiCaseName":"[0080] Pagination Limit"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"d3008b1a-d51a-53cd-ae73-dd84ab66ff7d","name":"[0081] Invalid Sort Order","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","assets"],"host":["127","0","0","1"],"query":[{"key":"sort_order","value":"capybara"}],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code 0081`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0081`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"47f6781d-a859-4dfb-b62b-fe2d6056c3ad","id":"d3008b1a-d51a-53cd-ae73-dd84ab66ff7d","type":"customHttp","name":"[0081] Invalid Sort Order","projectId":699928,"relatedId":1259297,"environmentId":2661460,"blockNumber":61,"httpApiId":546177,"httpApiCaseId":546177,"httpApiName":"[0081] Invalid Sort Order","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets?sort_order=capybara","httpApiMethod":"get","httpApiCaseName":"[0081] Invalid Sort Order"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"d9c755bd-5ad4-5bc3-bba3-04ed78179906","name":"[0083] Invalid Data Range","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","assets"],"host":["127","0","0","1"],"query":[{"key":"start_date","value":"2021-01-01"}],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code 0083`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0083`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"fa3d191c-7af5-43f2-88a3-fa9f7e675eca","id":"d9c755bd-5ad4-5bc3-bba3-04ed78179906","type":"customHttp","name":"[0083] Invalid Data Range","projectId":699928,"relatedId":1259297,"environmentId":2661460,"blockNumber":62,"httpApiId":546178,"httpApiCaseId":546178,"httpApiName":"[0083] Invalid Data Range","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets?start_date=2021-01-01","httpApiMethod":"get","httpApiCaseName":"[0083] Invalid Data Range"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"7e97782f-fcb2-5caf-8fe2-79405b410de2","type":"group","metaInfo":{"id":"7e97782f-fcb2-5caf-8fe2-79405b410de2","type":"group","scopeType":"end","scopeStartId":"479b956a-0599-572d-8237-662e90bdf319"}},{"id":"eff5e607-edb7-5631-9f5f-ec4164be37ea","type":"group","metaInfo":{"id":"eff5e607-edb7-5631-9f5f-ec4164be37ea","type":"group","scopeType":"start","scopeEndId":"dc4f3835-4343-5249-a357-3884d6b6d749","name":"Asset - Retrieve"}},{"id":"3df24e7e-90c7-57d6-8d63-0f9fa1e1394d","name":"[Success] Retrieve an Asset","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","assets","{{asset_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"},{"type":"any","value":"{{asset_id}}","key":"asset_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"}],"method":"GET","body":{"mode":"formdata","formdata":[]},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"22aa2d98-dcc4-4b26-86d1-853ad2b91b8b","id":"3df24e7e-90c7-57d6-8d63-0f9fa1e1394d","type":"customHttp","name":"[Success] Retrieve an Asset","projectId":699928,"relatedId":1259297,"environmentId":2661460,"blockNumber":63,"httpApiId":546179,"httpApiCaseId":546179,"httpApiName":"[Success] Retrieve an Asset","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets/{asset_id}","httpApiMethod":"get","httpApiCaseName":"[Success] Retrieve an Asset"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"bb2ec467-72eb-511d-a46c-57df3100be7d","name":"[0007] Entity Not Found","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{$string.uuid}}","ledgers","{{ledger_id}}","assets","{{asset_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{$string.uuid}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"},{"type":"any","value":"{{asset_id}}","key":"asset_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"}],"method":"GET","body":{"mode":"formdata","formdata":[]},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0007`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0007`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"bfd57ee5-72b2-42dc-9e5e-f60c71846a88","id":"bb2ec467-72eb-511d-a46c-57df3100be7d","type":"customHttp","name":"[0007] Entity Not Found","projectId":699928,"relatedId":1259297,"environmentId":2661460,"blockNumber":64,"httpApiId":546180,"httpApiCaseId":546180,"httpApiName":"[0007] Entity Not Found","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets/{asset_id}","httpApiMethod":"get","httpApiCaseName":"[0007] Entity Not Found"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"7a0c5f15-ca3b-5685-9795-6bf830a31150","name":"[0065] Invalid Path","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","1234","ledgers","{{ledger_id}}","assets","{{asset_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"1234","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"},{"type":"any","value":"{{asset_id}}","key":"asset_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"}],"method":"GET","body":{"mode":"formdata","formdata":[]},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0065`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0065`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"f85a5ff8-8a0f-4f75-8cd3-690c19dd7297","id":"7a0c5f15-ca3b-5685-9795-6bf830a31150","type":"customHttp","name":"[0065] Invalid Path","projectId":699928,"relatedId":1259297,"environmentId":2661460,"blockNumber":65,"httpApiId":546181,"httpApiCaseId":546181,"httpApiName":"[0065] Invalid Path","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets/{asset_id}","httpApiMethod":"get","httpApiCaseName":"[0065] Invalid Path"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"dc4f3835-4343-5249-a357-3884d6b6d749","type":"group","metaInfo":{"id":"dc4f3835-4343-5249-a357-3884d6b6d749","type":"group","scopeType":"end","scopeStartId":"eff5e607-edb7-5631-9f5f-ec4164be37ea"}},{"id":"89591b99-6dc5-5398-ba7c-151bd3f0e27f","type":"group","metaInfo":{"id":"89591b99-6dc5-5398-ba7c-151bd3f0e27f","type":"group","scopeType":"start","scopeEndId":"71db678a-327a-5346-b252-d5459f71b972","name":"Asset - Update"}},{"id":"c556e735-ee1d-5289-90e7-2b3db44b577d","name":"[Success] Update an Asset","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","assets","{{asset_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"},{"type":"any","value":"{{asset_id}}","key":"asset_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"PATCH","body":{"mode":"raw","raw":"{\n    \"name\": \"Brazil Real\",\n    \"status\": {\n        \"code\": \"Active\",\n        \"description\": \"Active BRL\"\n    },\n    \"metadata\": {\n        \"key\": \"value\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"key":{"type":"string"}},"required":["key"]}},"required":["name","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"13dbabbe-132a-413a-b207-941a81d68ef5","id":"c556e735-ee1d-5289-90e7-2b3db44b577d","type":"customHttp","name":"[Success] Update an Asset","projectId":699928,"relatedId":1259297,"environmentId":2661460,"blockNumber":66,"httpApiId":546182,"httpApiCaseId":546182,"httpApiName":"[Success] Update an Asset","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets/{asset_id}","httpApiMethod":"patch","httpApiCaseName":"[Success] Update an Asset"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"7e22041b-dba5-55fd-95c2-5fda9dbafabe","name":"[0067] Metadata Nesting","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","assets","{{asset_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"},{"type":"any","value":"{{asset_id}}","key":"asset_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"PATCH","body":{"mode":"raw","raw":"{\n    \"name\": \"Brazil Real\",\n    \"status\": {\n        \"code\": \"Active\",\n        \"description\": \"Active BRL\"\n    },\n    \"metadata\": {\n        \"key\": {\n            \"new_key\": \"new_value\"\n        }\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.1.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0067`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0067`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"key":{"type":"object","properties":{"new_key":{"type":"string"}},"required":["new_key"]}},"required":["key"]}},"required":["name","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"f6bfe2c5-4654-4635-911f-c2daf9c564be","id":"7e22041b-dba5-55fd-95c2-5fda9dbafabe","type":"customHttp","name":"[0067] Metadata Nesting","projectId":699928,"relatedId":1259297,"environmentId":2661460,"blockNumber":67,"httpApiId":546183,"httpApiCaseId":546183,"httpApiName":"[0067] Metadata Nesting","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets/{asset_id}","httpApiMethod":"patch","httpApiCaseName":"[0067] Metadata Nesting"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"4465cd9a-d9bf-5a6f-8b66-36e466a8374e","name":"[0007] Entity Not Found","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{$string.uuid}}","ledgers","{{ledger_id}}","assets","{{asset_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{$string.uuid}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"},{"type":"any","value":"{{asset_id}}","key":"asset_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"PATCH","body":{"mode":"raw","raw":"{\n    \"name\": \"Brazil Real\",\n    \"status\": {\n        \"code\": \"Active\",\n        \"description\": \"Active BRL\"\n    },\n    \"metadata\": {\n        \"key\": \"value\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.1.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0007`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0007`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"key":{"type":"string"}},"required":["key"]}},"required":["name","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"060e2e83-1a6a-435f-8957-18c72ee60aff","id":"4465cd9a-d9bf-5a6f-8b66-36e466a8374e","type":"customHttp","name":"[0007] Entity Not Found","projectId":699928,"relatedId":1259297,"environmentId":2661460,"blockNumber":68,"httpApiId":546184,"httpApiCaseId":546184,"httpApiName":"[0007] Entity Not Found","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets/{asset_id}","httpApiMethod":"patch","httpApiCaseName":"[0007] Entity Not Found"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"b63a544a-47d4-5b86-b0b0-448127507152","name":"[0047] Bad Request","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","assets","{{asset_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"},{"type":"any","value":"{{asset_id}}","key":"asset_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"PATCH","body":{"mode":"raw","raw":"{\n    \"name\": \"{{$string.alphanumeric(min=300,max=300)}}\",\n    \"status\": {\n        \"code\": \"Active\",\n        \"description\": \"Active BRL\"\n    },\n    \"metadata\": {\n        \"key\": \"value\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.1.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0047`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0047`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"key":{"type":"string"}},"required":["key"]}},"required":["name","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"9ba19395-e198-43b8-ab42-d31c22addf09","id":"b63a544a-47d4-5b86-b0b0-448127507152","type":"customHttp","name":"[0047] Bad Request","projectId":699928,"relatedId":1259297,"environmentId":2661460,"blockNumber":69,"httpApiId":546185,"httpApiCaseId":546185,"httpApiName":"[0047] Bad Request","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets/{asset_id}","httpApiMethod":"patch","httpApiCaseName":"[0047] Bad Request"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"dedbde3b-b828-578a-b084-792533bc1fc0","name":"[0065] Invalid Path","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","1234","ledgers","{{ledger_id}}","assets","{{asset_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"1234","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"},{"type":"any","value":"{{asset_id}}","key":"asset_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"PATCH","body":{"mode":"raw","raw":"{\n    \"name\": \"Brazil Real\",\n    \"status\": {\n        \"code\": \"Active\",\n        \"description\": \"Active BRL\"\n    },\n    \"metadata\": {\n        \"key\": \"value\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.1.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0065`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0065`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"key":{"type":"string"}},"required":["key"]}},"required":["name","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"6901fcae-8189-46a0-afc9-45366538eefc","id":"dedbde3b-b828-578a-b084-792533bc1fc0","type":"customHttp","name":"[0065] Invalid Path","projectId":699928,"relatedId":1259297,"environmentId":2661460,"blockNumber":70,"httpApiId":546186,"httpApiCaseId":546186,"httpApiName":"[0065] Invalid Path","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets/{asset_id}","httpApiMethod":"patch","httpApiCaseName":"[0065] Invalid Path"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"d52dbc8d-6bf4-5a6a-a1d5-4ff15ddb5763","name":"[0053] Unexpected fields","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","assets","{{asset_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"},{"type":"any","value":"{{asset_id}}","key":"asset_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"PATCH","body":{"mode":"raw","raw":"{\n    \"name\": \"Brazil Real\",\n    \"capybara\": \"Capybara on the track\",\n    \"status\": {\n        \"code\": \"Active\",\n        \"description\": \"Active BRL\"\n    },\n    \"metadata\": {\n        \"key\": \"value\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.1.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0053`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0053`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"capybara":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"key":{"type":"string"}},"required":["key"]}},"required":["name","capybara","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"6c5f6fd5-139a-4766-8d46-22ac07cc6fc7","id":"d52dbc8d-6bf4-5a6a-a1d5-4ff15ddb5763","type":"customHttp","name":"[0053] Unexpected fields","projectId":699928,"relatedId":1259297,"environmentId":2661460,"blockNumber":71,"httpApiId":546187,"httpApiCaseId":546187,"httpApiName":"[0053] Unexpected fields","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets/{asset_id}","httpApiMethod":"patch","httpApiCaseName":"[0053] Unexpected fields"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"71db678a-327a-5346-b252-d5459f71b972","type":"group","metaInfo":{"id":"71db678a-327a-5346-b252-d5459f71b972","type":"group","scopeType":"end","scopeStartId":"89591b99-6dc5-5398-ba7c-151bd3f0e27f"}},{"id":"d4ea5c4b-dbe7-585c-8d45-0748da949391","type":"group","metaInfo":{"id":"d4ea5c4b-dbe7-585c-8d45-0748da949391","type":"group","scopeType":"start","scopeEndId":"dcff7119-b812-524a-b135-f7f8c7e176cb","name":"Asset - Delete"}},{"id":"6db797f2-8ed5-591e-88cd-11ddcdb5a771","name":"[0007] Delete an Asset","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{$string.uuid}}","ledgers","{{$string.uuid}}","assets","{{$string.uuid}}"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{$string.uuid}}","key":"organization_id"},{"type":"any","value":"{{$string.uuid}}","key":"ledger_id"},{"type":"any","value":"{{$string.uuid}}","key":"asset_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"DELETE","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.1.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0007`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0007`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"040baa6f-0b76-4ce8-ad72-09839ec3259c","id":"6db797f2-8ed5-591e-88cd-11ddcdb5a771","type":"customHttp","name":"[0007] Delete an Asset","projectId":699928,"relatedId":1259297,"environmentId":2661460,"blockNumber":72,"httpApiId":546188,"httpApiCaseId":546188,"httpApiName":"[0007] Delete an Asset","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets/{asset_id}","httpApiMethod":"delete","httpApiCaseName":"[0007] Delete an Asset"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"131d8b08-2a48-5f4c-957e-6216bbf54e15","name":"[0065] Invalid Path","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","1234","ledgers","{{$string.uuid}}","assets","{{$string.uuid}}"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"1234","key":"organization_id"},{"type":"any","value":"{{$string.uuid}}","key":"ledger_id"},{"type":"any","value":"{{$string.uuid}}","key":"asset_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"DELETE","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.1.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0065`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0065`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"9761666d-e3e6-4281-9521-6812f7e39f4b","id":"131d8b08-2a48-5f4c-957e-6216bbf54e15","type":"customHttp","name":"[0065] Invalid Path","projectId":699928,"relatedId":1259297,"environmentId":2661460,"blockNumber":73,"httpApiId":546189,"httpApiCaseId":546189,"httpApiName":"[0065] Invalid Path","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets/{asset_id}","httpApiMethod":"delete","httpApiCaseName":"[0065] Invalid Path"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"1fd93463-ec2e-5299-8cf6-053ac20a9934","name":"[Success] Delete an Asset","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","assets","{{asset_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"},{"type":"any","value":"{{asset_id}}","key":"asset_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"DELETE","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"25a18964-62eb-41ea-a678-88dd4b814398","id":"1fd93463-ec2e-5299-8cf6-053ac20a9934","type":"customHttp","name":"[Success] Delete an Asset","projectId":699928,"relatedId":1259297,"environmentId":2661460,"blockNumber":74,"httpApiId":546190,"httpApiCaseId":546190,"httpApiName":"[Success] Delete an Asset","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets/{asset_id}","httpApiMethod":"delete","httpApiCaseName":"[Success] Delete an Asset"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"dcff7119-b812-524a-b135-f7f8c7e176cb","type":"group","metaInfo":{"id":"dcff7119-b812-524a-b135-f7f8c7e176cb","type":"group","scopeType":"end","scopeStartId":"d4ea5c4b-dbe7-585c-8d45-0748da949391"}},{"id":"6a4d95ca-4ad0-5705-9154-7b706d73a1a5","type":"group","metaInfo":{"id":"6a4d95ca-4ad0-5705-9154-7b706d73a1a5","type":"group","scopeType":"start","scopeEndId":"6528c611-4a19-537d-8e90-48e8fd5d44aa","name":"Setup"}},{"id":"1c337d7a-b364-5f2a-82d8-5cc76906a975","name":"Create an Organization","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations"],"host":["127","0","0","1"],"query":[],"variable":[]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","body":{"mode":"raw","raw":"{\n    \"legalName\": \"Account Regression Teste\",\n    \"doingBusinessAs\": \"Account Regression Teste\",\n    \"legalDocument\": \"22367046391413\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"New Account\"\n    },\n    \"address\": {\n        \"line1\": \"138 West Street\",\n        \"line2\": \"Apt. 458\",\n        \"zipCode\": \"97446-2761\",\n        \"city\": \"Sandyview\",\n        \"state\": \"Massachusetts\",\n        \"country\": \"BI\"\n    },\n    \"metadata\": {}\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`organization_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable organization_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"legalName":{"type":"string"},"doingBusinessAs":{"type":"string"},"legalDocument":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"address":{"type":"object","properties":{"line1":{"type":"string"},"line2":{"type":"string"},"zipCode":{"type":"string"},"city":{"type":"string"},"state":{"type":"string"},"country":{"type":"string"}},"required":["line1","line2","zipCode","city","state","country"]},"metadata":{"type":"object","properties":{}}},"required":["legalName","doingBusinessAs","legalDocument","status","address","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"989a2a77-66ac-41aa-b84d-b3840d37cba4","id":"1c337d7a-b364-5f2a-82d8-5cc76906a975","type":"customHttp","name":"Create an Organization","projectId":699928,"relatedId":1259299,"environmentId":2661460,"blockNumber":76,"httpApiId":546156,"httpApiCaseId":546156,"httpApiName":"Create an Organization","httpApiPath":"/v1/organizations","httpApiMethod":"post","httpApiCaseName":"Create an Organization"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"12a55081-2ac5-50ab-afae-016ecc11c7c4","name":"Create a Ledger","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","body":{"mode":"raw","raw":"{\n    \"name\": \"Account Regression Test - Ledger\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"New Ledger\"\n    },\n    \"metadata\": {\n        \"chave\": \"metadata_chave\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`ledger_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable ledger_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"chave":{"type":"string"}},"required":["chave"]}},"required":["name","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"ae94b5b4-5e21-4618-893f-f51872bc5840","id":"12a55081-2ac5-50ab-afae-016ecc11c7c4","type":"customHttp","name":"Create a Ledger","projectId":699928,"relatedId":1259299,"environmentId":2661460,"blockNumber":75,"httpApiId":546155,"httpApiCaseId":546155,"httpApiName":"Create a Ledger","httpApiPath":"/v1/organizations/{organization_id}/ledgers","httpApiMethod":"post","httpApiCaseName":"Create a Ledger"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"b10f36d7-0f7f-5dfe-b227-a02c03414e19","name":"Create an Asset","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","assets"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","body":{"mode":"raw","raw":"{\n    \"name\": \"Brazilian Real\",\n    \"type\": \"currency\",\n    \"code\": \"BRL\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"New Asset\"\n    },\n    \"metadata\": {\n        \"chave\": \"metadata_chave\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`asset_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable asset_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"type":{"type":"string"},"code":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"chave":{"type":"string"}},"required":["chave"]}},"required":["name","type","code","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"5fa14480-0c8d-4fe2-86a0-a7dfcc148a49","id":"b10f36d7-0f7f-5dfe-b227-a02c03414e19","type":"customHttp","name":"Create an Asset","projectId":699928,"relatedId":1259299,"environmentId":2661460,"blockNumber":74,"httpApiId":546154,"httpApiCaseId":546154,"httpApiName":"Create an Asset","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets","httpApiMethod":"post","httpApiCaseName":"Create an Asset"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"5d9090f7-dd83-5185-962c-4c767339c11f","name":"Create a Segment","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","segments"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","body":{"mode":"raw","raw":"{\n    \"name\": \"Account Regression Test - Segment\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"New Segment\"\n    },\n    \"metadata\": {\n        \"chave\": \"metadata_chave\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`segment_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable segment_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"chave":{"type":"string"}},"required":["chave"]}},"required":["name","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"cfc07ffb-89d1-4617-b9e1-78782c989dfc","id":"5d9090f7-dd83-5185-962c-4c767339c11f","type":"customHttp","name":"Create a Segment","projectId":699928,"relatedId":1259299,"environmentId":2661460,"blockNumber":73,"httpApiId":546153,"httpApiCaseId":546153,"httpApiName":"Create a Segment","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/segments","httpApiMethod":"post","httpApiCaseName":"Create a Segment"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"5a9ad58b-1d53-5d27-919f-ae6899f2dc95","name":"Create a Portfolio","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","portfolios"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","body":{"mode":"raw","raw":"{\n    \"name\": \"Account Regression Test - Portfolio\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"New Portfolio\"\n    },\n    \"metadata\": {\n        \"chave\": \"metadata_chave\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`portfolio_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable portfolio_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"chave":{"type":"string"}},"required":["chave"]}},"required":["name","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"ee6070a5-0354-423d-b627-ed9bd4488240","id":"5a9ad58b-1d53-5d27-919f-ae6899f2dc95","type":"customHttp","name":"Create a Portfolio","projectId":699928,"relatedId":1259299,"environmentId":2661460,"blockNumber":72,"httpApiId":546152,"httpApiCaseId":546152,"httpApiName":"Create a Portfolio","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/portfolios","httpApiMethod":"post","httpApiCaseName":"Create a Portfolio"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":true,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"6528c611-4a19-537d-8e90-48e8fd5d44aa","type":"group","metaInfo":{"id":"6528c611-4a19-537d-8e90-48e8fd5d44aa","type":"group","scopeType":"end","scopeStartId":"6a4d95ca-4ad0-5705-9154-7b706d73a1a5"}},{"id":"122bcdf2-efb0-56bd-999c-4de62446b902","type":"group","metaInfo":{"id":"122bcdf2-efb0-56bd-999c-4de62446b902","type":"group","scopeType":"start","scopeEndId":"b08ca129-cd98-5260-be95-c79004960432","name":"Account - Create"}},{"id":"8071fde7-94c0-5a21-b237-822155507698","name":"[Success] Create an Account","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","accounts"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","body":{"mode":"raw","raw":"{\n    \"assetCode\": \"BRL\",\n    \"name\": \"Brazilian Real Account\",\n    \"alias\": \"test:001:brl\",\n    \"type\": \"deposit\",\n    \"segmentId\": \"{{segment_id}}\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"Account Created\"\n    },\n    \"metadata\": {\n        \"accountNumber\": \"{{$finance.accountNumber}}\",\n        \"accountBrach\": \"{{$string.numeric(min=4,max=4)}}\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`account_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable account_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"assetCode":{"type":"string"},"name":{"type":"string"},"alias":{"type":"string"},"type":{"type":"string"},"segmentId":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"accountNumber":{"type":"string"},"accountBrach":{"type":"string"}},"required":["accountNumber","accountBrach"]}},"required":["assetCode","name","alias","type","segmentId","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"e1b9be38-3020-4c0a-a3ca-f51a6ad0a24c","id":"8071fde7-94c0-5a21-b237-822155507698","type":"customHttp","name":"[Success] Create an Account","projectId":699928,"relatedId":1259299,"environmentId":2661460,"blockNumber":71,"httpApiId":546151,"httpApiCaseId":546151,"httpApiName":"[Success] Create an Account","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts","httpApiMethod":"post","httpApiCaseName":"[Success] Create an Account"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"0b83cce8-686b-5e03-84ec-05173550088a","name":"[0020] Alias Unavailable","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","accounts"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","body":{"mode":"raw","raw":"{\n    \"assetCode\": \"BRL\",\n    \"name\": \"Brazilian Real Account\",\n    \"alias\": \"test:001:brl\",\n    \"type\": \"deposit\",\n    \"segmentId\": \"{{segment_id}}\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"Account Created\"\n    },\n    \"metadata\": {\n        \"accountNumber\": \"{{$finance.accountNumber}}\",\n        \"accountBrach\": \"{{$string.numeric(min=4,max=4)}}\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0020`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0020`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"assetCode":{"type":"string"},"name":{"type":"string"},"alias":{"type":"string"},"type":{"type":"string"},"segmentId":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"accountNumber":{"type":"string"},"accountBrach":{"type":"string"}},"required":["accountNumber","accountBrach"]}},"required":["assetCode","name","alias","type","segmentId","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"650f54f0-c67a-418b-9aa2-62762539ed0a","id":"0b83cce8-686b-5e03-84ec-05173550088a","type":"customHttp","name":"[0020] Alias Unavailable","projectId":699928,"relatedId":1259299,"environmentId":2661460,"blockNumber":70,"httpApiId":546150,"httpApiCaseId":546150,"httpApiName":"[0020] Alias Unavailable","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts","httpApiMethod":"post","httpApiCaseName":"[0020] Alias Unavailable"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"3797891f-26df-575f-962e-b72efefc4e74","name":"[0029] Invalid Parent Account","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","accounts"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","body":{"mode":"raw","raw":"{\n    \"assetCode\": \"BRL\",\n    \"name\": \"Brazilian Real Account\",\n    \"parentAccountId\": \"{{$string.uuid}}\",\n    \"alias\": \"test:002:brl\",\n    \"type\": \"deposit\",\n    \"segmentId\": \"{{segment_id}}\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"Account Created\"\n    },\n    \"metadata\": {\n        \"accountNumber\": \"{{$finance.accountNumber}}\",\n        \"accountBrach\": \"{{$string.numeric(min=4,max=4)}}\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0029`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0029`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"assetCode":{"type":"string"},"name":{"type":"string"},"parentAccountId":{"type":"string"},"alias":{"type":"string"},"type":{"type":"string"},"segmentId":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"accountNumber":{"type":"string"},"accountBrach":{"type":"string"}},"required":["accountNumber","accountBrach"]}},"required":["assetCode","name","parentAccountId","alias","type","segmentId","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"4e013285-1005-4ef9-9b10-5c3b16b5d3d1","id":"3797891f-26df-575f-962e-b72efefc4e74","type":"customHttp","name":"[0029] Invalid Parent Account","projectId":699928,"relatedId":1259299,"environmentId":2661460,"blockNumber":69,"httpApiId":546149,"httpApiCaseId":546149,"httpApiName":"[0029] Invalid Parent Account","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts","httpApiMethod":"post","httpApiCaseName":"[0029] Invalid Parent Account"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"e927a191-7891-53ec-a79f-9274bb98f879","name":"[0034] Asset Code Not Found","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","accounts"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","body":{"mode":"raw","raw":"{\n    \"assetCode\": \"ABC\",\n    \"name\": \"Brazilian Real Account\",\n    \"alias\": \"test:002:brl\",\n    \"type\": \"deposit\",\n    \"segmentId\": \"{{segment_id}}\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"Account Created\"\n    },\n    \"metadata\": {\n        \"accountNumber\": \"{{$finance.accountNumber}}\",\n        \"accountBrach\": \"{{$string.numeric(min=4,max=4)}}\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0034`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0034`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"assetCode":{"type":"string"},"name":{"type":"string"},"alias":{"type":"string"},"type":{"type":"string"},"segmentId":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"accountNumber":{"type":"string"},"accountBrach":{"type":"string"}},"required":["accountNumber","accountBrach"]}},"required":["assetCode","name","alias","type","segmentId","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"7c25b5a8-b6a6-4f47-9231-364e60f7d52c","id":"e927a191-7891-53ec-a79f-9274bb98f879","type":"customHttp","name":"[0034] Asset Code Not Found","projectId":699928,"relatedId":1259299,"environmentId":2661460,"blockNumber":68,"httpApiId":546148,"httpApiCaseId":546148,"httpApiName":"[0034] Asset Code Not Found","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts","httpApiMethod":"post","httpApiCaseName":"[0034] Asset Code Not Found"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"cc2b11f1-35dd-5d5d-9ce8-84a05d075d39","name":"[0009] Missing Fields","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","accounts"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","body":{"mode":"raw","raw":"{\n    \"name\": \"Brazilian Real Account\",\n    \"alias\": \"test:002:brl\",\n    \"type\": \"deposit\",\n    \"segmentId\": \"{{segment_id}}\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"Account Created\"\n    },\n    \"metadata\": {\n        \"accountNumber\": \"{{$finance.accountNumber}}\",\n        \"accountBrach\": \"{{$string.numeric(min=4,max=4)}}\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0009`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0009`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"alias":{"type":"string"},"type":{"type":"string"},"segmentId":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"accountNumber":{"type":"string"},"accountBrach":{"type":"string"}},"required":["accountNumber","accountBrach"]}},"required":["name","alias","type","segmentId","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"7d78776f-c145-4a53-ba02-a932b4e5d5f7","id":"cc2b11f1-35dd-5d5d-9ce8-84a05d075d39","type":"customHttp","name":"[0009] Missing Fields","projectId":699928,"relatedId":1259299,"environmentId":2661460,"blockNumber":67,"httpApiId":546147,"httpApiCaseId":546147,"httpApiName":"[0009] Missing Fields","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts","httpApiMethod":"post","httpApiCaseName":"[0009] Missing Fields"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"b9cbaa48-20b1-53e3-97a8-6141bc5b40de","name":"[0047] Bad Request","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","accounts"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","body":{"mode":"raw","raw":"{\n    \"assetCode\": \"BRL\",\n    \"name\": \"{{$string.alphanumeric(min=300,max=300)}}\",\n    \"alias\": \"test:002:brl\",\n    \"type\": \"deposit\",\n    \"segmentId\": \"{{segment_id}}\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"Account Created\"\n    },\n    \"metadata\": {\n        \"accountNumber\": \"{{$finance.accountNumber}}\",\n        \"accountBrach\": \"{{$string.numeric(min=4,max=4)}}\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0047`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0047`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"assetCode":{"type":"string"},"name":{"type":"string"},"alias":{"type":"string"},"type":{"type":"string"},"segmentId":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"accountNumber":{"type":"string"},"accountBrach":{"type":"string"}},"required":["accountNumber","accountBrach"]}},"required":["assetCode","name","alias","type","segmentId","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"ba496ec4-9a56-4e05-b6dc-c3810adfe6d7","id":"b9cbaa48-20b1-53e3-97a8-6141bc5b40de","type":"customHttp","name":"[0047] Bad Request","projectId":699928,"relatedId":1259299,"environmentId":2661460,"blockNumber":66,"httpApiId":546146,"httpApiCaseId":546146,"httpApiName":"[0047] Bad Request","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts","httpApiMethod":"post","httpApiCaseName":"[0047] Bad Request"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"3619a6c8-096f-5c51-80aa-714194513abc","name":"[0067] Metadata Nesting","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","accounts"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","body":{"mode":"raw","raw":"{\n    \"assetCode\": \"BRL\",\n    \"name\": \"Brazilian Real Account\",\n    \"alias\": \"test:002:brl\",\n    \"type\": \"deposit\",\n    \"segmentId\": \"{{segment_id}}\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"Account Created\"\n    },\n    \"metadata\": {\n        \"value\": {\n            \"new_key\": \"new_value\"\n        }\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0067`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0067`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"assetCode":{"type":"string"},"name":{"type":"string"},"alias":{"type":"string"},"type":{"type":"string"},"segmentId":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"value":{"type":"object","properties":{"new_key":{"type":"string"}},"required":["new_key"]}},"required":["value"]}},"required":["assetCode","name","alias","type","segmentId","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"5992ad92-829a-4a97-a887-c26aac6c9247","id":"3619a6c8-096f-5c51-80aa-714194513abc","type":"customHttp","name":"[0067] Metadata Nesting","projectId":699928,"relatedId":1259299,"environmentId":2661460,"blockNumber":65,"httpApiId":546145,"httpApiCaseId":546145,"httpApiName":"[0067] Metadata Nesting","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts","httpApiMethod":"post","httpApiCaseName":"[0067] Metadata Nesting"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"8175bd02-1fed-5f0f-a455-b46487dfc1f5","name":"[0053] Unexpected Field","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","accounts"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","body":{"mode":"raw","raw":"{\n    \"assetCode\": \"BRL\",\n    \"capybara\": \"Capybara on the track\",\n    \"name\": \"Brazilian Real Account\",\n    \"alias\": \"test:002:brl\",\n    \"type\": \"deposit\",\n    \"segmentId\": \"{{segment_id}}\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"Account Created\"\n    },\n    \"metadata\": {\n        \"key\": \"value\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0053`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0053`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"assetCode":{"type":"string"},"capybara":{"type":"string"},"name":{"type":"string"},"alias":{"type":"string"},"type":{"type":"string"},"segmentId":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"key":{"type":"string"}},"required":["key"]}},"required":["assetCode","capybara","name","alias","type","segmentId","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"a451f8f8-2d72-4c64-9925-e64661e26b7d","id":"8175bd02-1fed-5f0f-a455-b46487dfc1f5","type":"customHttp","name":"[0053] Unexpected Field","projectId":699928,"relatedId":1259299,"environmentId":2661460,"blockNumber":64,"httpApiId":546144,"httpApiCaseId":546144,"httpApiName":"[0053] Unexpected Field","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts","httpApiMethod":"post","httpApiCaseName":"[0053] Unexpected Field"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"29a3d62a-d120-58fe-866a-e8fb53d9152e","name":"[0066] Invalid Type","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","accounts"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","body":{"mode":"raw","raw":"{\n    \"assetCode\": \"BRL\",\n    \"name\": \"Brazilian Real Account\",\n    \"alias\": \"test:002:brl\",\n    \"type\": \"external\",\n    \"segmentId\": \"{{segment_id}}\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"Account Created\"\n    },\n    \"metadata\": {\n        \"key\": \"value\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0066`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0066`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"assetCode":{"type":"string"},"name":{"type":"string"},"alias":{"type":"string"},"type":{"type":"string"},"segmentId":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"key":{"type":"string"}},"required":["key"]}},"required":["assetCode","name","alias","type","segmentId","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"c6f255af-24bb-4119-8874-23161678fa8c","id":"29a3d62a-d120-58fe-866a-e8fb53d9152e","type":"customHttp","name":"[0066] Invalid Type","projectId":699928,"relatedId":1259299,"environmentId":2661460,"blockNumber":63,"httpApiId":546143,"httpApiCaseId":546143,"httpApiName":"[0066] Invalid Type","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts","httpApiMethod":"post","httpApiCaseName":"[0066] Invalid Type"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"b08ca129-cd98-5260-be95-c79004960432","type":"group","metaInfo":{"id":"b08ca129-cd98-5260-be95-c79004960432","type":"group","scopeType":"end","scopeStartId":"122bcdf2-efb0-56bd-999c-4de62446b902"}},{"id":"3fa9c6e7-73d9-5469-bd42-231edd7afc96","type":"group","metaInfo":{"id":"3fa9c6e7-73d9-5469-bd42-231edd7afc96","type":"group","scopeType":"start","scopeEndId":"2a28721c-38a4-5ede-800f-fa07d5384c81","name":"Account - List"}},{"id":"926c1924-0c1c-59a0-bd1a-1e091a341c61","name":"[Success] List Accounts","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","accounts"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        pm.test(\"Validate Response Data Length \", function () {","  var jsonData = pm.response.json();","  pm.expect(jsonData.items.length).to.be.above(0);","});","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"69f3a9ad-1e90-4c7e-ac2a-2b473307a7db","id":"926c1924-0c1c-59a0-bd1a-1e091a341c61","type":"customHttp","name":"[Success] List Accounts","projectId":699928,"relatedId":1259299,"environmentId":2661460,"blockNumber":62,"httpApiId":546142,"httpApiCaseId":546142,"httpApiName":"[Success] List Accounts","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts","httpApiMethod":"get","httpApiCaseName":"[Success] List Accounts"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":true,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"35bf26d6-f9b6-5fb6-8ac8-a63b20f8d929","name":"[0065] Invalid Path","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","1234","ledgers","{{ledger_id}}","accounts"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"1234","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0065`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0065`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"ddada3ae-28bf-4f22-a002-8d3a05b9b102","id":"35bf26d6-f9b6-5fb6-8ac8-a63b20f8d929","type":"customHttp","name":"[0065] Invalid Path","projectId":699928,"relatedId":1259299,"environmentId":2661460,"blockNumber":61,"httpApiId":546141,"httpApiCaseId":546141,"httpApiName":"[0065] Invalid Path","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts","httpApiMethod":"get","httpApiCaseName":"[0065] Invalid Path"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":true,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"51720950-3673-5153-9766-6c29405747ab","name":"[0080] Pagination Limit","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","accounts"],"host":["127","0","0","1"],"query":[{"key":"limit","value":"1000"}],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0080`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0080`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"5e2d06b5-806d-4974-8688-6ae7f3cb0d7b","id":"51720950-3673-5153-9766-6c29405747ab","type":"customHttp","name":"[0080] Pagination Limit","projectId":699928,"relatedId":1259299,"environmentId":2661460,"blockNumber":59,"httpApiId":546139,"httpApiCaseId":546139,"httpApiName":"[0080] Pagination Limit","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts?limit=1000","httpApiMethod":"get","httpApiCaseName":"[0080] Pagination Limit"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":true,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"9da44e86-f9c6-5071-9428-e06a8b2b2b92","name":"[0081] Invalid Sort Order","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","accounts"],"host":["127","0","0","1"],"query":[{"disabled":true,"key":"metadata.chave","value":"mymetadata"},{"disabled":true,"key":"limit","value":"1000"},{"disabled":true,"key":"page","value":"1"},{"disabled":true,"key":"start_date","value":"2021-01-01"},{"disabled":true,"key":"end_date","value":"2025-01-01"},{"disabled":false,"key":"sort_order","value":"capybara"}],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","baseUrl":"http://127.0.0.1:3000","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0081`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0081`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"id":2839127,"createdAt":"2024-12-26T18:09:14.000Z","updatedAt":"2024-12-26T18:09:36.000Z","name":"[0081] Invalid Sort Order","apiDetailId":0,"projectId":699928,"moduleId":760453,"code":400,"contentType":"json","ordering":870,"jsonSchema":{"type":"object","properties":{"code":{"type":"string"},"title":{"type":"string"},"message":{"type":"string"}},"required":["code","title","message"],"x-apidog-orders":["code","title","message"]},"defaultEnable":false,"folderId":743415,"responseExamples":[{"id":3974060,"name":"Date Range Exceeds Limit Error","data":"{\n    \"code\": \"0081\",\n    \"title\": \"Invalid Sort Order\",\n    \"message\": \"The 'sort_order' field must be 'asc' or 'desc'. Please provide a valid sort order and try again.\"\n}","apiDetailId":0,"responseId":2839127,"ordering":1,"description":null,"oasKey":"","oasExtensions":null}],"mediaType":"","headers":[],"description":"","oasExtensions":null,"schemaDefinitions":{}},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"cd84b05e-03fb-46cd-9081-ecaad6eba3f0","id":"9da44e86-f9c6-5071-9428-e06a8b2b2b92","type":"http","name":"[0081] Invalid Sort Order","projectId":699928,"relatedId":1259299,"environmentId":2661460,"blockNumber":26,"httpApiId":11235268,"httpApiCaseId":26069824,"httpApiName":"List Accounts","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts","httpApiMethod":"get","httpApiCaseName":"List Accounts","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":true,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"9b60aaf5-d45a-5195-b9e3-959056bdb66c","name":"[0083] Invalid Date Range","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","accounts"],"host":["127","0","0","1"],"query":[{"key":"start_date","value":"2021-01-01"}],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0083`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0083`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"bf8a62d2-014b-416f-91b0-c734bec4d12b","id":"9b60aaf5-d45a-5195-b9e3-959056bdb66c","type":"customHttp","name":"[0083] Invalid Date Range","projectId":699928,"relatedId":1259299,"environmentId":2661460,"blockNumber":58,"httpApiId":546138,"httpApiCaseId":546138,"httpApiName":"[0083] Invalid Date Range","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts?start_date=2021-01-01","httpApiMethod":"get","httpApiCaseName":"[0083] Invalid Date Range"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":true,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"2a28721c-38a4-5ede-800f-fa07d5384c81","type":"group","metaInfo":{"id":"2a28721c-38a4-5ede-800f-fa07d5384c81","type":"group","scopeType":"end","scopeStartId":"3fa9c6e7-73d9-5469-bd42-231edd7afc96"}},{"id":"d5eed59b-3623-5e4d-b77f-6766db3c0f45","type":"group","metaInfo":{"id":"d5eed59b-3623-5e4d-b77f-6766db3c0f45","type":"group","scopeType":"start","scopeEndId":"b7aaa527-b814-56f1-a15d-f7b99e2ce1f2","name":"Account - Retrieve by Id"}},{"id":"d2a3e1d4-2053-547c-a2bf-5ceac59186c7","name":"[Success] Retrieve an Account by Id","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","accounts","{{account_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"},{"type":"any","value":"{{account_id}}","key":"account_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"06078695-e17c-4d22-9dc9-3118aece7963","id":"d2a3e1d4-2053-547c-a2bf-5ceac59186c7","type":"customHttp","name":"[Success] Retrieve an Account by Id","projectId":699928,"relatedId":1259299,"environmentId":2661460,"blockNumber":57,"httpApiId":546137,"httpApiCaseId":546137,"httpApiName":"[Success] Retrieve an Account by Id","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/{account_id}","httpApiMethod":"get","httpApiCaseName":"[Success] Retrieve an Account by Id"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":true,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"f5e15a5d-625f-58ae-acfb-b110ad4f899d","name":"[0007] Entity Not Found","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{$string.uuid}}","ledgers","{{ledger_id}}","accounts","{{account_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{$string.uuid}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"},{"type":"any","value":"{{account_id}}","key":"account_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0007`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0007`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"49b15f35-40b0-43b8-8d7d-b54c0e48a61d","id":"f5e15a5d-625f-58ae-acfb-b110ad4f899d","type":"customHttp","name":"[0007] Entity Not Found","projectId":699928,"relatedId":1259299,"environmentId":2661460,"blockNumber":56,"httpApiId":546136,"httpApiCaseId":546136,"httpApiName":"[0007] Entity Not Found","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/{account_id}","httpApiMethod":"get","httpApiCaseName":"[0007] Entity Not Found"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":true,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"a4b5eb83-b1e6-5800-9c99-2cf765821669","name":"[0065] Invalid Path","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","1234","ledgers","{{ledger_id}}","accounts","{{account_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"1234","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"},{"type":"any","value":"{{account_id}}","key":"account_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0065`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0065`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"6c2023f6-4e68-457d-aed3-56eaad6863f6","id":"a4b5eb83-b1e6-5800-9c99-2cf765821669","type":"customHttp","name":"[0065] Invalid Path","projectId":699928,"relatedId":1259299,"environmentId":2661460,"blockNumber":55,"httpApiId":546135,"httpApiCaseId":546135,"httpApiName":"[0065] Invalid Path","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/{account_id}","httpApiMethod":"get","httpApiCaseName":"[0065] Invalid Path"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":true,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"b7aaa527-b814-56f1-a15d-f7b99e2ce1f2","type":"group","metaInfo":{"id":"b7aaa527-b814-56f1-a15d-f7b99e2ce1f2","type":"group","scopeType":"end","scopeStartId":"d5eed59b-3623-5e4d-b77f-6766db3c0f45"}},{"id":"bea4b721-876f-5d43-a564-0be4c76e638d","type":"group","metaInfo":{"id":"bea4b721-876f-5d43-a564-0be4c76e638d","type":"group","scopeType":"start","scopeEndId":"af0ac66b-a8d2-56a2-8360-7f6bcd9fb146","name":"Account - Retrieve by Alias"}},{"id":"090d43bd-85ea-5e4a-8d56-16338b3d8d99","name":"[Success] Retrieve an Account by Alias","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","accounts","alias","test:001:brl"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"},{"type":"any","value":"test:001:brl","key":"alias"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"8a0f716f-f594-45a8-8e49-3cc023535474","id":"090d43bd-85ea-5e4a-8d56-16338b3d8d99","type":"customHttp","name":"[Success] Retrieve an Account by Alias","projectId":699928,"relatedId":1259299,"environmentId":2661460,"blockNumber":54,"httpApiId":546134,"httpApiCaseId":546134,"httpApiName":"[Success] Retrieve an Account by Alias","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/alias/{alias}","httpApiMethod":"get","httpApiCaseName":"[Success] Retrieve an Account by Alias"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":true,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"ac04f03c-c08e-5e1c-a39e-83ceab23b2fe","name":"[0065] Invalid Path","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","1234","ledgers","{{ledger_id}}","accounts","alias","test:001:brl"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"1234","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"},{"type":"any","value":"test:001:brl","key":"alias"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0065`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0065`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"cd6c53da-da16-4e07-a4b3-7f8308c7ccc3","id":"ac04f03c-c08e-5e1c-a39e-83ceab23b2fe","type":"customHttp","name":"[0065] Invalid Path","projectId":699928,"relatedId":1259299,"environmentId":2661460,"blockNumber":53,"httpApiId":546133,"httpApiCaseId":546133,"httpApiName":"[0065] Invalid Path","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/alias/{alias}","httpApiMethod":"get","httpApiCaseName":"[0065] Invalid Path"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":true,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"8b6b6690-c437-5e3d-83cf-bd4a53bc25d5","name":"[0085] Alias Not Found","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","accounts","alias","test:999:brl"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"},{"type":"any","value":"test:999:brl","key":"alias"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0085`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0085`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"362a72e2-a3f5-465c-9294-0833fa301f4e","id":"8b6b6690-c437-5e3d-83cf-bd4a53bc25d5","type":"customHttp","name":"[0085] Alias Not Found","projectId":699928,"relatedId":1259299,"environmentId":2661460,"blockNumber":52,"httpApiId":546132,"httpApiCaseId":546132,"httpApiName":"[0085] Alias Not Found","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/alias/{alias}","httpApiMethod":"get","httpApiCaseName":"[0085] Alias Not Found"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":true,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"af0ac66b-a8d2-56a2-8360-7f6bcd9fb146","type":"group","metaInfo":{"id":"af0ac66b-a8d2-56a2-8360-7f6bcd9fb146","type":"group","scopeType":"end","scopeStartId":"bea4b721-876f-5d43-a564-0be4c76e638d"}},{"id":"77ff5748-5f27-540d-bbb6-fcefe4b6d458","type":"group","metaInfo":{"id":"77ff5748-5f27-540d-bbb6-fcefe4b6d458","type":"group","scopeType":"start","scopeEndId":"76502e92-ec0e-5cf7-8514-34af79ddc53b","name":"Account - Update"}},{"id":"fd5afa9a-9dec-5681-969f-341a0fce9949","name":"[Success] Update an Account","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","accounts","{{account_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"},{"type":"any","value":"{{account_id}}","key":"account_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"PATCH","body":{"mode":"raw","raw":"{\n    \"name\": \"Brazilian Real Account\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"Account Created\"\n    },\n    \"metadata\": {}\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{}}},"required":["name","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"ee38e041-67e7-45a5-9fd2-4bf88d98ec0e","id":"fd5afa9a-9dec-5681-969f-341a0fce9949","type":"customHttp","name":"[Success] Update an Account","projectId":699928,"relatedId":1259299,"environmentId":2661460,"blockNumber":51,"httpApiId":546131,"httpApiCaseId":546131,"httpApiName":"[Success] Update an Account","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/{account_id}","httpApiMethod":"patch","httpApiCaseName":"[Success] Update an Account"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"dcfd4cc7-6d9c-5fc5-9c66-20f69100fdbf","name":"[0067] Metadata Nesting","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","accounts","{{account_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"},{"type":"any","value":"{{account_id}}","key":"account_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"PATCH","body":{"mode":"raw","raw":"{\n    \"name\": \"Brazilian Real Account\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"Account Created\"\n    },\n    \"metadata\": {\n        \"key\": {\n            \"new_key\": \"new_value\" \n        }\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0067`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0067`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"key":{"type":"object","properties":{"new_key":{"type":"string"}},"required":["new_key"]}},"required":["key"]}},"required":["name","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"fe14a1b7-6341-4d62-9772-fcb7898d6781","id":"dcfd4cc7-6d9c-5fc5-9c66-20f69100fdbf","type":"customHttp","name":"[0067] Metadata Nesting","projectId":699928,"relatedId":1259299,"environmentId":2661460,"blockNumber":50,"httpApiId":546130,"httpApiCaseId":546130,"httpApiName":"[0067] Metadata Nesting","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/{account_id}","httpApiMethod":"patch","httpApiCaseName":"[0067] Metadata Nesting"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"d0312566-22c6-5afd-a56e-808ed7ff4918","name":"[0007] Entity Not Found","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{$string.uuid}}","ledgers","{{ledger_id}}","accounts","{{account_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{$string.uuid}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"},{"type":"any","value":"{{account_id}}","key":"account_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"PATCH","body":{"mode":"raw","raw":"{\n    \"name\": \"Brazilian Real Account\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"Account Created\"\n    },\n    \"metadata\": {\n        \"key\": \"value\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0007`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0007`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"key":{"type":"string"}},"required":["key"]}},"required":["name","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"58f5594c-05c7-4fb9-97f9-b8a2803e6c96","id":"d0312566-22c6-5afd-a56e-808ed7ff4918","type":"customHttp","name":"[0007] Entity Not Found","projectId":699928,"relatedId":1259299,"environmentId":2661460,"blockNumber":49,"httpApiId":546129,"httpApiCaseId":546129,"httpApiName":"[0007] Entity Not Found","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/{account_id}","httpApiMethod":"patch","httpApiCaseName":"[0007] Entity Not Found"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"2d9f1014-d18b-5edb-bc51-ee86bfaff29c","name":"[0065] Invalid Path","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","1234","ledgers","{{ledger_id}}","accounts","{{account_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"1234","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"},{"type":"any","value":"{{account_id}}","key":"account_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"PATCH","body":{"mode":"raw","raw":"{\n    \"name\": \"Brazilian Real Account\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"Account Created\"\n    },\n    \"metadata\": {\n        \"key\": \"value\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0065`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0065`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"key":{"type":"string"}},"required":["key"]}},"required":["name","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"bcf56e94-e249-4df8-910a-78aded8655d9","id":"2d9f1014-d18b-5edb-bc51-ee86bfaff29c","type":"customHttp","name":"[0065] Invalid Path","projectId":699928,"relatedId":1259299,"environmentId":2661460,"blockNumber":48,"httpApiId":546128,"httpApiCaseId":546128,"httpApiName":"[0065] Invalid Path","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/{account_id}","httpApiMethod":"patch","httpApiCaseName":"[0065] Invalid Path"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"f405c77b-9474-5e49-a10b-c4d61031b0b9","name":"[0047] Bad Request","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","accounts","{{account_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"},{"type":"any","value":"{{account_id}}","key":"account_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"PATCH","body":{"mode":"raw","raw":"{\n    \"name\": \"{{$string.alphanumeric(min=300,max=300)}}\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"Account Created\"\n    },\n    \"metadata\": {\n        \"key\": \"value\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0047`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0047`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"key":{"type":"string"}},"required":["key"]}},"required":["name","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"8fb5f9bd-d372-4b95-9bd1-c8d7ef333ec4","id":"f405c77b-9474-5e49-a10b-c4d61031b0b9","type":"customHttp","name":"[0047] Bad Request","projectId":699928,"relatedId":1259299,"environmentId":2661460,"blockNumber":47,"httpApiId":546127,"httpApiCaseId":546127,"httpApiName":"[0047] Bad Request","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/{account_id}","httpApiMethod":"patch","httpApiCaseName":"[0047] Bad Request"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"e4eced31-5a27-523f-9716-7a35c2dbcb2c","name":"[0053] Unexpected Field","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","accounts","{{account_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"},{"type":"any","value":"{{account_id}}","key":"account_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"PATCH","body":{"mode":"raw","raw":"{\n    \"name\": \"New Account\",\n    \"capybara\": \"Capybara on the track\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"Account Created\"\n    },\n    \"metadata\": {\n        \"key\": \"value\"\n    }\n}","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0053`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0053`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{"type":"object","properties":{"name":{"type":"string"},"capybara":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"required":["code","description"]},"metadata":{"type":"object","properties":{"key":{"type":"string"}},"required":["key"]}},"required":["name","capybara","status","metadata"]}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"1394fcdf-6246-4935-9504-a9563d154ba4","id":"e4eced31-5a27-523f-9716-7a35c2dbcb2c","type":"customHttp","name":"[0053] Unexpected Field","projectId":699928,"relatedId":1259299,"environmentId":2661460,"blockNumber":46,"httpApiId":546126,"httpApiCaseId":546126,"httpApiName":"[0053] Unexpected Field","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/{account_id}","httpApiMethod":"patch","httpApiCaseName":"[0053] Unexpected Field"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"76502e92-ec0e-5cf7-8514-34af79ddc53b","type":"group","metaInfo":{"id":"76502e92-ec0e-5cf7-8514-34af79ddc53b","type":"group","scopeType":"end","scopeStartId":"77ff5748-5f27-540d-bbb6-fcefe4b6d458"}},{"id":"ab15fe22-eb1f-51a1-857e-8809b984f6fe","type":"group","metaInfo":{"id":"ab15fe22-eb1f-51a1-857e-8809b984f6fe","type":"group","scopeType":"start","scopeEndId":"74bd9c56-75a8-5a96-a54c-426b51ee9e28","name":"Account - Delete"}},{"id":"9572a1db-5be4-5de5-a80f-c29a0d2fba6f","name":"[0007] Entity Not Found","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{$string.uuid}}","ledgers","{{$string.uuid}}","accounts","{{$string.uuid}}"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{$string.uuid}}","key":"organization_id"},{"type":"any","value":"{{$string.uuid}}","key":"ledger_id"},{"type":"any","value":"{{$string.uuid}}","key":"account_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"DELETE","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0007`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0007`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"2a3fdf89-ffa7-43ad-b729-e17f27230f90","id":"9572a1db-5be4-5de5-a80f-c29a0d2fba6f","type":"customHttp","name":"[0007] Entity Not Found","projectId":699928,"relatedId":1259299,"environmentId":2661460,"blockNumber":45,"httpApiId":546125,"httpApiCaseId":546125,"httpApiName":"[0007] Entity Not Found","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/{account_id}","httpApiMethod":"delete","httpApiCaseName":"[0007] Entity Not Found"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"2b359c23-339d-5ac9-927d-0101b55ecfe1","name":"[0065] Invalid Path ","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","1234","ledgers","{{$string.uuid}}","accounts","{{$string.uuid}}"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"1234","key":"organization_id"},{"type":"any","value":"{{$string.uuid}}","key":"ledger_id"},{"type":"any","value":"{{$string.uuid}}","key":"account_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"DELETE","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Error code is 0065`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0065`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"737f4b38-9616-454e-8386-ee11d805b1b3","id":"2b359c23-339d-5ac9-927d-0101b55ecfe1","type":"customHttp","name":"[0065] Invalid Path ","projectId":699928,"relatedId":1259299,"environmentId":2661460,"blockNumber":44,"httpApiId":546124,"httpApiCaseId":546124,"httpApiName":"[0065] Invalid Path ","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/{account_id}","httpApiMethod":"delete","httpApiCaseName":"[0065] Invalid Path "},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"94567058-07be-5c4a-95e7-2d9c77f4d7cb","name":"Delete an Account","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","accounts","{{account_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"type":"any","value":"{{organization_id}}","key":"organization_id"},{"type":"any","value":"{{ledger_id}}","key":"ledger_id"},{"type":"any","value":"{{account_id}}","key":"account_id"}]},"header":[{"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"DELETE","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[],"responseDefinition":{"validateDeletedResponse":false},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"8acf571a-d2c7-4dfc-909e-190c5b37bc5f","id":"94567058-07be-5c4a-95e7-2d9c77f4d7cb","type":"customHttp","name":"Delete an Account","projectId":699928,"relatedId":1259299,"environmentId":2661460,"blockNumber":43,"httpApiId":546123,"httpApiCaseId":546123,"httpApiName":"Delete an Account","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/{account_id}","httpApiMethod":"delete","httpApiCaseName":"Delete an Account"},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"74bd9c56-75a8-5a96-a54c-426b51ee9e28","type":"group","metaInfo":{"id":"74bd9c56-75a8-5a96-a54c-426b51ee9e28","type":"group","scopeType":"end","scopeStartId":"ab15fe22-eb1f-51a1-857e-8809b984f6fe"}},{"id":"75b487d2-6823-58fc-aa69-a772e332763d","type":"group","metaInfo":{"id":"75b487d2-6823-58fc-aa69-a772e332763d","type":"group","scopeType":"start","scopeEndId":"79e1abc5-eeee-5ef7-817c-1877345c7467","name":"Setup - Create Accounts"}},{"id":"7605d67b-cef4-55f4-87e8-53af997888e3","name":"Create an Account 1","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","accounts"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","baseUrl":"http://127.0.0.1:3000","body":{"mode":"raw","raw":"{\n    \"assetCode\": \"BRL\",\n    \"name\": \"Brazilian Real Account 1\",\n    \"alias\": \"@account1_rt_BRL\",\n    \"type\": \"deposit\"\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`account_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable account_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}}],"responseDefinition":{"id":13917153,"name":"Created","code":201,"contentType":"json","jsonSchema":{"type":"object","properties":{},"x-apidog-orders":["01JMMYP7JBDHYGQPRQ6RF5C6MN"],"required":[],"x-apidog-refs":{"01JMMYP7JBDHYGQPRQ6RF5C6MN":{"$ref":"#/definitions/5299913"}}},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"3672507":{"type":"object","properties":{"assetCode":{"type":"string","description":"The code used to refer to the Asset. If the Asset is a currency (type = currency), the code must follow the ISO 4217 values.","x-apidog-mock":"{{$finance.currencyCode}}"},"name":{"type":"string","description":"The name of the Account.","maxLength":256},"alias":{"type":"string","description":"An alternative name or identifier associated with the Account.","x-apidog-mock":"@accountAlias"},"type":{"type":"string","description":"The type of account."},"parentAccountId":{"type":["string","null"],"x-apidog-mock":"{{$string.uuid}}","format":"uuid","description":"The unique identifier of the Parent Account. If the account does not have a parent account, this field will be null."},"entityId":{"type":["string","null"],"description":"The unique identifier of the Entity responsible for the Account.","x-apidog-mock":"{{$string.uuid}}"},"portfolioId":{"type":["string","null"],"description":"The unique identifier of the associated Portfolio.","x-apidog-mock":"{{$string.uuid}}","format":"uuid"},"segmentId":{"type":["string","null"],"description":"The unique identifier of the Segment which is used to cluster customer accounts.","x-apidog-mock":"{{$string.uuid}}","format":"uuid"}},"required":["assetCode","type","alias"],"x-apidog-orders":["assetCode","name","alias","type","parentAccountId","entityId","portfolioId","segmentId","01JMWR9599FT29ESEDJ701PJHA","01JMWR9ETVQ01BRRDFBY1ZS1V9"],"x-apidog-refs":{"01JMWR9599FT29ESEDJ701PJHA":{"$ref":"#/definitions/5295306"},"01JMWR9ETVQ01BRRDFBY1ZS1V9":{"$ref":"#/definitions/5295307"}},"title":"account.request.v3.x.x","name":"account.request.v3.x.x","moduleId":760453},"5295306":{"type":"object","properties":{"status":{"type":"object","properties":{"description":{"type":["string","null"],"description":"The description of the status. Max length: 256"},"code":{"type":"string","description":"The name of the status. Max length:100"}},"x-apidog-orders":["description","code"],"description":"An object containing information about the status."}},"x-apidog-orders":["status"],"title":"status","name":"status","moduleId":760453},"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5299913":{"type":"object","properties":{"id":{"type":"string","description":"The unique reference of the Account.","format":"uuid"}},"x-apidog-orders":["id","01JMJC8Z3Z9F3WMSYBQ2DXKQ7W","01JMCZTG16JSTRBDM44SXTM6E5","01JMCZV03J6A4BH9SMCY4PJ3VC"],"required":["id"],"x-apidog-refs":{"01JMCZTG16JSTRBDM44SXTM6E5":{"$ref":"#/definitions/3672507","x-apidog-overrides":{}},"01JMCZV03J6A4BH9SMCY4PJ3VC":{"$ref":"#/definitions/5299902"},"01JMJC8Z3Z9F3WMSYBQ2DXKQ7W":{"$ref":"#/definitions/5365047"}},"title":"account.response.v3.x.x","name":"account.response.v3.x.x","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453}}},"requestDefinition":{"jsonSchema":{"type":"object","properties":{},"x-apidog-orders":["01JG1HZTTTT82BK2361958GEZ4"],"required":[],"x-apidog-refs":{"01JG1HZTTTT82BK2361958GEZ4":{"$ref":"#/definitions/3672507"}}}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"cd5efaf6-9c3a-4998-8d76-255240b51a54","id":"7605d67b-cef4-55f4-87e8-53af997888e3","type":"http","name":"Create an Account 1","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":11,"httpApiId":11235266,"httpApiCaseId":26069841,"httpApiName":"Create an Account","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts","httpApiMethod":"post","httpApiCaseName":"Create an Account","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"4ae57e45-9480-551b-81d2-378f39b32716","name":"Create an Account 2","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","accounts"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","baseUrl":"http://127.0.0.1:3000","body":{"mode":"raw","raw":"{\n    \"assetCode\": \"BRL\",\n    \"name\": \"Brazilian Real Account 2\",\n    \"alias\": \"@account2_rt_BRL\",\n    \"type\": \"deposit\"\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`account_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable account_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}}],"responseDefinition":{"id":13917153,"name":"Created","code":201,"contentType":"json","jsonSchema":{"type":"object","properties":{},"x-apidog-orders":["01JMMYP7JBDHYGQPRQ6RF5C6MN"],"required":[],"x-apidog-refs":{"01JMMYP7JBDHYGQPRQ6RF5C6MN":{"$ref":"#/definitions/5299913"}}},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"3672507":{"type":"object","properties":{"assetCode":{"type":"string","description":"The code used to refer to the Asset. If the Asset is a currency (type = currency), the code must follow the ISO 4217 values.","x-apidog-mock":"{{$finance.currencyCode}}"},"name":{"type":"string","description":"The name of the Account.","maxLength":256},"alias":{"type":"string","description":"An alternative name or identifier associated with the Account.","x-apidog-mock":"@accountAlias"},"type":{"type":"string","description":"The type of account."},"parentAccountId":{"type":["string","null"],"x-apidog-mock":"{{$string.uuid}}","format":"uuid","description":"The unique identifier of the Parent Account. If the account does not have a parent account, this field will be null."},"entityId":{"type":["string","null"],"description":"The unique identifier of the Entity responsible for the Account.","x-apidog-mock":"{{$string.uuid}}"},"portfolioId":{"type":["string","null"],"description":"The unique identifier of the associated Portfolio.","x-apidog-mock":"{{$string.uuid}}","format":"uuid"},"segmentId":{"type":["string","null"],"description":"The unique identifier of the Segment which is used to cluster customer accounts.","x-apidog-mock":"{{$string.uuid}}","format":"uuid"}},"required":["assetCode","type","alias"],"x-apidog-orders":["assetCode","name","alias","type","parentAccountId","entityId","portfolioId","segmentId","01JMWR9599FT29ESEDJ701PJHA","01JMWR9ETVQ01BRRDFBY1ZS1V9"],"x-apidog-refs":{"01JMWR9599FT29ESEDJ701PJHA":{"$ref":"#/definitions/5295306"},"01JMWR9ETVQ01BRRDFBY1ZS1V9":{"$ref":"#/definitions/5295307"}},"title":"account.request.v3.x.x","name":"account.request.v3.x.x","moduleId":760453},"5295306":{"type":"object","properties":{"status":{"type":"object","properties":{"description":{"type":["string","null"],"description":"The description of the status. Max length: 256"},"code":{"type":"string","description":"The name of the status. Max length:100"}},"x-apidog-orders":["description","code"],"description":"An object containing information about the status."}},"x-apidog-orders":["status"],"title":"status","name":"status","moduleId":760453},"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5299913":{"type":"object","properties":{"id":{"type":"string","description":"The unique reference of the Account.","format":"uuid"}},"x-apidog-orders":["id","01JMJC8Z3Z9F3WMSYBQ2DXKQ7W","01JMCZTG16JSTRBDM44SXTM6E5","01JMCZV03J6A4BH9SMCY4PJ3VC"],"required":["id"],"x-apidog-refs":{"01JMCZTG16JSTRBDM44SXTM6E5":{"$ref":"#/definitions/3672507","x-apidog-overrides":{}},"01JMCZV03J6A4BH9SMCY4PJ3VC":{"$ref":"#/definitions/5299902"},"01JMJC8Z3Z9F3WMSYBQ2DXKQ7W":{"$ref":"#/definitions/5365047"}},"title":"account.response.v3.x.x","name":"account.response.v3.x.x","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453}}},"requestDefinition":{"jsonSchema":{"type":"object","properties":{},"x-apidog-orders":["01JG1HZTTTT82BK2361958GEZ4"],"required":[],"x-apidog-refs":{"01JG1HZTTTT82BK2361958GEZ4":{"$ref":"#/definitions/3672507"}}}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"a48191ed-9ebf-4a43-8a31-cb100a07cdcd","id":"4ae57e45-9480-551b-81d2-378f39b32716","type":"http","name":"Create an Account 2","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":12,"httpApiId":11235266,"httpApiCaseId":26069842,"httpApiName":"Create an Account","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts","httpApiMethod":"post","httpApiCaseName":"Create an Account","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"67aa453c-4c12-58bd-b9fa-e87a51e24cc6","name":"Create an Account 3","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","accounts"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","baseUrl":"http://127.0.0.1:3000","body":{"mode":"raw","raw":"{\n    \"assetCode\": \"BRL\",\n    \"name\": \"Brazilian Real Account 3\",\n    \"alias\": \"@account3_rt_BRL\",\n    \"type\": \"deposit\"\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`account_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable account_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}}],"responseDefinition":{"id":13917153,"name":"Created","code":201,"contentType":"json","jsonSchema":{"type":"object","properties":{},"x-apidog-orders":["01JMMYP7JBDHYGQPRQ6RF5C6MN"],"required":[],"x-apidog-refs":{"01JMMYP7JBDHYGQPRQ6RF5C6MN":{"$ref":"#/definitions/5299913"}}},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"3672507":{"type":"object","properties":{"assetCode":{"type":"string","description":"The code used to refer to the Asset. If the Asset is a currency (type = currency), the code must follow the ISO 4217 values.","x-apidog-mock":"{{$finance.currencyCode}}"},"name":{"type":"string","description":"The name of the Account.","maxLength":256},"alias":{"type":"string","description":"An alternative name or identifier associated with the Account.","x-apidog-mock":"@accountAlias"},"type":{"type":"string","description":"The type of account."},"parentAccountId":{"type":["string","null"],"x-apidog-mock":"{{$string.uuid}}","format":"uuid","description":"The unique identifier of the Parent Account. If the account does not have a parent account, this field will be null."},"entityId":{"type":["string","null"],"description":"The unique identifier of the Entity responsible for the Account.","x-apidog-mock":"{{$string.uuid}}"},"portfolioId":{"type":["string","null"],"description":"The unique identifier of the associated Portfolio.","x-apidog-mock":"{{$string.uuid}}","format":"uuid"},"segmentId":{"type":["string","null"],"description":"The unique identifier of the Segment which is used to cluster customer accounts.","x-apidog-mock":"{{$string.uuid}}","format":"uuid"}},"required":["assetCode","type","alias"],"x-apidog-orders":["assetCode","name","alias","type","parentAccountId","entityId","portfolioId","segmentId","01JMWR9599FT29ESEDJ701PJHA","01JMWR9ETVQ01BRRDFBY1ZS1V9"],"x-apidog-refs":{"01JMWR9599FT29ESEDJ701PJHA":{"$ref":"#/definitions/5295306"},"01JMWR9ETVQ01BRRDFBY1ZS1V9":{"$ref":"#/definitions/5295307"}},"title":"account.request.v3.x.x","name":"account.request.v3.x.x","moduleId":760453},"5295306":{"type":"object","properties":{"status":{"type":"object","properties":{"description":{"type":["string","null"],"description":"The description of the status. Max length: 256"},"code":{"type":"string","description":"The name of the status. Max length:100"}},"x-apidog-orders":["description","code"],"description":"An object containing information about the status."}},"x-apidog-orders":["status"],"title":"status","name":"status","moduleId":760453},"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5299913":{"type":"object","properties":{"id":{"type":"string","description":"The unique reference of the Account.","format":"uuid"}},"x-apidog-orders":["id","01JMJC8Z3Z9F3WMSYBQ2DXKQ7W","01JMCZTG16JSTRBDM44SXTM6E5","01JMCZV03J6A4BH9SMCY4PJ3VC"],"required":["id"],"x-apidog-refs":{"01JMCZTG16JSTRBDM44SXTM6E5":{"$ref":"#/definitions/3672507","x-apidog-overrides":{}},"01JMCZV03J6A4BH9SMCY4PJ3VC":{"$ref":"#/definitions/5299902"},"01JMJC8Z3Z9F3WMSYBQ2DXKQ7W":{"$ref":"#/definitions/5365047"}},"title":"account.response.v3.x.x","name":"account.response.v3.x.x","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453}}},"requestDefinition":{"jsonSchema":{"type":"object","properties":{},"x-apidog-orders":["01JG1HZTTTT82BK2361958GEZ4"],"required":[],"x-apidog-refs":{"01JG1HZTTTT82BK2361958GEZ4":{"$ref":"#/definitions/3672507"}}}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"80a17381-10c9-48e7-94d1-f189b91d1201","id":"67aa453c-4c12-58bd-b9fa-e87a51e24cc6","type":"http","name":"Create an Account 3","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":13,"httpApiId":11235266,"httpApiCaseId":26069843,"httpApiName":"Create an Account","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts","httpApiMethod":"post","httpApiCaseName":"Create an Account","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"6651b841-89ee-5047-ae99-ac8b11f3ee33","name":"Create an Account 4","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","accounts"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","baseUrl":"http://127.0.0.1:3000","body":{"mode":"raw","raw":"{\n    \"assetCode\": \"BRL\",\n    \"name\": \"Brazilian Real Account 4\",\n    \"alias\": \"@account4_rt_BRL\",\n    \"type\": \"deposit\"\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`account_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable account_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}}],"responseDefinition":{"id":13917153,"name":"Created","code":201,"contentType":"json","jsonSchema":{"type":"object","properties":{},"x-apidog-orders":["01JMMYP7JBDHYGQPRQ6RF5C6MN"],"required":[],"x-apidog-refs":{"01JMMYP7JBDHYGQPRQ6RF5C6MN":{"$ref":"#/definitions/5299913"}}},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"3672507":{"type":"object","properties":{"assetCode":{"type":"string","description":"The code used to refer to the Asset. If the Asset is a currency (type = currency), the code must follow the ISO 4217 values.","x-apidog-mock":"{{$finance.currencyCode}}"},"name":{"type":"string","description":"The name of the Account.","maxLength":256},"alias":{"type":"string","description":"An alternative name or identifier associated with the Account.","x-apidog-mock":"@accountAlias"},"type":{"type":"string","description":"The type of account."},"parentAccountId":{"type":["string","null"],"x-apidog-mock":"{{$string.uuid}}","format":"uuid","description":"The unique identifier of the Parent Account. If the account does not have a parent account, this field will be null."},"entityId":{"type":["string","null"],"description":"The unique identifier of the Entity responsible for the Account.","x-apidog-mock":"{{$string.uuid}}"},"portfolioId":{"type":["string","null"],"description":"The unique identifier of the associated Portfolio.","x-apidog-mock":"{{$string.uuid}}","format":"uuid"},"segmentId":{"type":["string","null"],"description":"The unique identifier of the Segment which is used to cluster customer accounts.","x-apidog-mock":"{{$string.uuid}}","format":"uuid"}},"required":["assetCode","type","alias"],"x-apidog-orders":["assetCode","name","alias","type","parentAccountId","entityId","portfolioId","segmentId","01JMWR9599FT29ESEDJ701PJHA","01JMWR9ETVQ01BRRDFBY1ZS1V9"],"x-apidog-refs":{"01JMWR9599FT29ESEDJ701PJHA":{"$ref":"#/definitions/5295306"},"01JMWR9ETVQ01BRRDFBY1ZS1V9":{"$ref":"#/definitions/5295307"}},"title":"account.request.v3.x.x","name":"account.request.v3.x.x","moduleId":760453},"5295306":{"type":"object","properties":{"status":{"type":"object","properties":{"description":{"type":["string","null"],"description":"The description of the status. Max length: 256"},"code":{"type":"string","description":"The name of the status. Max length:100"}},"x-apidog-orders":["description","code"],"description":"An object containing information about the status."}},"x-apidog-orders":["status"],"title":"status","name":"status","moduleId":760453},"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5299913":{"type":"object","properties":{"id":{"type":"string","description":"The unique reference of the Account.","format":"uuid"}},"x-apidog-orders":["id","01JMJC8Z3Z9F3WMSYBQ2DXKQ7W","01JMCZTG16JSTRBDM44SXTM6E5","01JMCZV03J6A4BH9SMCY4PJ3VC"],"required":["id"],"x-apidog-refs":{"01JMCZTG16JSTRBDM44SXTM6E5":{"$ref":"#/definitions/3672507","x-apidog-overrides":{}},"01JMCZV03J6A4BH9SMCY4PJ3VC":{"$ref":"#/definitions/5299902"},"01JMJC8Z3Z9F3WMSYBQ2DXKQ7W":{"$ref":"#/definitions/5365047"}},"title":"account.response.v3.x.x","name":"account.response.v3.x.x","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453}}},"requestDefinition":{"jsonSchema":{"type":"object","properties":{},"x-apidog-orders":["01JG1HZTTTT82BK2361958GEZ4"],"required":[],"x-apidog-refs":{"01JG1HZTTTT82BK2361958GEZ4":{"$ref":"#/definitions/3672507"}}}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"b0d3a7f3-939d-4c03-99b0-52e184d31e06","id":"6651b841-89ee-5047-ae99-ac8b11f3ee33","type":"http","name":"Create an Account 4","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":61,"httpApiId":11235266,"httpApiCaseId":26176800,"httpApiName":"Create an Account","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts","httpApiMethod":"post","httpApiCaseName":"Create an Account","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"79e1abc5-eeee-5ef7-817c-1877345c7467","type":"group","metaInfo":{"id":"79e1abc5-eeee-5ef7-817c-1877345c7467","type":"group","scopeType":"end","scopeStartId":"75b487d2-6823-58fc-aa69-a772e332763d"}},{"id":"fdc7cd0c-4e2f-53f1-86dc-64d8f0093bd2","type":"group","metaInfo":{"id":"fdc7cd0c-4e2f-53f1-86dc-64d8f0093bd2","type":"group","scopeType":"start","scopeEndId":"5f5285a2-fd52-5668-a8f7-e1235367c8c2","name":"Inflow Transactions"}},{"id":"639cfafc-ee95-5248-aec7-f5e0dfdd55e8","name":"Create a JSON Transaction - Amount ","request":{"url":{"protocol":"http","port":"3001","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","transactions","json"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-Idempotency","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-TTL","value":"{{$number.int(min=0,max=3600)}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","baseUrl":"http://127.0.0.1:3001","body":{"mode":"raw","raw":"{\n    \"description\": \"regression test\",\n    \"metadata\": {\n        \"key\": \"value\"\n    },\n    \"send\": {\n        \"asset\": \"BRL\",\n        \"value\": \"1000.00\",\n        \"source\": {\n            \"from\": [\n                {\n                    \"accountAlias\": \"@external/BRL\",\n                    \"amount\": {\n                        \"asset\": \"BRL\",\n                        \"value\": \"1000.00\"\n                    },\n                    \"description\": \"regression test\",\n                    \"metadata\": {\n                        \"key\": \"value\"\n                    }\n                }\n            ]\n        },\n        \"distribute\": {\n            \"to\": [\n                {\n                    \"accountAlias\": \"@account1_rt_BRL\",\n                    \"amount\": {\n                        \"asset\": \"BRL\",\n                        \"value\": \"1000.00\"\n                    },\n                    \"description\": \"regression test\",\n                    \"metadata\": {\n                        \"key\": \"value\"\n                    }\n                }\n            ]\n        }\n    }\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`transaction_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable transaction_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}}],"responseDefinition":{"id":24931433,"name":"Created","code":201,"contentType":"json","jsonSchema":{"$ref":"#/definitions/8641358"},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453},"7325329":{"type":"object","properties":{"available":{"type":"string","x-apidog-mock":"100.00"},"onHold":{"type":"string","x-apidog-mock":"0"}},"x-apidog-orders":["available","onHold"],"required":["available","onHold"],"title":"balance.values.v3.x.x","name":"balance.values.v3.x.x","moduleId":760453},"8641347":{"type":"object","properties":{"id":{"type":"string","description":"The unique identifier of the Operation.","format":"uuid"},"description":{"type":"string","description":"Description of the operation."},"transactionId":{"type":"string","format":"uuid","description":"The unique identifier of the Transaction."},"type":{"type":"string","enum":["CREDIT","DEBIT","ON_HOLD","RELEASE"],"x-apidog-enum":[{"value":"CREDIT","name":"Credit Operation","description":""},{"value":"DEBIT","name":"Debit Operation","description":""},{"value":"ON_HOLD","name":"On Hold Operation","description":"Balance reservation operation, moving the amount to the on_hold balance."},{"value":"RELEASE","name":"Release Operation","description":"Release operation of the reserved balance, returning it to the available balance"}],"description":"The type of the operation.\n`CREDIT` `DEBIT` `ON_HOLD` `RELEASE`"},"assetCode":{"type":"string","description":"The code of the asset used in the operation."},"chartOfAccounts":{"type":"string","description":"The name of the Chart-of-Accounts that the operation belongs to."},"amount":{"type":"object","properties":{"value":{"type":"string","x-apidog-mock":"100.00"}},"x-apidog-orders":["value"],"x-apidog-refs":{},"required":["value"],"description":"An object containing information about the amount used in the operation."},"balance":{"type":"object","properties":{},"x-apidog-orders":["01JXFMCY8985B99D24K818AW5N"],"x-apidog-refs":{"01JXFMCY8985B99D24K818AW5N":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance before the operation."},"balanceAfter":{"type":"object","properties":{},"x-apidog-orders":["01JXFMDFCFGMBQMPBXMDDXN41A"],"x-apidog-refs":{"01JXFMDFCFGMBQMPBXMDDXN41A":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance after the operation."},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":["string","null"]}},"x-apidog-orders":["code","description"],"required":["code","description"],"description":"The transaction status."},"accountId":{"type":"string","format":"uuid","description":"The unique identifier of the Account."},"accountAlias":{"type":"string","description":"The alias for the account used in the operation."},"balanceId":{"type":"string","description":"The unique identifier of the Balance."},"route":{"type":"string","description":"Unique identifier of the operation route assigned to this specific leg of the transaction. This must match the corresponding source and destination configuration, determining how value is moved between accounts within the transaction route."},"balanceAffected":{"type":"boolean","description":"Indicates whether the operation had an impact on the account balance."},"balanceKey":{"type":"string","description":"The key identifier of the Balance"}},"x-apidog-orders":["id","transactionId","01JN71H2XZAMF6F0KY5QH2XTD6","accountId","accountAlias","balanceId","balanceKey","description","type","assetCode","chartOfAccounts","route","amount","balance","balanceAfter","status","balanceAffected","01JN718VEVJGSYKGXJ4PYFJ64Z","01JN718VKY0WWKT5F4317HNQF5"],"required":["id","description","transactionId","type","assetCode","chartOfAccounts","amount","balance","balanceAfter","status","accountId","accountAlias","balanceId","route","balanceAffected","balanceKey"],"x-apidog-refs":{"01JN718VEVJGSYKGXJ4PYFJ64Z":{"$ref":"#/definitions/5299902"},"01JN718VKY0WWKT5F4317HNQF5":{"$ref":"#/definitions/5295307"},"01JN71H2XZAMF6F0KY5QH2XTD6":{"$ref":"#/definitions/5365047"}},"title":"operation.response.v3.1.x","name":"operation.response.v3.1.x","moduleId":760453},"8641358":{"type":"object","properties":{"id":{"type":"string","description":"ID","format":"uuid"},"description":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"x-apidog-orders":["code","description"],"required":["code","description"]},"amount":{"type":"string"},"assetCode":{"type":"string"},"chartOfAccountsGroupName":{"type":"string"},"source":{"type":"array","items":{"type":"string"}},"destination":{"type":"array","items":{"type":"string"}},"operations":{"type":"array","items":{"$ref":"#/definitions/8641347"}},"route":{"type":"string"}},"x-apidog-orders":["id","01JN71ZQSPF1SPSM597SH2N81C","description","route","status","amount","assetCode","chartOfAccountsGroupName","source","destination","01JN72166CQABKZ83FTCMTEQ2S","operations","01JN7275ZNTQQN1PN8XN5ZHHQF"],"required":["id","description","status","amount","assetCode","chartOfAccountsGroupName","source","destination","operations"],"x-apidog-refs":{"01JN71ZQSPF1SPSM597SH2N81C":{"$ref":"#/definitions/5365047"},"01JN72166CQABKZ83FTCMTEQ2S":{"$ref":"#/definitions/5299902"},"01JN7275ZNTQQN1PN8XN5ZHHQF":{"$ref":"#/definitions/5295307"}},"title":"transaction.response.v3.1.x","name":"transaction.response.v3.1.x","moduleId":760453}}},"requestDefinition":{"jsonSchema":{"$ref":"#/definitions/8643885"}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"a492b51a-07fa-414f-855c-ab8c8df86844","id":"639cfafc-ee95-5248-aec7-f5e0dfdd55e8","type":"http","name":"Create a JSON Transaction - Amount ","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":33,"httpApiId":17810516,"httpApiCaseId":26070151,"httpApiName":"Create a JSON Transaction ","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/json","httpApiMethod":"post","httpApiCaseName":"Create a JSON Transaction ","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"0852d03a-5140-5cbf-b6cd-e58aa446cfeb","name":"Create a JSON Transaction - Share ","request":{"url":{"protocol":"http","port":"3001","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","transactions","json"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-Idempotency","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-TTL","value":"{{$number.int(min=0,max=3600)}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","baseUrl":"http://127.0.0.1:3001","body":{"mode":"raw","raw":"{\n    \"description\": \"regression test\",\n    \"metadata\": {\n        \"key\": \"value\"\n    },\n    \"send\": {\n        \"asset\": \"BRL\",\n        \"value\": \"1000.00\",\n        \"source\": {\n            \"from\": [\n                {\n                    \"accountAlias\": \"@external/BRL\",\n                    \"share\": {\n                        \"percentage\": 100\n                    },\n                    \"description\": \"regression test\",\n                    \"metadata\": {\n                        \"key\": \"value\"\n                    }\n                }\n            ]\n        },\n        \"distribute\": {\n            \"to\": [\n                {\n                    \"accountAlias\": \"@account1_rt_BRL\",\n                    \"share\": {\n                        \"percentage\": 100\n                    },\n                    \"description\": \"regression test\",\n                    \"metadata\": {\n                        \"key\": \"value\"\n                    }\n                }\n            ]\n        }\n    }\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`transaction_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable transaction_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}}],"responseDefinition":{"id":24931433,"name":"Created","code":201,"contentType":"json","jsonSchema":{"$ref":"#/definitions/8641358"},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453},"7325329":{"type":"object","properties":{"available":{"type":"string","x-apidog-mock":"100.00"},"onHold":{"type":"string","x-apidog-mock":"0"}},"x-apidog-orders":["available","onHold"],"required":["available","onHold"],"title":"balance.values.v3.x.x","name":"balance.values.v3.x.x","moduleId":760453},"8641347":{"type":"object","properties":{"id":{"type":"string","description":"The unique identifier of the Operation.","format":"uuid"},"description":{"type":"string","description":"Description of the operation."},"transactionId":{"type":"string","format":"uuid","description":"The unique identifier of the Transaction."},"type":{"type":"string","enum":["CREDIT","DEBIT","ON_HOLD","RELEASE"],"x-apidog-enum":[{"value":"CREDIT","name":"Credit Operation","description":""},{"value":"DEBIT","name":"Debit Operation","description":""},{"value":"ON_HOLD","name":"On Hold Operation","description":"Balance reservation operation, moving the amount to the on_hold balance."},{"value":"RELEASE","name":"Release Operation","description":"Release operation of the reserved balance, returning it to the available balance"}],"description":"The type of the operation.\n`CREDIT` `DEBIT` `ON_HOLD` `RELEASE`"},"assetCode":{"type":"string","description":"The code of the asset used in the operation."},"chartOfAccounts":{"type":"string","description":"The name of the Chart-of-Accounts that the operation belongs to."},"amount":{"type":"object","properties":{"value":{"type":"string","x-apidog-mock":"100.00"}},"x-apidog-orders":["value"],"x-apidog-refs":{},"required":["value"],"description":"An object containing information about the amount used in the operation."},"balance":{"type":"object","properties":{},"x-apidog-orders":["01JXFMCY8985B99D24K818AW5N"],"x-apidog-refs":{"01JXFMCY8985B99D24K818AW5N":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance before the operation."},"balanceAfter":{"type":"object","properties":{},"x-apidog-orders":["01JXFMDFCFGMBQMPBXMDDXN41A"],"x-apidog-refs":{"01JXFMDFCFGMBQMPBXMDDXN41A":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance after the operation."},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":["string","null"]}},"x-apidog-orders":["code","description"],"required":["code","description"],"description":"The transaction status."},"accountId":{"type":"string","format":"uuid","description":"The unique identifier of the Account."},"accountAlias":{"type":"string","description":"The alias for the account used in the operation."},"balanceId":{"type":"string","description":"The unique identifier of the Balance."},"route":{"type":"string","description":"Unique identifier of the operation route assigned to this specific leg of the transaction. This must match the corresponding source and destination configuration, determining how value is moved between accounts within the transaction route."},"balanceAffected":{"type":"boolean","description":"Indicates whether the operation had an impact on the account balance."},"balanceKey":{"type":"string","description":"The key identifier of the Balance"}},"x-apidog-orders":["id","transactionId","01JN71H2XZAMF6F0KY5QH2XTD6","accountId","accountAlias","balanceId","balanceKey","description","type","assetCode","chartOfAccounts","route","amount","balance","balanceAfter","status","balanceAffected","01JN718VEVJGSYKGXJ4PYFJ64Z","01JN718VKY0WWKT5F4317HNQF5"],"required":["id","description","transactionId","type","assetCode","chartOfAccounts","amount","balance","balanceAfter","status","accountId","accountAlias","balanceId","route","balanceAffected","balanceKey"],"x-apidog-refs":{"01JN718VEVJGSYKGXJ4PYFJ64Z":{"$ref":"#/definitions/5299902"},"01JN718VKY0WWKT5F4317HNQF5":{"$ref":"#/definitions/5295307"},"01JN71H2XZAMF6F0KY5QH2XTD6":{"$ref":"#/definitions/5365047"}},"title":"operation.response.v3.1.x","name":"operation.response.v3.1.x","moduleId":760453},"8641358":{"type":"object","properties":{"id":{"type":"string","description":"ID","format":"uuid"},"description":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"x-apidog-orders":["code","description"],"required":["code","description"]},"amount":{"type":"string"},"assetCode":{"type":"string"},"chartOfAccountsGroupName":{"type":"string"},"source":{"type":"array","items":{"type":"string"}},"destination":{"type":"array","items":{"type":"string"}},"operations":{"type":"array","items":{"$ref":"#/definitions/8641347"}},"route":{"type":"string"}},"x-apidog-orders":["id","01JN71ZQSPF1SPSM597SH2N81C","description","route","status","amount","assetCode","chartOfAccountsGroupName","source","destination","01JN72166CQABKZ83FTCMTEQ2S","operations","01JN7275ZNTQQN1PN8XN5ZHHQF"],"required":["id","description","status","amount","assetCode","chartOfAccountsGroupName","source","destination","operations"],"x-apidog-refs":{"01JN71ZQSPF1SPSM597SH2N81C":{"$ref":"#/definitions/5365047"},"01JN72166CQABKZ83FTCMTEQ2S":{"$ref":"#/definitions/5299902"},"01JN7275ZNTQQN1PN8XN5ZHHQF":{"$ref":"#/definitions/5295307"}},"title":"transaction.response.v3.1.x","name":"transaction.response.v3.1.x","moduleId":760453}}},"requestDefinition":{"jsonSchema":{"$ref":"#/definitions/8643885"}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"7e62fcc9-3e7d-4b8b-a8ef-55bf895f20c6","id":"0852d03a-5140-5cbf-b6cd-e58aa446cfeb","type":"http","name":"Create a JSON Transaction - Share ","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":34,"httpApiId":17810516,"httpApiCaseId":26070170,"httpApiName":"Create a JSON Transaction ","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/json","httpApiMethod":"post","httpApiCaseName":"Create a JSON Transaction ","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"ccec5682-f666-57d0-bee1-f8a1f858e7de","name":"Create a JSON Transaction - Remaining ","request":{"url":{"protocol":"http","port":"3001","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","transactions","json"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-Idempotency","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-TTL","value":"{{$number.int(min=0,max=3600)}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","baseUrl":"http://127.0.0.1:3001","body":{"mode":"raw","raw":"{\n    \"description\": \"regression test\",\n    \"metadata\": {\n        \"key\": \"value\"\n    },\n    \"send\": {\n        \"asset\": \"BRL\",\n        \"value\": \"1000.00\",\n        \"source\": {\n            \"from\": [\n                {\n                    \"accountAlias\": \"@external/BRL\",\n                    \"remaining\": \"remaining\",\n                    \"description\": \"regression test\",\n                    \"metadata\": {\n                        \"key\": \"value\"\n                    }\n                }\n            ]\n        },\n        \"distribute\": {\n            \"to\": [\n                {\n                    \"accountAlias\": \"@account1_rt_BRL\",\n                    \"remaining\": \"remaining\",\n                    \"description\": \"regression test\",\n                    \"metadata\": {\n                        \"key\": \"value\"\n                    }\n                }\n            ]\n        }\n    }\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`transaction_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable transaction_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}}],"responseDefinition":{"id":24931433,"name":"Created","code":201,"contentType":"json","jsonSchema":{"$ref":"#/definitions/8641358"},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453},"7325329":{"type":"object","properties":{"available":{"type":"string","x-apidog-mock":"100.00"},"onHold":{"type":"string","x-apidog-mock":"0"}},"x-apidog-orders":["available","onHold"],"required":["available","onHold"],"title":"balance.values.v3.x.x","name":"balance.values.v3.x.x","moduleId":760453},"8641347":{"type":"object","properties":{"id":{"type":"string","description":"The unique identifier of the Operation.","format":"uuid"},"description":{"type":"string","description":"Description of the operation."},"transactionId":{"type":"string","format":"uuid","description":"The unique identifier of the Transaction."},"type":{"type":"string","enum":["CREDIT","DEBIT","ON_HOLD","RELEASE"],"x-apidog-enum":[{"value":"CREDIT","name":"Credit Operation","description":""},{"value":"DEBIT","name":"Debit Operation","description":""},{"value":"ON_HOLD","name":"On Hold Operation","description":"Balance reservation operation, moving the amount to the on_hold balance."},{"value":"RELEASE","name":"Release Operation","description":"Release operation of the reserved balance, returning it to the available balance"}],"description":"The type of the operation.\n`CREDIT` `DEBIT` `ON_HOLD` `RELEASE`"},"assetCode":{"type":"string","description":"The code of the asset used in the operation."},"chartOfAccounts":{"type":"string","description":"The name of the Chart-of-Accounts that the operation belongs to."},"amount":{"type":"object","properties":{"value":{"type":"string","x-apidog-mock":"100.00"}},"x-apidog-orders":["value"],"x-apidog-refs":{},"required":["value"],"description":"An object containing information about the amount used in the operation."},"balance":{"type":"object","properties":{},"x-apidog-orders":["01JXFMCY8985B99D24K818AW5N"],"x-apidog-refs":{"01JXFMCY8985B99D24K818AW5N":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance before the operation."},"balanceAfter":{"type":"object","properties":{},"x-apidog-orders":["01JXFMDFCFGMBQMPBXMDDXN41A"],"x-apidog-refs":{"01JXFMDFCFGMBQMPBXMDDXN41A":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance after the operation."},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":["string","null"]}},"x-apidog-orders":["code","description"],"required":["code","description"],"description":"The transaction status."},"accountId":{"type":"string","format":"uuid","description":"The unique identifier of the Account."},"accountAlias":{"type":"string","description":"The alias for the account used in the operation."},"balanceId":{"type":"string","description":"The unique identifier of the Balance."},"route":{"type":"string","description":"Unique identifier of the operation route assigned to this specific leg of the transaction. This must match the corresponding source and destination configuration, determining how value is moved between accounts within the transaction route."},"balanceAffected":{"type":"boolean","description":"Indicates whether the operation had an impact on the account balance."},"balanceKey":{"type":"string","description":"The key identifier of the Balance"}},"x-apidog-orders":["id","transactionId","01JN71H2XZAMF6F0KY5QH2XTD6","accountId","accountAlias","balanceId","balanceKey","description","type","assetCode","chartOfAccounts","route","amount","balance","balanceAfter","status","balanceAffected","01JN718VEVJGSYKGXJ4PYFJ64Z","01JN718VKY0WWKT5F4317HNQF5"],"required":["id","description","transactionId","type","assetCode","chartOfAccounts","amount","balance","balanceAfter","status","accountId","accountAlias","balanceId","route","balanceAffected","balanceKey"],"x-apidog-refs":{"01JN718VEVJGSYKGXJ4PYFJ64Z":{"$ref":"#/definitions/5299902"},"01JN718VKY0WWKT5F4317HNQF5":{"$ref":"#/definitions/5295307"},"01JN71H2XZAMF6F0KY5QH2XTD6":{"$ref":"#/definitions/5365047"}},"title":"operation.response.v3.1.x","name":"operation.response.v3.1.x","moduleId":760453},"8641358":{"type":"object","properties":{"id":{"type":"string","description":"ID","format":"uuid"},"description":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"x-apidog-orders":["code","description"],"required":["code","description"]},"amount":{"type":"string"},"assetCode":{"type":"string"},"chartOfAccountsGroupName":{"type":"string"},"source":{"type":"array","items":{"type":"string"}},"destination":{"type":"array","items":{"type":"string"}},"operations":{"type":"array","items":{"$ref":"#/definitions/8641347"}},"route":{"type":"string"}},"x-apidog-orders":["id","01JN71ZQSPF1SPSM597SH2N81C","description","route","status","amount","assetCode","chartOfAccountsGroupName","source","destination","01JN72166CQABKZ83FTCMTEQ2S","operations","01JN7275ZNTQQN1PN8XN5ZHHQF"],"required":["id","description","status","amount","assetCode","chartOfAccountsGroupName","source","destination","operations"],"x-apidog-refs":{"01JN71ZQSPF1SPSM597SH2N81C":{"$ref":"#/definitions/5365047"},"01JN72166CQABKZ83FTCMTEQ2S":{"$ref":"#/definitions/5299902"},"01JN7275ZNTQQN1PN8XN5ZHHQF":{"$ref":"#/definitions/5295307"}},"title":"transaction.response.v3.1.x","name":"transaction.response.v3.1.x","moduleId":760453}}},"requestDefinition":{"jsonSchema":{"$ref":"#/definitions/8643885"}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"92b7db6e-a3d8-483d-8b5d-0d9696903e02","id":"ccec5682-f666-57d0-bee1-f8a1f858e7de","type":"http","name":"Create a JSON Transaction - Remaining ","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":35,"httpApiId":17810516,"httpApiCaseId":26070192,"httpApiName":"Create a JSON Transaction ","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/json","httpApiMethod":"post","httpApiCaseName":"Create a JSON Transaction ","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"60884a40-345f-59c7-a462-5cf31e3c3bde","name":"Create an Inflow Transaction - Amount","request":{"url":{"protocol":"http","port":"3001","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","transactions","inflow"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-Idempotency","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-TTL","value":"{{$number.int(min=0,max=3600)}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","baseUrl":"http://127.0.0.1:3001","body":{"mode":"raw","raw":"{\n    \"description\": \"regression test\",\n    \"metadata\": {\n        \"key\": \"value\"\n    },\n    \"send\": {\n        \"asset\": \"BRL\",\n        \"value\": \"1000.00\",\n        \"distribute\": {\n            \"to\": [\n                {\n                    \"accountAlias\": \"@account1_rt_BRL\",\n                    \"amount\": {\n                        \"asset\": \"BRL\",\n                        \"value\": \"1000.00\"\n                    },\n                    \"description\": \"regression_test\",\n                    \"metadata\": {\n                        \"key\": \"value\"\n                    }\n                }\n            ]\n        }\n    }\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`transaction_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable transaction_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}}],"responseDefinition":{"id":24932089,"name":"Created","code":201,"contentType":"json","jsonSchema":{"$ref":"#/definitions/8641358"},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453},"7325329":{"type":"object","properties":{"available":{"type":"string","x-apidog-mock":"100.00"},"onHold":{"type":"string","x-apidog-mock":"0"}},"x-apidog-orders":["available","onHold"],"required":["available","onHold"],"title":"balance.values.v3.x.x","name":"balance.values.v3.x.x","moduleId":760453},"8641347":{"type":"object","properties":{"id":{"type":"string","description":"The unique identifier of the Operation.","format":"uuid"},"description":{"type":"string","description":"Description of the operation."},"transactionId":{"type":"string","format":"uuid","description":"The unique identifier of the Transaction."},"type":{"type":"string","enum":["CREDIT","DEBIT","ON_HOLD","RELEASE"],"x-apidog-enum":[{"value":"CREDIT","name":"Credit Operation","description":""},{"value":"DEBIT","name":"Debit Operation","description":""},{"value":"ON_HOLD","name":"On Hold Operation","description":"Balance reservation operation, moving the amount to the on_hold balance."},{"value":"RELEASE","name":"Release Operation","description":"Release operation of the reserved balance, returning it to the available balance"}],"description":"The type of the operation.\n`CREDIT` `DEBIT` `ON_HOLD` `RELEASE`"},"assetCode":{"type":"string","description":"The code of the asset used in the operation."},"chartOfAccounts":{"type":"string","description":"The name of the Chart-of-Accounts that the operation belongs to."},"amount":{"type":"object","properties":{"value":{"type":"string","x-apidog-mock":"100.00"}},"x-apidog-orders":["value"],"x-apidog-refs":{},"required":["value"],"description":"An object containing information about the amount used in the operation."},"balance":{"type":"object","properties":{},"x-apidog-orders":["01JXFMCY8985B99D24K818AW5N"],"x-apidog-refs":{"01JXFMCY8985B99D24K818AW5N":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance before the operation."},"balanceAfter":{"type":"object","properties":{},"x-apidog-orders":["01JXFMDFCFGMBQMPBXMDDXN41A"],"x-apidog-refs":{"01JXFMDFCFGMBQMPBXMDDXN41A":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance after the operation."},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":["string","null"]}},"x-apidog-orders":["code","description"],"required":["code","description"],"description":"The transaction status."},"accountId":{"type":"string","format":"uuid","description":"The unique identifier of the Account."},"accountAlias":{"type":"string","description":"The alias for the account used in the operation."},"balanceId":{"type":"string","description":"The unique identifier of the Balance."},"route":{"type":"string","description":"Unique identifier of the operation route assigned to this specific leg of the transaction. This must match the corresponding source and destination configuration, determining how value is moved between accounts within the transaction route."},"balanceAffected":{"type":"boolean","description":"Indicates whether the operation had an impact on the account balance."},"balanceKey":{"type":"string","description":"The key identifier of the Balance"}},"x-apidog-orders":["id","transactionId","01JN71H2XZAMF6F0KY5QH2XTD6","accountId","accountAlias","balanceId","balanceKey","description","type","assetCode","chartOfAccounts","route","amount","balance","balanceAfter","status","balanceAffected","01JN718VEVJGSYKGXJ4PYFJ64Z","01JN718VKY0WWKT5F4317HNQF5"],"required":["id","description","transactionId","type","assetCode","chartOfAccounts","amount","balance","balanceAfter","status","accountId","accountAlias","balanceId","route","balanceAffected","balanceKey"],"x-apidog-refs":{"01JN718VEVJGSYKGXJ4PYFJ64Z":{"$ref":"#/definitions/5299902"},"01JN718VKY0WWKT5F4317HNQF5":{"$ref":"#/definitions/5295307"},"01JN71H2XZAMF6F0KY5QH2XTD6":{"$ref":"#/definitions/5365047"}},"title":"operation.response.v3.1.x","name":"operation.response.v3.1.x","moduleId":760453},"8641358":{"type":"object","properties":{"id":{"type":"string","description":"ID","format":"uuid"},"description":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"x-apidog-orders":["code","description"],"required":["code","description"]},"amount":{"type":"string"},"assetCode":{"type":"string"},"chartOfAccountsGroupName":{"type":"string"},"source":{"type":"array","items":{"type":"string"}},"destination":{"type":"array","items":{"type":"string"}},"operations":{"type":"array","items":{"$ref":"#/definitions/8641347"}},"route":{"type":"string"}},"x-apidog-orders":["id","01JN71ZQSPF1SPSM597SH2N81C","description","route","status","amount","assetCode","chartOfAccountsGroupName","source","destination","01JN72166CQABKZ83FTCMTEQ2S","operations","01JN7275ZNTQQN1PN8XN5ZHHQF"],"required":["id","description","status","amount","assetCode","chartOfAccountsGroupName","source","destination","operations"],"x-apidog-refs":{"01JN71ZQSPF1SPSM597SH2N81C":{"$ref":"#/definitions/5365047"},"01JN72166CQABKZ83FTCMTEQ2S":{"$ref":"#/definitions/5299902"},"01JN7275ZNTQQN1PN8XN5ZHHQF":{"$ref":"#/definitions/5295307"}},"title":"transaction.response.v3.1.x","name":"transaction.response.v3.1.x","moduleId":760453}}},"requestDefinition":{"jsonSchema":{"$ref":"#/definitions/7253978"}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"0f27ccfa-bb4a-457c-83ec-e114805aa80a","id":"60884a40-345f-59c7-a462-5cf31e3c3bde","type":"http","name":"Create an Inflow Transaction - Amount","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":36,"httpApiId":17810522,"httpApiCaseId":26070196,"httpApiName":"Create an Inflow Transaction","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/inflow","httpApiMethod":"post","httpApiCaseName":"Create an Inflow Transaction","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"f7d0908f-028e-5b56-a194-60f2fe5a575c","name":"Create an Inflow Transaction - Share","request":{"url":{"protocol":"http","port":"3001","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","transactions","inflow"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-Idempotency","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-TTL","value":"{{$number.int(min=0,max=3600)}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","baseUrl":"http://127.0.0.1:3001","body":{"mode":"raw","raw":"{\n    \"description\": \"regression test\",\n    \"metadata\": {\n        \"key\": \"value\"\n    },\n    \"send\": {\n        \"asset\": \"BRL\",\n        \"value\": \"1000.00\",\n        \"distribute\": {\n            \"to\": [\n                {\n                    \"accountAlias\": \"@account1_rt_BRL\",\n                    \"share\": {\n                        \"percentage\": 100\n                    },\n                    \"description\": \"regression_test\",\n                    \"metadata\": {\n                        \"key\": \"value\"\n                    }\n                }\n            ]\n        }\n    }\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`transaction_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable transaction_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}}],"responseDefinition":{"id":24932089,"name":"Created","code":201,"contentType":"json","jsonSchema":{"$ref":"#/definitions/8641358"},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453},"7325329":{"type":"object","properties":{"available":{"type":"string","x-apidog-mock":"100.00"},"onHold":{"type":"string","x-apidog-mock":"0"}},"x-apidog-orders":["available","onHold"],"required":["available","onHold"],"title":"balance.values.v3.x.x","name":"balance.values.v3.x.x","moduleId":760453},"8641347":{"type":"object","properties":{"id":{"type":"string","description":"The unique identifier of the Operation.","format":"uuid"},"description":{"type":"string","description":"Description of the operation."},"transactionId":{"type":"string","format":"uuid","description":"The unique identifier of the Transaction."},"type":{"type":"string","enum":["CREDIT","DEBIT","ON_HOLD","RELEASE"],"x-apidog-enum":[{"value":"CREDIT","name":"Credit Operation","description":""},{"value":"DEBIT","name":"Debit Operation","description":""},{"value":"ON_HOLD","name":"On Hold Operation","description":"Balance reservation operation, moving the amount to the on_hold balance."},{"value":"RELEASE","name":"Release Operation","description":"Release operation of the reserved balance, returning it to the available balance"}],"description":"The type of the operation.\n`CREDIT` `DEBIT` `ON_HOLD` `RELEASE`"},"assetCode":{"type":"string","description":"The code of the asset used in the operation."},"chartOfAccounts":{"type":"string","description":"The name of the Chart-of-Accounts that the operation belongs to."},"amount":{"type":"object","properties":{"value":{"type":"string","x-apidog-mock":"100.00"}},"x-apidog-orders":["value"],"x-apidog-refs":{},"required":["value"],"description":"An object containing information about the amount used in the operation."},"balance":{"type":"object","properties":{},"x-apidog-orders":["01JXFMCY8985B99D24K818AW5N"],"x-apidog-refs":{"01JXFMCY8985B99D24K818AW5N":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance before the operation."},"balanceAfter":{"type":"object","properties":{},"x-apidog-orders":["01JXFMDFCFGMBQMPBXMDDXN41A"],"x-apidog-refs":{"01JXFMDFCFGMBQMPBXMDDXN41A":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance after the operation."},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":["string","null"]}},"x-apidog-orders":["code","description"],"required":["code","description"],"description":"The transaction status."},"accountId":{"type":"string","format":"uuid","description":"The unique identifier of the Account."},"accountAlias":{"type":"string","description":"The alias for the account used in the operation."},"balanceId":{"type":"string","description":"The unique identifier of the Balance."},"route":{"type":"string","description":"Unique identifier of the operation route assigned to this specific leg of the transaction. This must match the corresponding source and destination configuration, determining how value is moved between accounts within the transaction route."},"balanceAffected":{"type":"boolean","description":"Indicates whether the operation had an impact on the account balance."},"balanceKey":{"type":"string","description":"The key identifier of the Balance"}},"x-apidog-orders":["id","transactionId","01JN71H2XZAMF6F0KY5QH2XTD6","accountId","accountAlias","balanceId","balanceKey","description","type","assetCode","chartOfAccounts","route","amount","balance","balanceAfter","status","balanceAffected","01JN718VEVJGSYKGXJ4PYFJ64Z","01JN718VKY0WWKT5F4317HNQF5"],"required":["id","description","transactionId","type","assetCode","chartOfAccounts","amount","balance","balanceAfter","status","accountId","accountAlias","balanceId","route","balanceAffected","balanceKey"],"x-apidog-refs":{"01JN718VEVJGSYKGXJ4PYFJ64Z":{"$ref":"#/definitions/5299902"},"01JN718VKY0WWKT5F4317HNQF5":{"$ref":"#/definitions/5295307"},"01JN71H2XZAMF6F0KY5QH2XTD6":{"$ref":"#/definitions/5365047"}},"title":"operation.response.v3.1.x","name":"operation.response.v3.1.x","moduleId":760453},"8641358":{"type":"object","properties":{"id":{"type":"string","description":"ID","format":"uuid"},"description":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"x-apidog-orders":["code","description"],"required":["code","description"]},"amount":{"type":"string"},"assetCode":{"type":"string"},"chartOfAccountsGroupName":{"type":"string"},"source":{"type":"array","items":{"type":"string"}},"destination":{"type":"array","items":{"type":"string"}},"operations":{"type":"array","items":{"$ref":"#/definitions/8641347"}},"route":{"type":"string"}},"x-apidog-orders":["id","01JN71ZQSPF1SPSM597SH2N81C","description","route","status","amount","assetCode","chartOfAccountsGroupName","source","destination","01JN72166CQABKZ83FTCMTEQ2S","operations","01JN7275ZNTQQN1PN8XN5ZHHQF"],"required":["id","description","status","amount","assetCode","chartOfAccountsGroupName","source","destination","operations"],"x-apidog-refs":{"01JN71ZQSPF1SPSM597SH2N81C":{"$ref":"#/definitions/5365047"},"01JN72166CQABKZ83FTCMTEQ2S":{"$ref":"#/definitions/5299902"},"01JN7275ZNTQQN1PN8XN5ZHHQF":{"$ref":"#/definitions/5295307"}},"title":"transaction.response.v3.1.x","name":"transaction.response.v3.1.x","moduleId":760453}}},"requestDefinition":{"jsonSchema":{"$ref":"#/definitions/7253978"}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"06c696b1-efff-4fb5-bd6b-d093960e42b3","id":"f7d0908f-028e-5b56-a194-60f2fe5a575c","type":"http","name":"Create an Inflow Transaction - Share","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":37,"httpApiId":17810522,"httpApiCaseId":26070200,"httpApiName":"Create an Inflow Transaction","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/inflow","httpApiMethod":"post","httpApiCaseName":"Create an Inflow Transaction","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"13db7bba-ec09-5109-9dbe-1b64ef4f9a91","name":"Create an Inflow Transaction - Remaining","request":{"url":{"protocol":"http","port":"3001","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","transactions","inflow"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-Idempotency","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-TTL","value":"{{$number.int(min=0,max=3600)}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","baseUrl":"http://127.0.0.1:3001","body":{"mode":"raw","raw":"{\n    \"description\": \"regression test\",\n    \"metadata\": {\n        \"key\": \"value\"\n    },\n    \"send\": {\n        \"asset\": \"BRL\",\n        \"value\": \"1.00\",\n        \"distribute\": {\n            \"to\": [\n                {\n                    \"accountAlias\": \"@account1_rt_BRL\",\n                    \"remaining\": \"remaining\",\n                    \"description\": \"regression_test\",\n                    \"metadata\": {\n                        \"key\": \"value\"\n                    }\n                }\n            ]\n        }\n    }\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`transaction_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable transaction_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}}],"responseDefinition":{"id":24932089,"name":"Created","code":201,"contentType":"json","jsonSchema":{"$ref":"#/definitions/8641358"},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453},"7325329":{"type":"object","properties":{"available":{"type":"string","x-apidog-mock":"100.00"},"onHold":{"type":"string","x-apidog-mock":"0"}},"x-apidog-orders":["available","onHold"],"required":["available","onHold"],"title":"balance.values.v3.x.x","name":"balance.values.v3.x.x","moduleId":760453},"8641347":{"type":"object","properties":{"id":{"type":"string","description":"The unique identifier of the Operation.","format":"uuid"},"description":{"type":"string","description":"Description of the operation."},"transactionId":{"type":"string","format":"uuid","description":"The unique identifier of the Transaction."},"type":{"type":"string","enum":["CREDIT","DEBIT","ON_HOLD","RELEASE"],"x-apidog-enum":[{"value":"CREDIT","name":"Credit Operation","description":""},{"value":"DEBIT","name":"Debit Operation","description":""},{"value":"ON_HOLD","name":"On Hold Operation","description":"Balance reservation operation, moving the amount to the on_hold balance."},{"value":"RELEASE","name":"Release Operation","description":"Release operation of the reserved balance, returning it to the available balance"}],"description":"The type of the operation.\n`CREDIT` `DEBIT` `ON_HOLD` `RELEASE`"},"assetCode":{"type":"string","description":"The code of the asset used in the operation."},"chartOfAccounts":{"type":"string","description":"The name of the Chart-of-Accounts that the operation belongs to."},"amount":{"type":"object","properties":{"value":{"type":"string","x-apidog-mock":"100.00"}},"x-apidog-orders":["value"],"x-apidog-refs":{},"required":["value"],"description":"An object containing information about the amount used in the operation."},"balance":{"type":"object","properties":{},"x-apidog-orders":["01JXFMCY8985B99D24K818AW5N"],"x-apidog-refs":{"01JXFMCY8985B99D24K818AW5N":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance before the operation."},"balanceAfter":{"type":"object","properties":{},"x-apidog-orders":["01JXFMDFCFGMBQMPBXMDDXN41A"],"x-apidog-refs":{"01JXFMDFCFGMBQMPBXMDDXN41A":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance after the operation."},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":["string","null"]}},"x-apidog-orders":["code","description"],"required":["code","description"],"description":"The transaction status."},"accountId":{"type":"string","format":"uuid","description":"The unique identifier of the Account."},"accountAlias":{"type":"string","description":"The alias for the account used in the operation."},"balanceId":{"type":"string","description":"The unique identifier of the Balance."},"route":{"type":"string","description":"Unique identifier of the operation route assigned to this specific leg of the transaction. This must match the corresponding source and destination configuration, determining how value is moved between accounts within the transaction route."},"balanceAffected":{"type":"boolean","description":"Indicates whether the operation had an impact on the account balance."},"balanceKey":{"type":"string","description":"The key identifier of the Balance"}},"x-apidog-orders":["id","transactionId","01JN71H2XZAMF6F0KY5QH2XTD6","accountId","accountAlias","balanceId","balanceKey","description","type","assetCode","chartOfAccounts","route","amount","balance","balanceAfter","status","balanceAffected","01JN718VEVJGSYKGXJ4PYFJ64Z","01JN718VKY0WWKT5F4317HNQF5"],"required":["id","description","transactionId","type","assetCode","chartOfAccounts","amount","balance","balanceAfter","status","accountId","accountAlias","balanceId","route","balanceAffected","balanceKey"],"x-apidog-refs":{"01JN718VEVJGSYKGXJ4PYFJ64Z":{"$ref":"#/definitions/5299902"},"01JN718VKY0WWKT5F4317HNQF5":{"$ref":"#/definitions/5295307"},"01JN71H2XZAMF6F0KY5QH2XTD6":{"$ref":"#/definitions/5365047"}},"title":"operation.response.v3.1.x","name":"operation.response.v3.1.x","moduleId":760453},"8641358":{"type":"object","properties":{"id":{"type":"string","description":"ID","format":"uuid"},"description":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"x-apidog-orders":["code","description"],"required":["code","description"]},"amount":{"type":"string"},"assetCode":{"type":"string"},"chartOfAccountsGroupName":{"type":"string"},"source":{"type":"array","items":{"type":"string"}},"destination":{"type":"array","items":{"type":"string"}},"operations":{"type":"array","items":{"$ref":"#/definitions/8641347"}},"route":{"type":"string"}},"x-apidog-orders":["id","01JN71ZQSPF1SPSM597SH2N81C","description","route","status","amount","assetCode","chartOfAccountsGroupName","source","destination","01JN72166CQABKZ83FTCMTEQ2S","operations","01JN7275ZNTQQN1PN8XN5ZHHQF"],"required":["id","description","status","amount","assetCode","chartOfAccountsGroupName","source","destination","operations"],"x-apidog-refs":{"01JN71ZQSPF1SPSM597SH2N81C":{"$ref":"#/definitions/5365047"},"01JN72166CQABKZ83FTCMTEQ2S":{"$ref":"#/definitions/5299902"},"01JN7275ZNTQQN1PN8XN5ZHHQF":{"$ref":"#/definitions/5295307"}},"title":"transaction.response.v3.1.x","name":"transaction.response.v3.1.x","moduleId":760453}}},"requestDefinition":{"jsonSchema":{"$ref":"#/definitions/7253978"}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"31aceb1f-e263-47b9-949d-7ffef03a8f6d","id":"13db7bba-ec09-5109-9dbe-1b64ef4f9a91","type":"http","name":"Create an Inflow Transaction - Remaining","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":38,"httpApiId":17810522,"httpApiCaseId":26070206,"httpApiName":"Create an Inflow Transaction","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/inflow","httpApiMethod":"post","httpApiCaseName":"Create an Inflow Transaction","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"5f5285a2-fd52-5668-a8f7-e1235367c8c2","type":"group","metaInfo":{"id":"5f5285a2-fd52-5668-a8f7-e1235367c8c2","type":"group","scopeType":"end","scopeStartId":"fdc7cd0c-4e2f-53f1-86dc-64d8f0093bd2"}},{"id":"bc8882fa-3581-5c82-b1b9-a1b15543e634","type":"group","metaInfo":{"id":"bc8882fa-3581-5c82-b1b9-a1b15543e634","type":"group","scopeType":"start","scopeEndId":"c1b2185a-5934-5d88-83cf-ce52cb02cb49","name":"Outflow Transactions"}},{"id":"613503c3-84d7-5891-9ef5-29de268449e4","name":"Create a JSON Transaction - Amount ","request":{"url":{"protocol":"http","port":"3001","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","transactions","json"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-Idempotency","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-TTL","value":"{{$number.int(min=0,max=3600)}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","baseUrl":"http://127.0.0.1:3001","body":{"mode":"raw","raw":"{\n    \"description\": \"regression test\",\n    \"metadata\": {\n        \"key\": \"value\"\n    },\n    \"send\": {\n        \"asset\": \"BRL\",\n        \"value\": \"1.00\",\n        \"source\": {\n            \"from\": [\n                {\n                    \"accountAlias\": \"@account1_rt_BRL\",\n                    \"amount\": {\n                        \"asset\": \"BRL\",\n                        \"value\": \"1.00\"\n                    },\n                    \"description\": \"regression test\",\n                    \"metadata\": {\n                        \"key\": \"value\"\n                    }\n                }\n            ]\n        },\n        \"distribute\": {\n            \"to\": [\n                {\n                    \"accountAlias\": \"@external/BRL\",\n                    \"amount\": {\n                        \"asset\": \"BRL\",\n                        \"value\": \"1.00\"\n                    },\n                    \"description\": \"regression test\",\n                    \"metadata\": {\n                        \"key\": \"value\"\n                    }\n                }\n            ]\n        }\n    }\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`transaction_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable transaction_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}}],"responseDefinition":{"id":24931433,"name":"Created","code":201,"contentType":"json","jsonSchema":{"$ref":"#/definitions/8641358"},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453},"7325329":{"type":"object","properties":{"available":{"type":"string","x-apidog-mock":"100.00"},"onHold":{"type":"string","x-apidog-mock":"0"}},"x-apidog-orders":["available","onHold"],"required":["available","onHold"],"title":"balance.values.v3.x.x","name":"balance.values.v3.x.x","moduleId":760453},"8641347":{"type":"object","properties":{"id":{"type":"string","description":"The unique identifier of the Operation.","format":"uuid"},"description":{"type":"string","description":"Description of the operation."},"transactionId":{"type":"string","format":"uuid","description":"The unique identifier of the Transaction."},"type":{"type":"string","enum":["CREDIT","DEBIT","ON_HOLD","RELEASE"],"x-apidog-enum":[{"value":"CREDIT","name":"Credit Operation","description":""},{"value":"DEBIT","name":"Debit Operation","description":""},{"value":"ON_HOLD","name":"On Hold Operation","description":"Balance reservation operation, moving the amount to the on_hold balance."},{"value":"RELEASE","name":"Release Operation","description":"Release operation of the reserved balance, returning it to the available balance"}],"description":"The type of the operation.\n`CREDIT` `DEBIT` `ON_HOLD` `RELEASE`"},"assetCode":{"type":"string","description":"The code of the asset used in the operation."},"chartOfAccounts":{"type":"string","description":"The name of the Chart-of-Accounts that the operation belongs to."},"amount":{"type":"object","properties":{"value":{"type":"string","x-apidog-mock":"100.00"}},"x-apidog-orders":["value"],"x-apidog-refs":{},"required":["value"],"description":"An object containing information about the amount used in the operation."},"balance":{"type":"object","properties":{},"x-apidog-orders":["01JXFMCY8985B99D24K818AW5N"],"x-apidog-refs":{"01JXFMCY8985B99D24K818AW5N":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance before the operation."},"balanceAfter":{"type":"object","properties":{},"x-apidog-orders":["01JXFMDFCFGMBQMPBXMDDXN41A"],"x-apidog-refs":{"01JXFMDFCFGMBQMPBXMDDXN41A":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance after the operation."},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":["string","null"]}},"x-apidog-orders":["code","description"],"required":["code","description"],"description":"The transaction status."},"accountId":{"type":"string","format":"uuid","description":"The unique identifier of the Account."},"accountAlias":{"type":"string","description":"The alias for the account used in the operation."},"balanceId":{"type":"string","description":"The unique identifier of the Balance."},"route":{"type":"string","description":"Unique identifier of the operation route assigned to this specific leg of the transaction. This must match the corresponding source and destination configuration, determining how value is moved between accounts within the transaction route."},"balanceAffected":{"type":"boolean","description":"Indicates whether the operation had an impact on the account balance."},"balanceKey":{"type":"string","description":"The key identifier of the Balance"}},"x-apidog-orders":["id","transactionId","01JN71H2XZAMF6F0KY5QH2XTD6","accountId","accountAlias","balanceId","balanceKey","description","type","assetCode","chartOfAccounts","route","amount","balance","balanceAfter","status","balanceAffected","01JN718VEVJGSYKGXJ4PYFJ64Z","01JN718VKY0WWKT5F4317HNQF5"],"required":["id","description","transactionId","type","assetCode","chartOfAccounts","amount","balance","balanceAfter","status","accountId","accountAlias","balanceId","route","balanceAffected","balanceKey"],"x-apidog-refs":{"01JN718VEVJGSYKGXJ4PYFJ64Z":{"$ref":"#/definitions/5299902"},"01JN718VKY0WWKT5F4317HNQF5":{"$ref":"#/definitions/5295307"},"01JN71H2XZAMF6F0KY5QH2XTD6":{"$ref":"#/definitions/5365047"}},"title":"operation.response.v3.1.x","name":"operation.response.v3.1.x","moduleId":760453},"8641358":{"type":"object","properties":{"id":{"type":"string","description":"ID","format":"uuid"},"description":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"x-apidog-orders":["code","description"],"required":["code","description"]},"amount":{"type":"string"},"assetCode":{"type":"string"},"chartOfAccountsGroupName":{"type":"string"},"source":{"type":"array","items":{"type":"string"}},"destination":{"type":"array","items":{"type":"string"}},"operations":{"type":"array","items":{"$ref":"#/definitions/8641347"}},"route":{"type":"string"}},"x-apidog-orders":["id","01JN71ZQSPF1SPSM597SH2N81C","description","route","status","amount","assetCode","chartOfAccountsGroupName","source","destination","01JN72166CQABKZ83FTCMTEQ2S","operations","01JN7275ZNTQQN1PN8XN5ZHHQF"],"required":["id","description","status","amount","assetCode","chartOfAccountsGroupName","source","destination","operations"],"x-apidog-refs":{"01JN71ZQSPF1SPSM597SH2N81C":{"$ref":"#/definitions/5365047"},"01JN72166CQABKZ83FTCMTEQ2S":{"$ref":"#/definitions/5299902"},"01JN7275ZNTQQN1PN8XN5ZHHQF":{"$ref":"#/definitions/5295307"}},"title":"transaction.response.v3.1.x","name":"transaction.response.v3.1.x","moduleId":760453}}},"requestDefinition":{"jsonSchema":{"$ref":"#/definitions/8643885"}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"6c7e4023-235d-4de3-9f6e-56ab50dcea9a","id":"613503c3-84d7-5891-9ef5-29de268449e4","type":"http","name":"Create a JSON Transaction - Amount ","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":39,"httpApiId":17810516,"httpApiCaseId":26070301,"httpApiName":"Create a JSON Transaction ","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/json","httpApiMethod":"post","httpApiCaseName":"Create a JSON Transaction ","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":true,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"73f1b6c0-dfaa-592a-a382-c0b8b0c20dc7","name":"Create a JSON Transaction - Share ","request":{"url":{"protocol":"http","port":"3001","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","transactions","json"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-Idempotency","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-TTL","value":"{{$number.int(min=0,max=3600)}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","baseUrl":"http://127.0.0.1:3001","body":{"mode":"raw","raw":"{\n    \"description\": \"regression test\",\n    \"metadata\": {\n        \"key\": \"value\"\n    },\n    \"send\": {\n        \"asset\": \"BRL\",\n        \"value\": \"1.00\",\n        \"source\": {\n            \"from\": [\n                {\n                    \"accountAlias\": \"@account1_rt_BRL\",\n                    \"share\": {\n                        \"percentage\": 100\n                    },\n                    \"description\": \"regression test\",\n                    \"metadata\": {\n                        \"key\": \"value\"\n                    }\n                }\n            ]\n        },\n        \"distribute\": {\n            \"to\": [\n                {\n                    \"accountAlias\": \"@external/BRL\",\n                    \"share\": {\n                        \"percentage\": 100\n                    },\n                    \"description\": \"regression test\",\n                    \"metadata\": {\n                        \"key\": \"value\"\n                    }\n                }\n            ]\n        }\n    }\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`transaction_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable transaction_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}}],"responseDefinition":{"id":24931433,"name":"Created","code":201,"contentType":"json","jsonSchema":{"$ref":"#/definitions/8641358"},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453},"7325329":{"type":"object","properties":{"available":{"type":"string","x-apidog-mock":"100.00"},"onHold":{"type":"string","x-apidog-mock":"0"}},"x-apidog-orders":["available","onHold"],"required":["available","onHold"],"title":"balance.values.v3.x.x","name":"balance.values.v3.x.x","moduleId":760453},"8641347":{"type":"object","properties":{"id":{"type":"string","description":"The unique identifier of the Operation.","format":"uuid"},"description":{"type":"string","description":"Description of the operation."},"transactionId":{"type":"string","format":"uuid","description":"The unique identifier of the Transaction."},"type":{"type":"string","enum":["CREDIT","DEBIT","ON_HOLD","RELEASE"],"x-apidog-enum":[{"value":"CREDIT","name":"Credit Operation","description":""},{"value":"DEBIT","name":"Debit Operation","description":""},{"value":"ON_HOLD","name":"On Hold Operation","description":"Balance reservation operation, moving the amount to the on_hold balance."},{"value":"RELEASE","name":"Release Operation","description":"Release operation of the reserved balance, returning it to the available balance"}],"description":"The type of the operation.\n`CREDIT` `DEBIT` `ON_HOLD` `RELEASE`"},"assetCode":{"type":"string","description":"The code of the asset used in the operation."},"chartOfAccounts":{"type":"string","description":"The name of the Chart-of-Accounts that the operation belongs to."},"amount":{"type":"object","properties":{"value":{"type":"string","x-apidog-mock":"100.00"}},"x-apidog-orders":["value"],"x-apidog-refs":{},"required":["value"],"description":"An object containing information about the amount used in the operation."},"balance":{"type":"object","properties":{},"x-apidog-orders":["01JXFMCY8985B99D24K818AW5N"],"x-apidog-refs":{"01JXFMCY8985B99D24K818AW5N":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance before the operation."},"balanceAfter":{"type":"object","properties":{},"x-apidog-orders":["01JXFMDFCFGMBQMPBXMDDXN41A"],"x-apidog-refs":{"01JXFMDFCFGMBQMPBXMDDXN41A":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance after the operation."},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":["string","null"]}},"x-apidog-orders":["code","description"],"required":["code","description"],"description":"The transaction status."},"accountId":{"type":"string","format":"uuid","description":"The unique identifier of the Account."},"accountAlias":{"type":"string","description":"The alias for the account used in the operation."},"balanceId":{"type":"string","description":"The unique identifier of the Balance."},"route":{"type":"string","description":"Unique identifier of the operation route assigned to this specific leg of the transaction. This must match the corresponding source and destination configuration, determining how value is moved between accounts within the transaction route."},"balanceAffected":{"type":"boolean","description":"Indicates whether the operation had an impact on the account balance."},"balanceKey":{"type":"string","description":"The key identifier of the Balance"}},"x-apidog-orders":["id","transactionId","01JN71H2XZAMF6F0KY5QH2XTD6","accountId","accountAlias","balanceId","balanceKey","description","type","assetCode","chartOfAccounts","route","amount","balance","balanceAfter","status","balanceAffected","01JN718VEVJGSYKGXJ4PYFJ64Z","01JN718VKY0WWKT5F4317HNQF5"],"required":["id","description","transactionId","type","assetCode","chartOfAccounts","amount","balance","balanceAfter","status","accountId","accountAlias","balanceId","route","balanceAffected","balanceKey"],"x-apidog-refs":{"01JN718VEVJGSYKGXJ4PYFJ64Z":{"$ref":"#/definitions/5299902"},"01JN718VKY0WWKT5F4317HNQF5":{"$ref":"#/definitions/5295307"},"01JN71H2XZAMF6F0KY5QH2XTD6":{"$ref":"#/definitions/5365047"}},"title":"operation.response.v3.1.x","name":"operation.response.v3.1.x","moduleId":760453},"8641358":{"type":"object","properties":{"id":{"type":"string","description":"ID","format":"uuid"},"description":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"x-apidog-orders":["code","description"],"required":["code","description"]},"amount":{"type":"string"},"assetCode":{"type":"string"},"chartOfAccountsGroupName":{"type":"string"},"source":{"type":"array","items":{"type":"string"}},"destination":{"type":"array","items":{"type":"string"}},"operations":{"type":"array","items":{"$ref":"#/definitions/8641347"}},"route":{"type":"string"}},"x-apidog-orders":["id","01JN71ZQSPF1SPSM597SH2N81C","description","route","status","amount","assetCode","chartOfAccountsGroupName","source","destination","01JN72166CQABKZ83FTCMTEQ2S","operations","01JN7275ZNTQQN1PN8XN5ZHHQF"],"required":["id","description","status","amount","assetCode","chartOfAccountsGroupName","source","destination","operations"],"x-apidog-refs":{"01JN71ZQSPF1SPSM597SH2N81C":{"$ref":"#/definitions/5365047"},"01JN72166CQABKZ83FTCMTEQ2S":{"$ref":"#/definitions/5299902"},"01JN7275ZNTQQN1PN8XN5ZHHQF":{"$ref":"#/definitions/5295307"}},"title":"transaction.response.v3.1.x","name":"transaction.response.v3.1.x","moduleId":760453}}},"requestDefinition":{"jsonSchema":{"$ref":"#/definitions/8643885"}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"cc65c1a9-17eb-4688-acb5-f2dc1c2afe76","id":"73f1b6c0-dfaa-592a-a382-c0b8b0c20dc7","type":"http","name":"Create a JSON Transaction - Share ","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":40,"httpApiId":17810516,"httpApiCaseId":26070303,"httpApiName":"Create a JSON Transaction ","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/json","httpApiMethod":"post","httpApiCaseName":"Create a JSON Transaction ","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":true,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"53a01f73-cd6d-5890-b1ac-6e00bfd5c50e","name":"Create a JSON Transaction - Remaining ","request":{"url":{"protocol":"http","port":"3001","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","transactions","json"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-Idempotency","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-TTL","value":"{{$number.int(min=0,max=3600)}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","baseUrl":"http://127.0.0.1:3001","body":{"mode":"raw","raw":"{\n    \"description\": \"regression test\",\n    \"metadata\": {\n        \"key\": \"value\"\n    },\n    \"send\": {\n        \"asset\": \"BRL\",\n        \"value\": \"1.00\",\n        \"source\": {\n            \"from\": [\n                {\n                    \"accountAlias\": \"@account1_rt_BRL\",\n                    \"remaining\": \"remaining\",\n                    \"description\": \"regression test\",\n                    \"metadata\": {\n                        \"key\": \"value\"\n                    }\n                }\n            ]\n        },\n        \"distribute\": {\n            \"to\": [\n                {\n                    \"accountAlias\": \"@external/BRL\",\n                    \"remaining\": \"remaining\",\n                    \"description\": \"regression test\",\n                    \"metadata\": {\n                        \"key\": \"value\"\n                    }\n                }\n            ]\n        }\n    }\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`transaction_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable transaction_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}}],"responseDefinition":{"id":24931433,"name":"Created","code":201,"contentType":"json","jsonSchema":{"$ref":"#/definitions/8641358"},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453},"7325329":{"type":"object","properties":{"available":{"type":"string","x-apidog-mock":"100.00"},"onHold":{"type":"string","x-apidog-mock":"0"}},"x-apidog-orders":["available","onHold"],"required":["available","onHold"],"title":"balance.values.v3.x.x","name":"balance.values.v3.x.x","moduleId":760453},"8641347":{"type":"object","properties":{"id":{"type":"string","description":"The unique identifier of the Operation.","format":"uuid"},"description":{"type":"string","description":"Description of the operation."},"transactionId":{"type":"string","format":"uuid","description":"The unique identifier of the Transaction."},"type":{"type":"string","enum":["CREDIT","DEBIT","ON_HOLD","RELEASE"],"x-apidog-enum":[{"value":"CREDIT","name":"Credit Operation","description":""},{"value":"DEBIT","name":"Debit Operation","description":""},{"value":"ON_HOLD","name":"On Hold Operation","description":"Balance reservation operation, moving the amount to the on_hold balance."},{"value":"RELEASE","name":"Release Operation","description":"Release operation of the reserved balance, returning it to the available balance"}],"description":"The type of the operation.\n`CREDIT` `DEBIT` `ON_HOLD` `RELEASE`"},"assetCode":{"type":"string","description":"The code of the asset used in the operation."},"chartOfAccounts":{"type":"string","description":"The name of the Chart-of-Accounts that the operation belongs to."},"amount":{"type":"object","properties":{"value":{"type":"string","x-apidog-mock":"100.00"}},"x-apidog-orders":["value"],"x-apidog-refs":{},"required":["value"],"description":"An object containing information about the amount used in the operation."},"balance":{"type":"object","properties":{},"x-apidog-orders":["01JXFMCY8985B99D24K818AW5N"],"x-apidog-refs":{"01JXFMCY8985B99D24K818AW5N":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance before the operation."},"balanceAfter":{"type":"object","properties":{},"x-apidog-orders":["01JXFMDFCFGMBQMPBXMDDXN41A"],"x-apidog-refs":{"01JXFMDFCFGMBQMPBXMDDXN41A":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance after the operation."},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":["string","null"]}},"x-apidog-orders":["code","description"],"required":["code","description"],"description":"The transaction status."},"accountId":{"type":"string","format":"uuid","description":"The unique identifier of the Account."},"accountAlias":{"type":"string","description":"The alias for the account used in the operation."},"balanceId":{"type":"string","description":"The unique identifier of the Balance."},"route":{"type":"string","description":"Unique identifier of the operation route assigned to this specific leg of the transaction. This must match the corresponding source and destination configuration, determining how value is moved between accounts within the transaction route."},"balanceAffected":{"type":"boolean","description":"Indicates whether the operation had an impact on the account balance."},"balanceKey":{"type":"string","description":"The key identifier of the Balance"}},"x-apidog-orders":["id","transactionId","01JN71H2XZAMF6F0KY5QH2XTD6","accountId","accountAlias","balanceId","balanceKey","description","type","assetCode","chartOfAccounts","route","amount","balance","balanceAfter","status","balanceAffected","01JN718VEVJGSYKGXJ4PYFJ64Z","01JN718VKY0WWKT5F4317HNQF5"],"required":["id","description","transactionId","type","assetCode","chartOfAccounts","amount","balance","balanceAfter","status","accountId","accountAlias","balanceId","route","balanceAffected","balanceKey"],"x-apidog-refs":{"01JN718VEVJGSYKGXJ4PYFJ64Z":{"$ref":"#/definitions/5299902"},"01JN718VKY0WWKT5F4317HNQF5":{"$ref":"#/definitions/5295307"},"01JN71H2XZAMF6F0KY5QH2XTD6":{"$ref":"#/definitions/5365047"}},"title":"operation.response.v3.1.x","name":"operation.response.v3.1.x","moduleId":760453},"8641358":{"type":"object","properties":{"id":{"type":"string","description":"ID","format":"uuid"},"description":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"x-apidog-orders":["code","description"],"required":["code","description"]},"amount":{"type":"string"},"assetCode":{"type":"string"},"chartOfAccountsGroupName":{"type":"string"},"source":{"type":"array","items":{"type":"string"}},"destination":{"type":"array","items":{"type":"string"}},"operations":{"type":"array","items":{"$ref":"#/definitions/8641347"}},"route":{"type":"string"}},"x-apidog-orders":["id","01JN71ZQSPF1SPSM597SH2N81C","description","route","status","amount","assetCode","chartOfAccountsGroupName","source","destination","01JN72166CQABKZ83FTCMTEQ2S","operations","01JN7275ZNTQQN1PN8XN5ZHHQF"],"required":["id","description","status","amount","assetCode","chartOfAccountsGroupName","source","destination","operations"],"x-apidog-refs":{"01JN71ZQSPF1SPSM597SH2N81C":{"$ref":"#/definitions/5365047"},"01JN72166CQABKZ83FTCMTEQ2S":{"$ref":"#/definitions/5299902"},"01JN7275ZNTQQN1PN8XN5ZHHQF":{"$ref":"#/definitions/5295307"}},"title":"transaction.response.v3.1.x","name":"transaction.response.v3.1.x","moduleId":760453}}},"requestDefinition":{"jsonSchema":{"$ref":"#/definitions/8643885"}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"e7d11185-b365-454c-badd-6c93d7c256a9","id":"53a01f73-cd6d-5890-b1ac-6e00bfd5c50e","type":"http","name":"Create a JSON Transaction - Remaining ","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":41,"httpApiId":17810516,"httpApiCaseId":26070305,"httpApiName":"Create a JSON Transaction ","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/json","httpApiMethod":"post","httpApiCaseName":"Create a JSON Transaction ","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":true,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"7700dd80-f0b8-52d0-9d0d-e57fb2540b4b","name":"Create an Outflow Transaction - Amount","request":{"url":{"protocol":"http","port":"3001","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","transactions","outflow"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-Idempotency","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-TTL","value":"{{$number.int(min=0,max=3600)}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","baseUrl":"http://127.0.0.1:3001","body":{"mode":"raw","raw":"{\n    \"description\": \"regression test\",\n    \"metadata\": {\n        \"key\": \"value\"\n    },\n    \"send\": {\n        \"asset\": \"BRL\",\n        \"value\": \"1.00\",\n        \"source\": {\n            \"from\": [\n                {\n                    \"accountAlias\": \"@account1_rt_BRL\",\n                    \"amount\": {\n                        \"asset\": \"BRL\",\n                        \"value\": \"1.00\"\n                    },\n                    \"description\": \"regression test\",\n                    \"metadata\": {\n                        \"key\": \"value\"\n                    }\n                }\n            ]\n        }\n    }\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`transaction_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable transaction_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}}],"responseDefinition":{"id":24932090,"name":"Created","code":201,"contentType":"json","jsonSchema":{"$ref":"#/definitions/8641358"},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453},"7325329":{"type":"object","properties":{"available":{"type":"string","x-apidog-mock":"100.00"},"onHold":{"type":"string","x-apidog-mock":"0"}},"x-apidog-orders":["available","onHold"],"required":["available","onHold"],"title":"balance.values.v3.x.x","name":"balance.values.v3.x.x","moduleId":760453},"8641347":{"type":"object","properties":{"id":{"type":"string","description":"The unique identifier of the Operation.","format":"uuid"},"description":{"type":"string","description":"Description of the operation."},"transactionId":{"type":"string","format":"uuid","description":"The unique identifier of the Transaction."},"type":{"type":"string","enum":["CREDIT","DEBIT","ON_HOLD","RELEASE"],"x-apidog-enum":[{"value":"CREDIT","name":"Credit Operation","description":""},{"value":"DEBIT","name":"Debit Operation","description":""},{"value":"ON_HOLD","name":"On Hold Operation","description":"Balance reservation operation, moving the amount to the on_hold balance."},{"value":"RELEASE","name":"Release Operation","description":"Release operation of the reserved balance, returning it to the available balance"}],"description":"The type of the operation.\n`CREDIT` `DEBIT` `ON_HOLD` `RELEASE`"},"assetCode":{"type":"string","description":"The code of the asset used in the operation."},"chartOfAccounts":{"type":"string","description":"The name of the Chart-of-Accounts that the operation belongs to."},"amount":{"type":"object","properties":{"value":{"type":"string","x-apidog-mock":"100.00"}},"x-apidog-orders":["value"],"x-apidog-refs":{},"required":["value"],"description":"An object containing information about the amount used in the operation."},"balance":{"type":"object","properties":{},"x-apidog-orders":["01JXFMCY8985B99D24K818AW5N"],"x-apidog-refs":{"01JXFMCY8985B99D24K818AW5N":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance before the operation."},"balanceAfter":{"type":"object","properties":{},"x-apidog-orders":["01JXFMDFCFGMBQMPBXMDDXN41A"],"x-apidog-refs":{"01JXFMDFCFGMBQMPBXMDDXN41A":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance after the operation."},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":["string","null"]}},"x-apidog-orders":["code","description"],"required":["code","description"],"description":"The transaction status."},"accountId":{"type":"string","format":"uuid","description":"The unique identifier of the Account."},"accountAlias":{"type":"string","description":"The alias for the account used in the operation."},"balanceId":{"type":"string","description":"The unique identifier of the Balance."},"route":{"type":"string","description":"Unique identifier of the operation route assigned to this specific leg of the transaction. This must match the corresponding source and destination configuration, determining how value is moved between accounts within the transaction route."},"balanceAffected":{"type":"boolean","description":"Indicates whether the operation had an impact on the account balance."},"balanceKey":{"type":"string","description":"The key identifier of the Balance"}},"x-apidog-orders":["id","transactionId","01JN71H2XZAMF6F0KY5QH2XTD6","accountId","accountAlias","balanceId","balanceKey","description","type","assetCode","chartOfAccounts","route","amount","balance","balanceAfter","status","balanceAffected","01JN718VEVJGSYKGXJ4PYFJ64Z","01JN718VKY0WWKT5F4317HNQF5"],"required":["id","description","transactionId","type","assetCode","chartOfAccounts","amount","balance","balanceAfter","status","accountId","accountAlias","balanceId","route","balanceAffected","balanceKey"],"x-apidog-refs":{"01JN718VEVJGSYKGXJ4PYFJ64Z":{"$ref":"#/definitions/5299902"},"01JN718VKY0WWKT5F4317HNQF5":{"$ref":"#/definitions/5295307"},"01JN71H2XZAMF6F0KY5QH2XTD6":{"$ref":"#/definitions/5365047"}},"title":"operation.response.v3.1.x","name":"operation.response.v3.1.x","moduleId":760453},"8641358":{"type":"object","properties":{"id":{"type":"string","description":"ID","format":"uuid"},"description":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"x-apidog-orders":["code","description"],"required":["code","description"]},"amount":{"type":"string"},"assetCode":{"type":"string"},"chartOfAccountsGroupName":{"type":"string"},"source":{"type":"array","items":{"type":"string"}},"destination":{"type":"array","items":{"type":"string"}},"operations":{"type":"array","items":{"$ref":"#/definitions/8641347"}},"route":{"type":"string"}},"x-apidog-orders":["id","01JN71ZQSPF1SPSM597SH2N81C","description","route","status","amount","assetCode","chartOfAccountsGroupName","source","destination","01JN72166CQABKZ83FTCMTEQ2S","operations","01JN7275ZNTQQN1PN8XN5ZHHQF"],"required":["id","description","status","amount","assetCode","chartOfAccountsGroupName","source","destination","operations"],"x-apidog-refs":{"01JN71ZQSPF1SPSM597SH2N81C":{"$ref":"#/definitions/5365047"},"01JN72166CQABKZ83FTCMTEQ2S":{"$ref":"#/definitions/5299902"},"01JN7275ZNTQQN1PN8XN5ZHHQF":{"$ref":"#/definitions/5295307"}},"title":"transaction.response.v3.1.x","name":"transaction.response.v3.1.x","moduleId":760453}}},"requestDefinition":{"jsonSchema":{"$ref":"#/definitions/7253979"}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"574e4fb9-b869-4552-b3cc-f5751155e19e","id":"7700dd80-f0b8-52d0-9d0d-e57fb2540b4b","type":"http","name":"Create an Outflow Transaction - Amount","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":42,"httpApiId":17810523,"httpApiCaseId":26070338,"httpApiName":"Create an Outflow Transaction","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/outflow","httpApiMethod":"post","httpApiCaseName":"Create an Outflow Transaction","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"481988ee-a65e-5b87-b87e-3a288b9af3b7","name":"Create an Outflow Transaction - Share","request":{"url":{"protocol":"http","port":"3001","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","transactions","outflow"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-Idempotency","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-TTL","value":"{{$number.int(min=0,max=3600)}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","baseUrl":"http://127.0.0.1:3001","body":{"mode":"raw","raw":"{\n    \"description\": \"regression test\",\n    \"metadata\": {\n        \"key\": \"value\"\n    },\n    \"send\": {\n        \"asset\": \"BRL\",\n        \"value\": \"1.00\",\n        \"source\": {\n            \"from\": [\n                {\n                    \"accountAlias\": \"@account1_rt_BRL\",\n                    \"share\": {\n                        \"percentage\": 100\n                    },\n                    \"description\": \"regression test\",\n                    \"metadata\": {\n                        \"key\": \"value\"\n                    }\n                }\n            ]\n        }\n    }\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`transaction_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable transaction_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}}],"responseDefinition":{"id":24932090,"name":"Created","code":201,"contentType":"json","jsonSchema":{"$ref":"#/definitions/8641358"},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453},"7325329":{"type":"object","properties":{"available":{"type":"string","x-apidog-mock":"100.00"},"onHold":{"type":"string","x-apidog-mock":"0"}},"x-apidog-orders":["available","onHold"],"required":["available","onHold"],"title":"balance.values.v3.x.x","name":"balance.values.v3.x.x","moduleId":760453},"8641347":{"type":"object","properties":{"id":{"type":"string","description":"The unique identifier of the Operation.","format":"uuid"},"description":{"type":"string","description":"Description of the operation."},"transactionId":{"type":"string","format":"uuid","description":"The unique identifier of the Transaction."},"type":{"type":"string","enum":["CREDIT","DEBIT","ON_HOLD","RELEASE"],"x-apidog-enum":[{"value":"CREDIT","name":"Credit Operation","description":""},{"value":"DEBIT","name":"Debit Operation","description":""},{"value":"ON_HOLD","name":"On Hold Operation","description":"Balance reservation operation, moving the amount to the on_hold balance."},{"value":"RELEASE","name":"Release Operation","description":"Release operation of the reserved balance, returning it to the available balance"}],"description":"The type of the operation.\n`CREDIT` `DEBIT` `ON_HOLD` `RELEASE`"},"assetCode":{"type":"string","description":"The code of the asset used in the operation."},"chartOfAccounts":{"type":"string","description":"The name of the Chart-of-Accounts that the operation belongs to."},"amount":{"type":"object","properties":{"value":{"type":"string","x-apidog-mock":"100.00"}},"x-apidog-orders":["value"],"x-apidog-refs":{},"required":["value"],"description":"An object containing information about the amount used in the operation."},"balance":{"type":"object","properties":{},"x-apidog-orders":["01JXFMCY8985B99D24K818AW5N"],"x-apidog-refs":{"01JXFMCY8985B99D24K818AW5N":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance before the operation."},"balanceAfter":{"type":"object","properties":{},"x-apidog-orders":["01JXFMDFCFGMBQMPBXMDDXN41A"],"x-apidog-refs":{"01JXFMDFCFGMBQMPBXMDDXN41A":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance after the operation."},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":["string","null"]}},"x-apidog-orders":["code","description"],"required":["code","description"],"description":"The transaction status."},"accountId":{"type":"string","format":"uuid","description":"The unique identifier of the Account."},"accountAlias":{"type":"string","description":"The alias for the account used in the operation."},"balanceId":{"type":"string","description":"The unique identifier of the Balance."},"route":{"type":"string","description":"Unique identifier of the operation route assigned to this specific leg of the transaction. This must match the corresponding source and destination configuration, determining how value is moved between accounts within the transaction route."},"balanceAffected":{"type":"boolean","description":"Indicates whether the operation had an impact on the account balance."},"balanceKey":{"type":"string","description":"The key identifier of the Balance"}},"x-apidog-orders":["id","transactionId","01JN71H2XZAMF6F0KY5QH2XTD6","accountId","accountAlias","balanceId","balanceKey","description","type","assetCode","chartOfAccounts","route","amount","balance","balanceAfter","status","balanceAffected","01JN718VEVJGSYKGXJ4PYFJ64Z","01JN718VKY0WWKT5F4317HNQF5"],"required":["id","description","transactionId","type","assetCode","chartOfAccounts","amount","balance","balanceAfter","status","accountId","accountAlias","balanceId","route","balanceAffected","balanceKey"],"x-apidog-refs":{"01JN718VEVJGSYKGXJ4PYFJ64Z":{"$ref":"#/definitions/5299902"},"01JN718VKY0WWKT5F4317HNQF5":{"$ref":"#/definitions/5295307"},"01JN71H2XZAMF6F0KY5QH2XTD6":{"$ref":"#/definitions/5365047"}},"title":"operation.response.v3.1.x","name":"operation.response.v3.1.x","moduleId":760453},"8641358":{"type":"object","properties":{"id":{"type":"string","description":"ID","format":"uuid"},"description":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"x-apidog-orders":["code","description"],"required":["code","description"]},"amount":{"type":"string"},"assetCode":{"type":"string"},"chartOfAccountsGroupName":{"type":"string"},"source":{"type":"array","items":{"type":"string"}},"destination":{"type":"array","items":{"type":"string"}},"operations":{"type":"array","items":{"$ref":"#/definitions/8641347"}},"route":{"type":"string"}},"x-apidog-orders":["id","01JN71ZQSPF1SPSM597SH2N81C","description","route","status","amount","assetCode","chartOfAccountsGroupName","source","destination","01JN72166CQABKZ83FTCMTEQ2S","operations","01JN7275ZNTQQN1PN8XN5ZHHQF"],"required":["id","description","status","amount","assetCode","chartOfAccountsGroupName","source","destination","operations"],"x-apidog-refs":{"01JN71ZQSPF1SPSM597SH2N81C":{"$ref":"#/definitions/5365047"},"01JN72166CQABKZ83FTCMTEQ2S":{"$ref":"#/definitions/5299902"},"01JN7275ZNTQQN1PN8XN5ZHHQF":{"$ref":"#/definitions/5295307"}},"title":"transaction.response.v3.1.x","name":"transaction.response.v3.1.x","moduleId":760453}}},"requestDefinition":{"jsonSchema":{"$ref":"#/definitions/7253979"}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"65540e14-d8be-4f12-9447-78ab58ad117b","id":"481988ee-a65e-5b87-b87e-3a288b9af3b7","type":"http","name":"Create an Outflow Transaction - Share","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":43,"httpApiId":17810523,"httpApiCaseId":26070341,"httpApiName":"Create an Outflow Transaction","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/outflow","httpApiMethod":"post","httpApiCaseName":"Create an Outflow Transaction","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"b7d0bbf9-bcee-5fa4-bc56-2e7b3f760bb6","name":"Create an Outflow Transaction - Remaining","request":{"url":{"protocol":"http","port":"3001","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","transactions","outflow"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-Idempotency","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-TTL","value":"{{$number.int(min=0,max=3600)}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","baseUrl":"http://127.0.0.1:3001","body":{"mode":"raw","raw":"{\n    \"description\": \"regression test\",\n    \"metadata\": {\n        \"key\": \"value\"\n    },\n    \"send\": {\n        \"asset\": \"BRL\",\n        \"value\": \"1.00\",\n        \"source\": {\n            \"from\": [\n                {\n                    \"accountAlias\": \"@account1_rt_BRL\",\n                    \"remaining\": \"remaining\",\n                    \"description\": \"regression test\",\n                    \"metadata\": {\n                        \"key\": \"value\"\n                    }\n                }\n            ]\n        }\n    }\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`transaction_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable transaction_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}}],"responseDefinition":{"id":24932090,"name":"Created","code":201,"contentType":"json","jsonSchema":{"$ref":"#/definitions/8641358"},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453},"7325329":{"type":"object","properties":{"available":{"type":"string","x-apidog-mock":"100.00"},"onHold":{"type":"string","x-apidog-mock":"0"}},"x-apidog-orders":["available","onHold"],"required":["available","onHold"],"title":"balance.values.v3.x.x","name":"balance.values.v3.x.x","moduleId":760453},"8641347":{"type":"object","properties":{"id":{"type":"string","description":"The unique identifier of the Operation.","format":"uuid"},"description":{"type":"string","description":"Description of the operation."},"transactionId":{"type":"string","format":"uuid","description":"The unique identifier of the Transaction."},"type":{"type":"string","enum":["CREDIT","DEBIT","ON_HOLD","RELEASE"],"x-apidog-enum":[{"value":"CREDIT","name":"Credit Operation","description":""},{"value":"DEBIT","name":"Debit Operation","description":""},{"value":"ON_HOLD","name":"On Hold Operation","description":"Balance reservation operation, moving the amount to the on_hold balance."},{"value":"RELEASE","name":"Release Operation","description":"Release operation of the reserved balance, returning it to the available balance"}],"description":"The type of the operation.\n`CREDIT` `DEBIT` `ON_HOLD` `RELEASE`"},"assetCode":{"type":"string","description":"The code of the asset used in the operation."},"chartOfAccounts":{"type":"string","description":"The name of the Chart-of-Accounts that the operation belongs to."},"amount":{"type":"object","properties":{"value":{"type":"string","x-apidog-mock":"100.00"}},"x-apidog-orders":["value"],"x-apidog-refs":{},"required":["value"],"description":"An object containing information about the amount used in the operation."},"balance":{"type":"object","properties":{},"x-apidog-orders":["01JXFMCY8985B99D24K818AW5N"],"x-apidog-refs":{"01JXFMCY8985B99D24K818AW5N":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance before the operation."},"balanceAfter":{"type":"object","properties":{},"x-apidog-orders":["01JXFMDFCFGMBQMPBXMDDXN41A"],"x-apidog-refs":{"01JXFMDFCFGMBQMPBXMDDXN41A":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance after the operation."},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":["string","null"]}},"x-apidog-orders":["code","description"],"required":["code","description"],"description":"The transaction status."},"accountId":{"type":"string","format":"uuid","description":"The unique identifier of the Account."},"accountAlias":{"type":"string","description":"The alias for the account used in the operation."},"balanceId":{"type":"string","description":"The unique identifier of the Balance."},"route":{"type":"string","description":"Unique identifier of the operation route assigned to this specific leg of the transaction. This must match the corresponding source and destination configuration, determining how value is moved between accounts within the transaction route."},"balanceAffected":{"type":"boolean","description":"Indicates whether the operation had an impact on the account balance."},"balanceKey":{"type":"string","description":"The key identifier of the Balance"}},"x-apidog-orders":["id","transactionId","01JN71H2XZAMF6F0KY5QH2XTD6","accountId","accountAlias","balanceId","balanceKey","description","type","assetCode","chartOfAccounts","route","amount","balance","balanceAfter","status","balanceAffected","01JN718VEVJGSYKGXJ4PYFJ64Z","01JN718VKY0WWKT5F4317HNQF5"],"required":["id","description","transactionId","type","assetCode","chartOfAccounts","amount","balance","balanceAfter","status","accountId","accountAlias","balanceId","route","balanceAffected","balanceKey"],"x-apidog-refs":{"01JN718VEVJGSYKGXJ4PYFJ64Z":{"$ref":"#/definitions/5299902"},"01JN718VKY0WWKT5F4317HNQF5":{"$ref":"#/definitions/5295307"},"01JN71H2XZAMF6F0KY5QH2XTD6":{"$ref":"#/definitions/5365047"}},"title":"operation.response.v3.1.x","name":"operation.response.v3.1.x","moduleId":760453},"8641358":{"type":"object","properties":{"id":{"type":"string","description":"ID","format":"uuid"},"description":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"x-apidog-orders":["code","description"],"required":["code","description"]},"amount":{"type":"string"},"assetCode":{"type":"string"},"chartOfAccountsGroupName":{"type":"string"},"source":{"type":"array","items":{"type":"string"}},"destination":{"type":"array","items":{"type":"string"}},"operations":{"type":"array","items":{"$ref":"#/definitions/8641347"}},"route":{"type":"string"}},"x-apidog-orders":["id","01JN71ZQSPF1SPSM597SH2N81C","description","route","status","amount","assetCode","chartOfAccountsGroupName","source","destination","01JN72166CQABKZ83FTCMTEQ2S","operations","01JN7275ZNTQQN1PN8XN5ZHHQF"],"required":["id","description","status","amount","assetCode","chartOfAccountsGroupName","source","destination","operations"],"x-apidog-refs":{"01JN71ZQSPF1SPSM597SH2N81C":{"$ref":"#/definitions/5365047"},"01JN72166CQABKZ83FTCMTEQ2S":{"$ref":"#/definitions/5299902"},"01JN7275ZNTQQN1PN8XN5ZHHQF":{"$ref":"#/definitions/5295307"}},"title":"transaction.response.v3.1.x","name":"transaction.response.v3.1.x","moduleId":760453}}},"requestDefinition":{"jsonSchema":{"$ref":"#/definitions/7253979"}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"ec74b698-9931-47e7-a3b6-fc8733c753fe","id":"b7d0bbf9-bcee-5fa4-bc56-2e7b3f760bb6","type":"http","name":"Create an Outflow Transaction - Remaining","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":44,"httpApiId":17810523,"httpApiCaseId":26070343,"httpApiName":"Create an Outflow Transaction","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/outflow","httpApiMethod":"post","httpApiCaseName":"Create an Outflow Transaction","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":true,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"c1b2185a-5934-5d88-83cf-ce52cb02cb49","type":"group","metaInfo":{"id":"c1b2185a-5934-5d88-83cf-ce52cb02cb49","type":"group","scopeType":"end","scopeStartId":"bc8882fa-3581-5c82-b1b9-a1b15543e634"}},{"id":"3270a21d-042d-549b-88b7-334f6a6c2b85","type":"group","metaInfo":{"id":"3270a21d-042d-549b-88b7-334f6a6c2b85","type":"group","scopeType":"start","scopeEndId":"72793bc2-b842-5208-a459-d8a243205c67","name":"Internal Transactions"}},{"id":"a218b0d5-2149-5e07-9904-571d8cbdd737","name":"Create a JSON Transaction - Amount 1:1 ","request":{"url":{"protocol":"http","port":"3001","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","transactions","json"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-Idempotency","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-TTL","value":"{{$number.int(min=0,max=3600)}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","baseUrl":"http://127.0.0.1:3001","body":{"mode":"raw","raw":"{\n    \"description\": \"regression test\",\n    \"metadata\": {\n        \"key\": \"value\"\n    },\n    \"send\": {\n        \"asset\": \"BRL\",\n        \"value\": \"1.00\",\n        \"source\": {\n            \"from\": [\n                {\n                    \"accountAlias\": \"@account1_rt_BRL\",\n                    \"amount\": {\n                        \"asset\": \"BRL\",\n                        \"value\": \"1.00\"\n                    },\n                    \"description\": \"regression test\",\n                    \"metadata\": {\n                        \"key\": \"value\"\n                    }\n                }\n            ]\n        },\n        \"distribute\": {\n            \"to\": [\n                {\n                    \"accountAlias\": \"@account2_rt_BRL\",\n                    \"amount\": {\n                        \"asset\": \"BRL\",\n                        \"value\": \"1.00\"\n                    },\n                    \"description\": \"regression test\",\n                    \"metadata\": {\n                        \"key\": \"value\"\n                    }\n                }\n            ]\n        }\n    }\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`transaction_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable transaction_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}}],"responseDefinition":{"id":24931433,"name":"Created","code":201,"contentType":"json","jsonSchema":{"$ref":"#/definitions/8641358"},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453},"7325329":{"type":"object","properties":{"available":{"type":"string","x-apidog-mock":"100.00"},"onHold":{"type":"string","x-apidog-mock":"0"}},"x-apidog-orders":["available","onHold"],"required":["available","onHold"],"title":"balance.values.v3.x.x","name":"balance.values.v3.x.x","moduleId":760453},"8641347":{"type":"object","properties":{"id":{"type":"string","description":"The unique identifier of the Operation.","format":"uuid"},"description":{"type":"string","description":"Description of the operation."},"transactionId":{"type":"string","format":"uuid","description":"The unique identifier of the Transaction."},"type":{"type":"string","enum":["CREDIT","DEBIT","ON_HOLD","RELEASE"],"x-apidog-enum":[{"value":"CREDIT","name":"Credit Operation","description":""},{"value":"DEBIT","name":"Debit Operation","description":""},{"value":"ON_HOLD","name":"On Hold Operation","description":"Balance reservation operation, moving the amount to the on_hold balance."},{"value":"RELEASE","name":"Release Operation","description":"Release operation of the reserved balance, returning it to the available balance"}],"description":"The type of the operation.\n`CREDIT` `DEBIT` `ON_HOLD` `RELEASE`"},"assetCode":{"type":"string","description":"The code of the asset used in the operation."},"chartOfAccounts":{"type":"string","description":"The name of the Chart-of-Accounts that the operation belongs to."},"amount":{"type":"object","properties":{"value":{"type":"string","x-apidog-mock":"100.00"}},"x-apidog-orders":["value"],"x-apidog-refs":{},"required":["value"],"description":"An object containing information about the amount used in the operation."},"balance":{"type":"object","properties":{},"x-apidog-orders":["01JXFMCY8985B99D24K818AW5N"],"x-apidog-refs":{"01JXFMCY8985B99D24K818AW5N":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance before the operation."},"balanceAfter":{"type":"object","properties":{},"x-apidog-orders":["01JXFMDFCFGMBQMPBXMDDXN41A"],"x-apidog-refs":{"01JXFMDFCFGMBQMPBXMDDXN41A":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance after the operation."},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":["string","null"]}},"x-apidog-orders":["code","description"],"required":["code","description"],"description":"The transaction status."},"accountId":{"type":"string","format":"uuid","description":"The unique identifier of the Account."},"accountAlias":{"type":"string","description":"The alias for the account used in the operation."},"balanceId":{"type":"string","description":"The unique identifier of the Balance."},"route":{"type":"string","description":"Unique identifier of the operation route assigned to this specific leg of the transaction. This must match the corresponding source and destination configuration, determining how value is moved between accounts within the transaction route."},"balanceAffected":{"type":"boolean","description":"Indicates whether the operation had an impact on the account balance."},"balanceKey":{"type":"string","description":"The key identifier of the Balance"}},"x-apidog-orders":["id","transactionId","01JN71H2XZAMF6F0KY5QH2XTD6","accountId","accountAlias","balanceId","balanceKey","description","type","assetCode","chartOfAccounts","route","amount","balance","balanceAfter","status","balanceAffected","01JN718VEVJGSYKGXJ4PYFJ64Z","01JN718VKY0WWKT5F4317HNQF5"],"required":["id","description","transactionId","type","assetCode","chartOfAccounts","amount","balance","balanceAfter","status","accountId","accountAlias","balanceId","route","balanceAffected","balanceKey"],"x-apidog-refs":{"01JN718VEVJGSYKGXJ4PYFJ64Z":{"$ref":"#/definitions/5299902"},"01JN718VKY0WWKT5F4317HNQF5":{"$ref":"#/definitions/5295307"},"01JN71H2XZAMF6F0KY5QH2XTD6":{"$ref":"#/definitions/5365047"}},"title":"operation.response.v3.1.x","name":"operation.response.v3.1.x","moduleId":760453},"8641358":{"type":"object","properties":{"id":{"type":"string","description":"ID","format":"uuid"},"description":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"x-apidog-orders":["code","description"],"required":["code","description"]},"amount":{"type":"string"},"assetCode":{"type":"string"},"chartOfAccountsGroupName":{"type":"string"},"source":{"type":"array","items":{"type":"string"}},"destination":{"type":"array","items":{"type":"string"}},"operations":{"type":"array","items":{"$ref":"#/definitions/8641347"}},"route":{"type":"string"}},"x-apidog-orders":["id","01JN71ZQSPF1SPSM597SH2N81C","description","route","status","amount","assetCode","chartOfAccountsGroupName","source","destination","01JN72166CQABKZ83FTCMTEQ2S","operations","01JN7275ZNTQQN1PN8XN5ZHHQF"],"required":["id","description","status","amount","assetCode","chartOfAccountsGroupName","source","destination","operations"],"x-apidog-refs":{"01JN71ZQSPF1SPSM597SH2N81C":{"$ref":"#/definitions/5365047"},"01JN72166CQABKZ83FTCMTEQ2S":{"$ref":"#/definitions/5299902"},"01JN7275ZNTQQN1PN8XN5ZHHQF":{"$ref":"#/definitions/5295307"}},"title":"transaction.response.v3.1.x","name":"transaction.response.v3.1.x","moduleId":760453}}},"requestDefinition":{"jsonSchema":{"$ref":"#/definitions/8643885"}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"275b228a-10f7-43cc-b13e-a726e16dc043","id":"a218b0d5-2149-5e07-9904-571d8cbdd737","type":"http","name":"Create a JSON Transaction - Amount 1:1 ","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":46,"httpApiId":17810516,"httpApiCaseId":26070352,"httpApiName":"Create a JSON Transaction ","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/json","httpApiMethod":"post","httpApiCaseName":"Create a JSON Transaction ","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":true,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"d8910109-bd47-53d3-88af-c915d81c9617","name":"Create a JSON Transaction - Amount 1:N","request":{"url":{"protocol":"http","port":"3001","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","transactions","json"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-Idempotency","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-TTL","value":"{{$number.int(min=0,max=3600)}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","baseUrl":"http://127.0.0.1:3001","body":{"mode":"raw","raw":"{\n    \"description\": \"regression test\",\n    \"metadata\": {\n        \"key\": \"value\"\n    },\n    \"send\": {\n        \"asset\": \"BRL\",\n        \"value\": \"1.00\",\n        \"source\": {\n            \"from\": [\n                {\n                    \"accountAlias\": \"@account1_rt_BRL\",\n                    \"amount\": {\n                        \"asset\": \"BRL\",\n                        \"value\": \"1.00\"\n                    },\n                    \"description\": \"regression test\",\n                    \"metadata\": {\n                        \"key\": \"value\"\n                    }\n                }\n            ]\n        },\n        \"distribute\": {\n            \"to\": [\n                {\n                    \"accountAlias\": \"@account2_rt_BRL\",\n                    \"amount\": {\n                        \"asset\": \"BRL\",\n                        \"value\": \"0.50\"\n                    },\n                    \"description\": \"regression test\",\n                    \"metadata\": {\n                        \"key\": \"value\"\n                    }\n                },\n                {\n                    \"accountAlias\": \"@account3_rt_BRL\",\n                    \"amount\": {\n                        \"asset\": \"BRL\",\n                        \"value\": \"0.50\"\n                    },\n                    \"description\": \"regression test\",\n                    \"metadata\": {\n                        \"key\": \"value\"\n                    }\n                }\n            ]\n        }\n    }\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`transaction_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable transaction_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}}],"responseDefinition":{"id":24931433,"name":"Created","code":201,"contentType":"json","jsonSchema":{"$ref":"#/definitions/8641358"},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453},"7325329":{"type":"object","properties":{"available":{"type":"string","x-apidog-mock":"100.00"},"onHold":{"type":"string","x-apidog-mock":"0"}},"x-apidog-orders":["available","onHold"],"required":["available","onHold"],"title":"balance.values.v3.x.x","name":"balance.values.v3.x.x","moduleId":760453},"8641347":{"type":"object","properties":{"id":{"type":"string","description":"The unique identifier of the Operation.","format":"uuid"},"description":{"type":"string","description":"Description of the operation."},"transactionId":{"type":"string","format":"uuid","description":"The unique identifier of the Transaction."},"type":{"type":"string","enum":["CREDIT","DEBIT","ON_HOLD","RELEASE"],"x-apidog-enum":[{"value":"CREDIT","name":"Credit Operation","description":""},{"value":"DEBIT","name":"Debit Operation","description":""},{"value":"ON_HOLD","name":"On Hold Operation","description":"Balance reservation operation, moving the amount to the on_hold balance."},{"value":"RELEASE","name":"Release Operation","description":"Release operation of the reserved balance, returning it to the available balance"}],"description":"The type of the operation.\n`CREDIT` `DEBIT` `ON_HOLD` `RELEASE`"},"assetCode":{"type":"string","description":"The code of the asset used in the operation."},"chartOfAccounts":{"type":"string","description":"The name of the Chart-of-Accounts that the operation belongs to."},"amount":{"type":"object","properties":{"value":{"type":"string","x-apidog-mock":"100.00"}},"x-apidog-orders":["value"],"x-apidog-refs":{},"required":["value"],"description":"An object containing information about the amount used in the operation."},"balance":{"type":"object","properties":{},"x-apidog-orders":["01JXFMCY8985B99D24K818AW5N"],"x-apidog-refs":{"01JXFMCY8985B99D24K818AW5N":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance before the operation."},"balanceAfter":{"type":"object","properties":{},"x-apidog-orders":["01JXFMDFCFGMBQMPBXMDDXN41A"],"x-apidog-refs":{"01JXFMDFCFGMBQMPBXMDDXN41A":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance after the operation."},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":["string","null"]}},"x-apidog-orders":["code","description"],"required":["code","description"],"description":"The transaction status."},"accountId":{"type":"string","format":"uuid","description":"The unique identifier of the Account."},"accountAlias":{"type":"string","description":"The alias for the account used in the operation."},"balanceId":{"type":"string","description":"The unique identifier of the Balance."},"route":{"type":"string","description":"Unique identifier of the operation route assigned to this specific leg of the transaction. This must match the corresponding source and destination configuration, determining how value is moved between accounts within the transaction route."},"balanceAffected":{"type":"boolean","description":"Indicates whether the operation had an impact on the account balance."},"balanceKey":{"type":"string","description":"The key identifier of the Balance"}},"x-apidog-orders":["id","transactionId","01JN71H2XZAMF6F0KY5QH2XTD6","accountId","accountAlias","balanceId","balanceKey","description","type","assetCode","chartOfAccounts","route","amount","balance","balanceAfter","status","balanceAffected","01JN718VEVJGSYKGXJ4PYFJ64Z","01JN718VKY0WWKT5F4317HNQF5"],"required":["id","description","transactionId","type","assetCode","chartOfAccounts","amount","balance","balanceAfter","status","accountId","accountAlias","balanceId","route","balanceAffected","balanceKey"],"x-apidog-refs":{"01JN718VEVJGSYKGXJ4PYFJ64Z":{"$ref":"#/definitions/5299902"},"01JN718VKY0WWKT5F4317HNQF5":{"$ref":"#/definitions/5295307"},"01JN71H2XZAMF6F0KY5QH2XTD6":{"$ref":"#/definitions/5365047"}},"title":"operation.response.v3.1.x","name":"operation.response.v3.1.x","moduleId":760453},"8641358":{"type":"object","properties":{"id":{"type":"string","description":"ID","format":"uuid"},"description":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"x-apidog-orders":["code","description"],"required":["code","description"]},"amount":{"type":"string"},"assetCode":{"type":"string"},"chartOfAccountsGroupName":{"type":"string"},"source":{"type":"array","items":{"type":"string"}},"destination":{"type":"array","items":{"type":"string"}},"operations":{"type":"array","items":{"$ref":"#/definitions/8641347"}},"route":{"type":"string"}},"x-apidog-orders":["id","01JN71ZQSPF1SPSM597SH2N81C","description","route","status","amount","assetCode","chartOfAccountsGroupName","source","destination","01JN72166CQABKZ83FTCMTEQ2S","operations","01JN7275ZNTQQN1PN8XN5ZHHQF"],"required":["id","description","status","amount","assetCode","chartOfAccountsGroupName","source","destination","operations"],"x-apidog-refs":{"01JN71ZQSPF1SPSM597SH2N81C":{"$ref":"#/definitions/5365047"},"01JN72166CQABKZ83FTCMTEQ2S":{"$ref":"#/definitions/5299902"},"01JN7275ZNTQQN1PN8XN5ZHHQF":{"$ref":"#/definitions/5295307"}},"title":"transaction.response.v3.1.x","name":"transaction.response.v3.1.x","moduleId":760453}}},"requestDefinition":{"jsonSchema":{"$ref":"#/definitions/8643885"}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"df0d5850-4c32-43de-aa4d-10165ea2663a","id":"d8910109-bd47-53d3-88af-c915d81c9617","type":"http","name":"Create a JSON Transaction - Amount 1:N","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":47,"httpApiId":17810516,"httpApiCaseId":26070356,"httpApiName":"Create a JSON Transaction ","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/json","httpApiMethod":"post","httpApiCaseName":"Create a JSON Transaction ","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":true,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"3828c394-e24b-5c5e-87cd-dbb4a41a0bed","name":"Create a JSON Transaction - Share 1:1","request":{"url":{"protocol":"http","port":"3001","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","transactions","json"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-Idempotency","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-TTL","value":"{{$number.int(min=0,max=3600)}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","baseUrl":"http://127.0.0.1:3001","body":{"mode":"raw","raw":"{\n    \"description\": \"regression test\",\n    \"metadata\": {\n        \"key\": \"value\"\n    },\n    \"send\": {\n        \"asset\": \"BRL\",\n        \"value\": \"1.00\",\n        \"source\": {\n            \"from\": [\n                {\n                    \"accountAlias\": \"@account1_rt_BRL\",\n                    \"share\": {\n                        \"percentage\": 100\n                    },\n                    \"description\": \"regression test\",\n                    \"metadata\": {\n                        \"key\": \"value\"\n                    }\n                }\n            ]\n        },\n        \"distribute\": {\n            \"to\": [\n                {\n                    \"accountAlias\": \"@account3_rt_BRL\",\n                    \"share\": {\n                        \"percentage\": 100\n                    },\n                    \"description\": \"regression test\",\n                    \"metadata\": {\n                        \"key\": \"value\"\n                    }\n                }\n            ]\n        }\n    }\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`transaction_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable transaction_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}}],"responseDefinition":{"id":24931433,"name":"Created","code":201,"contentType":"json","jsonSchema":{"$ref":"#/definitions/8641358"},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453},"7325329":{"type":"object","properties":{"available":{"type":"string","x-apidog-mock":"100.00"},"onHold":{"type":"string","x-apidog-mock":"0"}},"x-apidog-orders":["available","onHold"],"required":["available","onHold"],"title":"balance.values.v3.x.x","name":"balance.values.v3.x.x","moduleId":760453},"8641347":{"type":"object","properties":{"id":{"type":"string","description":"The unique identifier of the Operation.","format":"uuid"},"description":{"type":"string","description":"Description of the operation."},"transactionId":{"type":"string","format":"uuid","description":"The unique identifier of the Transaction."},"type":{"type":"string","enum":["CREDIT","DEBIT","ON_HOLD","RELEASE"],"x-apidog-enum":[{"value":"CREDIT","name":"Credit Operation","description":""},{"value":"DEBIT","name":"Debit Operation","description":""},{"value":"ON_HOLD","name":"On Hold Operation","description":"Balance reservation operation, moving the amount to the on_hold balance."},{"value":"RELEASE","name":"Release Operation","description":"Release operation of the reserved balance, returning it to the available balance"}],"description":"The type of the operation.\n`CREDIT` `DEBIT` `ON_HOLD` `RELEASE`"},"assetCode":{"type":"string","description":"The code of the asset used in the operation."},"chartOfAccounts":{"type":"string","description":"The name of the Chart-of-Accounts that the operation belongs to."},"amount":{"type":"object","properties":{"value":{"type":"string","x-apidog-mock":"100.00"}},"x-apidog-orders":["value"],"x-apidog-refs":{},"required":["value"],"description":"An object containing information about the amount used in the operation."},"balance":{"type":"object","properties":{},"x-apidog-orders":["01JXFMCY8985B99D24K818AW5N"],"x-apidog-refs":{"01JXFMCY8985B99D24K818AW5N":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance before the operation."},"balanceAfter":{"type":"object","properties":{},"x-apidog-orders":["01JXFMDFCFGMBQMPBXMDDXN41A"],"x-apidog-refs":{"01JXFMDFCFGMBQMPBXMDDXN41A":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance after the operation."},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":["string","null"]}},"x-apidog-orders":["code","description"],"required":["code","description"],"description":"The transaction status."},"accountId":{"type":"string","format":"uuid","description":"The unique identifier of the Account."},"accountAlias":{"type":"string","description":"The alias for the account used in the operation."},"balanceId":{"type":"string","description":"The unique identifier of the Balance."},"route":{"type":"string","description":"Unique identifier of the operation route assigned to this specific leg of the transaction. This must match the corresponding source and destination configuration, determining how value is moved between accounts within the transaction route."},"balanceAffected":{"type":"boolean","description":"Indicates whether the operation had an impact on the account balance."},"balanceKey":{"type":"string","description":"The key identifier of the Balance"}},"x-apidog-orders":["id","transactionId","01JN71H2XZAMF6F0KY5QH2XTD6","accountId","accountAlias","balanceId","balanceKey","description","type","assetCode","chartOfAccounts","route","amount","balance","balanceAfter","status","balanceAffected","01JN718VEVJGSYKGXJ4PYFJ64Z","01JN718VKY0WWKT5F4317HNQF5"],"required":["id","description","transactionId","type","assetCode","chartOfAccounts","amount","balance","balanceAfter","status","accountId","accountAlias","balanceId","route","balanceAffected","balanceKey"],"x-apidog-refs":{"01JN718VEVJGSYKGXJ4PYFJ64Z":{"$ref":"#/definitions/5299902"},"01JN718VKY0WWKT5F4317HNQF5":{"$ref":"#/definitions/5295307"},"01JN71H2XZAMF6F0KY5QH2XTD6":{"$ref":"#/definitions/5365047"}},"title":"operation.response.v3.1.x","name":"operation.response.v3.1.x","moduleId":760453},"8641358":{"type":"object","properties":{"id":{"type":"string","description":"ID","format":"uuid"},"description":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"x-apidog-orders":["code","description"],"required":["code","description"]},"amount":{"type":"string"},"assetCode":{"type":"string"},"chartOfAccountsGroupName":{"type":"string"},"source":{"type":"array","items":{"type":"string"}},"destination":{"type":"array","items":{"type":"string"}},"operations":{"type":"array","items":{"$ref":"#/definitions/8641347"}},"route":{"type":"string"}},"x-apidog-orders":["id","01JN71ZQSPF1SPSM597SH2N81C","description","route","status","amount","assetCode","chartOfAccountsGroupName","source","destination","01JN72166CQABKZ83FTCMTEQ2S","operations","01JN7275ZNTQQN1PN8XN5ZHHQF"],"required":["id","description","status","amount","assetCode","chartOfAccountsGroupName","source","destination","operations"],"x-apidog-refs":{"01JN71ZQSPF1SPSM597SH2N81C":{"$ref":"#/definitions/5365047"},"01JN72166CQABKZ83FTCMTEQ2S":{"$ref":"#/definitions/5299902"},"01JN7275ZNTQQN1PN8XN5ZHHQF":{"$ref":"#/definitions/5295307"}},"title":"transaction.response.v3.1.x","name":"transaction.response.v3.1.x","moduleId":760453}}},"requestDefinition":{"jsonSchema":{"$ref":"#/definitions/8643885"}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"99cee691-8ade-4255-a60f-1c829e925041","id":"3828c394-e24b-5c5e-87cd-dbb4a41a0bed","type":"http","name":"Create a JSON Transaction - Share 1:1","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":48,"httpApiId":17810516,"httpApiCaseId":26070373,"httpApiName":"Create a JSON Transaction ","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/json","httpApiMethod":"post","httpApiCaseName":"Create a JSON Transaction ","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":true,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"83d0891b-34e8-5601-b15a-d895bfc75907","name":"Create a JSON Transaction - Share 1:N","request":{"url":{"protocol":"http","port":"3001","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","transactions","json"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-Idempotency","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-TTL","value":"{{$number.int(min=0,max=3600)}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","baseUrl":"http://127.0.0.1:3001","body":{"mode":"raw","raw":"{\n    \"description\": \"regression test\",\n    \"metadata\": {\n        \"key\": \"value\"\n    },\n    \"send\": {\n        \"asset\": \"BRL\",\n        \"value\": \"1.00\",\n        \"source\": {\n            \"from\": [\n                {\n                    \"accountAlias\": \"@account1_rt_BRL\",\n                    \"share\": {\n                        \"percentage\": 100\n                    },\n                    \"description\": \"regression test\",\n                    \"metadata\": {\n                        \"key\": \"value\"\n                    }\n                }\n            ]\n        },\n        \"distribute\": {\n            \"to\": [\n                {\n                    \"accountAlias\": \"@account3_rt_BRL\",\n                    \"share\": {\n                        \"percentage\": 50\n                    },\n                    \"description\": \"regression test\",\n                    \"metadata\": {\n                        \"key\": \"value\"\n                    }\n                },\n                {\n                    \"accountAlias\": \"@account2_rt_BRL\",\n                    \"share\": {\n                        \"percentage\": 50\n                    },\n                    \"description\": \"regression test\",\n                    \"metadata\": {\n                        \"key\": \"value\"\n                    }\n                }\n            ]\n        }\n    }\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`transaction_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable transaction_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}}],"responseDefinition":{"id":24931433,"name":"Created","code":201,"contentType":"json","jsonSchema":{"$ref":"#/definitions/8641358"},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453},"7325329":{"type":"object","properties":{"available":{"type":"string","x-apidog-mock":"100.00"},"onHold":{"type":"string","x-apidog-mock":"0"}},"x-apidog-orders":["available","onHold"],"required":["available","onHold"],"title":"balance.values.v3.x.x","name":"balance.values.v3.x.x","moduleId":760453},"8641347":{"type":"object","properties":{"id":{"type":"string","description":"The unique identifier of the Operation.","format":"uuid"},"description":{"type":"string","description":"Description of the operation."},"transactionId":{"type":"string","format":"uuid","description":"The unique identifier of the Transaction."},"type":{"type":"string","enum":["CREDIT","DEBIT","ON_HOLD","RELEASE"],"x-apidog-enum":[{"value":"CREDIT","name":"Credit Operation","description":""},{"value":"DEBIT","name":"Debit Operation","description":""},{"value":"ON_HOLD","name":"On Hold Operation","description":"Balance reservation operation, moving the amount to the on_hold balance."},{"value":"RELEASE","name":"Release Operation","description":"Release operation of the reserved balance, returning it to the available balance"}],"description":"The type of the operation.\n`CREDIT` `DEBIT` `ON_HOLD` `RELEASE`"},"assetCode":{"type":"string","description":"The code of the asset used in the operation."},"chartOfAccounts":{"type":"string","description":"The name of the Chart-of-Accounts that the operation belongs to."},"amount":{"type":"object","properties":{"value":{"type":"string","x-apidog-mock":"100.00"}},"x-apidog-orders":["value"],"x-apidog-refs":{},"required":["value"],"description":"An object containing information about the amount used in the operation."},"balance":{"type":"object","properties":{},"x-apidog-orders":["01JXFMCY8985B99D24K818AW5N"],"x-apidog-refs":{"01JXFMCY8985B99D24K818AW5N":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance before the operation."},"balanceAfter":{"type":"object","properties":{},"x-apidog-orders":["01JXFMDFCFGMBQMPBXMDDXN41A"],"x-apidog-refs":{"01JXFMDFCFGMBQMPBXMDDXN41A":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance after the operation."},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":["string","null"]}},"x-apidog-orders":["code","description"],"required":["code","description"],"description":"The transaction status."},"accountId":{"type":"string","format":"uuid","description":"The unique identifier of the Account."},"accountAlias":{"type":"string","description":"The alias for the account used in the operation."},"balanceId":{"type":"string","description":"The unique identifier of the Balance."},"route":{"type":"string","description":"Unique identifier of the operation route assigned to this specific leg of the transaction. This must match the corresponding source and destination configuration, determining how value is moved between accounts within the transaction route."},"balanceAffected":{"type":"boolean","description":"Indicates whether the operation had an impact on the account balance."},"balanceKey":{"type":"string","description":"The key identifier of the Balance"}},"x-apidog-orders":["id","transactionId","01JN71H2XZAMF6F0KY5QH2XTD6","accountId","accountAlias","balanceId","balanceKey","description","type","assetCode","chartOfAccounts","route","amount","balance","balanceAfter","status","balanceAffected","01JN718VEVJGSYKGXJ4PYFJ64Z","01JN718VKY0WWKT5F4317HNQF5"],"required":["id","description","transactionId","type","assetCode","chartOfAccounts","amount","balance","balanceAfter","status","accountId","accountAlias","balanceId","route","balanceAffected","balanceKey"],"x-apidog-refs":{"01JN718VEVJGSYKGXJ4PYFJ64Z":{"$ref":"#/definitions/5299902"},"01JN718VKY0WWKT5F4317HNQF5":{"$ref":"#/definitions/5295307"},"01JN71H2XZAMF6F0KY5QH2XTD6":{"$ref":"#/definitions/5365047"}},"title":"operation.response.v3.1.x","name":"operation.response.v3.1.x","moduleId":760453},"8641358":{"type":"object","properties":{"id":{"type":"string","description":"ID","format":"uuid"},"description":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"x-apidog-orders":["code","description"],"required":["code","description"]},"amount":{"type":"string"},"assetCode":{"type":"string"},"chartOfAccountsGroupName":{"type":"string"},"source":{"type":"array","items":{"type":"string"}},"destination":{"type":"array","items":{"type":"string"}},"operations":{"type":"array","items":{"$ref":"#/definitions/8641347"}},"route":{"type":"string"}},"x-apidog-orders":["id","01JN71ZQSPF1SPSM597SH2N81C","description","route","status","amount","assetCode","chartOfAccountsGroupName","source","destination","01JN72166CQABKZ83FTCMTEQ2S","operations","01JN7275ZNTQQN1PN8XN5ZHHQF"],"required":["id","description","status","amount","assetCode","chartOfAccountsGroupName","source","destination","operations"],"x-apidog-refs":{"01JN71ZQSPF1SPSM597SH2N81C":{"$ref":"#/definitions/5365047"},"01JN72166CQABKZ83FTCMTEQ2S":{"$ref":"#/definitions/5299902"},"01JN7275ZNTQQN1PN8XN5ZHHQF":{"$ref":"#/definitions/5295307"}},"title":"transaction.response.v3.1.x","name":"transaction.response.v3.1.x","moduleId":760453}}},"requestDefinition":{"jsonSchema":{"$ref":"#/definitions/8643885"}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"e2a386aa-1a53-4d44-a799-2522ac8760b1","id":"83d0891b-34e8-5601-b15a-d895bfc75907","type":"http","name":"Create a JSON Transaction - Share 1:N","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":49,"httpApiId":17810516,"httpApiCaseId":26070375,"httpApiName":"Create a JSON Transaction ","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/json","httpApiMethod":"post","httpApiCaseName":"Create a JSON Transaction ","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":true,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"e7c45adc-f8e3-5224-a7be-7b2f4fd6c381","name":"Create a JSON Transaction - Remaining 1:1","request":{"url":{"protocol":"http","port":"3001","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","transactions","json"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-Idempotency","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-TTL","value":"{{$number.int(min=0,max=3600)}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","baseUrl":"http://127.0.0.1:3001","body":{"mode":"raw","raw":"{\n    \"description\": \"regression test\",\n    \"metadata\": {\n        \"key\": \"value\"\n    },\n    \"send\": {\n        \"asset\": \"BRL\",\n        \"value\": \"1.00\",\n        \"source\": {\n            \"from\": [\n                {\n                    \"accountAlias\": \"@account1_rt_BRL\",\n                    \"remaining\": \"remaining\",\n                    \"description\": \"regression test\",\n                    \"metadata\": {\n                        \"key\": \"value\"\n                    }\n                }\n            ]\n        },\n        \"distribute\": {\n            \"to\": [\n                {\n                    \"accountAlias\": \"@account2_rt_BRL\",\n                    \"remaining\": \"remaining\",\n                    \"description\": \"regression test\",\n                    \"metadata\": {\n                        \"key\": \"value\"\n                    }\n                }\n            ]\n        }\n    }\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`transaction_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable transaction_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}}],"responseDefinition":{"id":24931433,"name":"Created","code":201,"contentType":"json","jsonSchema":{"$ref":"#/definitions/8641358"},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453},"7325329":{"type":"object","properties":{"available":{"type":"string","x-apidog-mock":"100.00"},"onHold":{"type":"string","x-apidog-mock":"0"}},"x-apidog-orders":["available","onHold"],"required":["available","onHold"],"title":"balance.values.v3.x.x","name":"balance.values.v3.x.x","moduleId":760453},"8641347":{"type":"object","properties":{"id":{"type":"string","description":"The unique identifier of the Operation.","format":"uuid"},"description":{"type":"string","description":"Description of the operation."},"transactionId":{"type":"string","format":"uuid","description":"The unique identifier of the Transaction."},"type":{"type":"string","enum":["CREDIT","DEBIT","ON_HOLD","RELEASE"],"x-apidog-enum":[{"value":"CREDIT","name":"Credit Operation","description":""},{"value":"DEBIT","name":"Debit Operation","description":""},{"value":"ON_HOLD","name":"On Hold Operation","description":"Balance reservation operation, moving the amount to the on_hold balance."},{"value":"RELEASE","name":"Release Operation","description":"Release operation of the reserved balance, returning it to the available balance"}],"description":"The type of the operation.\n`CREDIT` `DEBIT` `ON_HOLD` `RELEASE`"},"assetCode":{"type":"string","description":"The code of the asset used in the operation."},"chartOfAccounts":{"type":"string","description":"The name of the Chart-of-Accounts that the operation belongs to."},"amount":{"type":"object","properties":{"value":{"type":"string","x-apidog-mock":"100.00"}},"x-apidog-orders":["value"],"x-apidog-refs":{},"required":["value"],"description":"An object containing information about the amount used in the operation."},"balance":{"type":"object","properties":{},"x-apidog-orders":["01JXFMCY8985B99D24K818AW5N"],"x-apidog-refs":{"01JXFMCY8985B99D24K818AW5N":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance before the operation."},"balanceAfter":{"type":"object","properties":{},"x-apidog-orders":["01JXFMDFCFGMBQMPBXMDDXN41A"],"x-apidog-refs":{"01JXFMDFCFGMBQMPBXMDDXN41A":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance after the operation."},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":["string","null"]}},"x-apidog-orders":["code","description"],"required":["code","description"],"description":"The transaction status."},"accountId":{"type":"string","format":"uuid","description":"The unique identifier of the Account."},"accountAlias":{"type":"string","description":"The alias for the account used in the operation."},"balanceId":{"type":"string","description":"The unique identifier of the Balance."},"route":{"type":"string","description":"Unique identifier of the operation route assigned to this specific leg of the transaction. This must match the corresponding source and destination configuration, determining how value is moved between accounts within the transaction route."},"balanceAffected":{"type":"boolean","description":"Indicates whether the operation had an impact on the account balance."},"balanceKey":{"type":"string","description":"The key identifier of the Balance"}},"x-apidog-orders":["id","transactionId","01JN71H2XZAMF6F0KY5QH2XTD6","accountId","accountAlias","balanceId","balanceKey","description","type","assetCode","chartOfAccounts","route","amount","balance","balanceAfter","status","balanceAffected","01JN718VEVJGSYKGXJ4PYFJ64Z","01JN718VKY0WWKT5F4317HNQF5"],"required":["id","description","transactionId","type","assetCode","chartOfAccounts","amount","balance","balanceAfter","status","accountId","accountAlias","balanceId","route","balanceAffected","balanceKey"],"x-apidog-refs":{"01JN718VEVJGSYKGXJ4PYFJ64Z":{"$ref":"#/definitions/5299902"},"01JN718VKY0WWKT5F4317HNQF5":{"$ref":"#/definitions/5295307"},"01JN71H2XZAMF6F0KY5QH2XTD6":{"$ref":"#/definitions/5365047"}},"title":"operation.response.v3.1.x","name":"operation.response.v3.1.x","moduleId":760453},"8641358":{"type":"object","properties":{"id":{"type":"string","description":"ID","format":"uuid"},"description":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"x-apidog-orders":["code","description"],"required":["code","description"]},"amount":{"type":"string"},"assetCode":{"type":"string"},"chartOfAccountsGroupName":{"type":"string"},"source":{"type":"array","items":{"type":"string"}},"destination":{"type":"array","items":{"type":"string"}},"operations":{"type":"array","items":{"$ref":"#/definitions/8641347"}},"route":{"type":"string"}},"x-apidog-orders":["id","01JN71ZQSPF1SPSM597SH2N81C","description","route","status","amount","assetCode","chartOfAccountsGroupName","source","destination","01JN72166CQABKZ83FTCMTEQ2S","operations","01JN7275ZNTQQN1PN8XN5ZHHQF"],"required":["id","description","status","amount","assetCode","chartOfAccountsGroupName","source","destination","operations"],"x-apidog-refs":{"01JN71ZQSPF1SPSM597SH2N81C":{"$ref":"#/definitions/5365047"},"01JN72166CQABKZ83FTCMTEQ2S":{"$ref":"#/definitions/5299902"},"01JN7275ZNTQQN1PN8XN5ZHHQF":{"$ref":"#/definitions/5295307"}},"title":"transaction.response.v3.1.x","name":"transaction.response.v3.1.x","moduleId":760453}}},"requestDefinition":{"jsonSchema":{"$ref":"#/definitions/8643885"}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"e4ab1e2c-f0ce-45cc-a4d6-1ebedba5255f","id":"e7c45adc-f8e3-5224-a7be-7b2f4fd6c381","type":"http","name":"Create a JSON Transaction - Remaining 1:1","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":50,"httpApiId":17810516,"httpApiCaseId":26070393,"httpApiName":"Create a JSON Transaction ","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/json","httpApiMethod":"post","httpApiCaseName":"Create a JSON Transaction ","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":true,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"fc8be634-b659-548a-a5f5-e257f96c6127","name":"Create a JSON Transaction - Remaining 1:N","request":{"url":{"protocol":"http","port":"3001","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","transactions","json"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-Idempotency","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-TTL","value":"{{$number.int(min=0,max=3600)}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","baseUrl":"http://127.0.0.1:3001","body":{"mode":"raw","raw":"{\n    \"description\": \"regression test\",\n    \"metadata\": {\n        \"key\": \"value\"\n    },\n    \"send\": {\n        \"asset\": \"BRL\",\n        \"value\": \"100\",\n        \"source\": {\n            \"from\": [\n                {\n                    \"accountAlias\": \"@account1_rt_BRL\",\n                    \"remaining\": \"remaining\",\n                    \"description\": \"regression test\",\n                    \"metadata\": {\n                        \"key\": \"value\"\n                    }\n                }\n            ]\n        },\n        \"distribute\": {\n            \"to\": [\n                {\n                    \"accountAlias\": \"@account3_rt_BRL\",\n                    \"share\": {\n                        \"percentage\": 50\n                    },\n                    \"description\": \"regression test\",\n                    \"metadata\": {\n                        \"key\": \"value\"\n                    }\n                },\n                {\n                    \"accountAlias\": \"@account2_rt_BRL\",\n                    \"remaining\": \"remaining\",\n                    \"description\": \"regression test\",\n                    \"metadata\": {\n                        \"key\": \"value\"\n                    }\n                }\n            ]\n        }\n    }\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`transaction_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable transaction_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}}],"responseDefinition":{"id":24931433,"name":"Created","code":201,"contentType":"json","jsonSchema":{"$ref":"#/definitions/8641358"},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453},"7325329":{"type":"object","properties":{"available":{"type":"string","x-apidog-mock":"100.00"},"onHold":{"type":"string","x-apidog-mock":"0"}},"x-apidog-orders":["available","onHold"],"required":["available","onHold"],"title":"balance.values.v3.x.x","name":"balance.values.v3.x.x","moduleId":760453},"8641347":{"type":"object","properties":{"id":{"type":"string","description":"The unique identifier of the Operation.","format":"uuid"},"description":{"type":"string","description":"Description of the operation."},"transactionId":{"type":"string","format":"uuid","description":"The unique identifier of the Transaction."},"type":{"type":"string","enum":["CREDIT","DEBIT","ON_HOLD","RELEASE"],"x-apidog-enum":[{"value":"CREDIT","name":"Credit Operation","description":""},{"value":"DEBIT","name":"Debit Operation","description":""},{"value":"ON_HOLD","name":"On Hold Operation","description":"Balance reservation operation, moving the amount to the on_hold balance."},{"value":"RELEASE","name":"Release Operation","description":"Release operation of the reserved balance, returning it to the available balance"}],"description":"The type of the operation.\n`CREDIT` `DEBIT` `ON_HOLD` `RELEASE`"},"assetCode":{"type":"string","description":"The code of the asset used in the operation."},"chartOfAccounts":{"type":"string","description":"The name of the Chart-of-Accounts that the operation belongs to."},"amount":{"type":"object","properties":{"value":{"type":"string","x-apidog-mock":"100.00"}},"x-apidog-orders":["value"],"x-apidog-refs":{},"required":["value"],"description":"An object containing information about the amount used in the operation."},"balance":{"type":"object","properties":{},"x-apidog-orders":["01JXFMCY8985B99D24K818AW5N"],"x-apidog-refs":{"01JXFMCY8985B99D24K818AW5N":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance before the operation."},"balanceAfter":{"type":"object","properties":{},"x-apidog-orders":["01JXFMDFCFGMBQMPBXMDDXN41A"],"x-apidog-refs":{"01JXFMDFCFGMBQMPBXMDDXN41A":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance after the operation."},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":["string","null"]}},"x-apidog-orders":["code","description"],"required":["code","description"],"description":"The transaction status."},"accountId":{"type":"string","format":"uuid","description":"The unique identifier of the Account."},"accountAlias":{"type":"string","description":"The alias for the account used in the operation."},"balanceId":{"type":"string","description":"The unique identifier of the Balance."},"route":{"type":"string","description":"Unique identifier of the operation route assigned to this specific leg of the transaction. This must match the corresponding source and destination configuration, determining how value is moved between accounts within the transaction route."},"balanceAffected":{"type":"boolean","description":"Indicates whether the operation had an impact on the account balance."},"balanceKey":{"type":"string","description":"The key identifier of the Balance"}},"x-apidog-orders":["id","transactionId","01JN71H2XZAMF6F0KY5QH2XTD6","accountId","accountAlias","balanceId","balanceKey","description","type","assetCode","chartOfAccounts","route","amount","balance","balanceAfter","status","balanceAffected","01JN718VEVJGSYKGXJ4PYFJ64Z","01JN718VKY0WWKT5F4317HNQF5"],"required":["id","description","transactionId","type","assetCode","chartOfAccounts","amount","balance","balanceAfter","status","accountId","accountAlias","balanceId","route","balanceAffected","balanceKey"],"x-apidog-refs":{"01JN718VEVJGSYKGXJ4PYFJ64Z":{"$ref":"#/definitions/5299902"},"01JN718VKY0WWKT5F4317HNQF5":{"$ref":"#/definitions/5295307"},"01JN71H2XZAMF6F0KY5QH2XTD6":{"$ref":"#/definitions/5365047"}},"title":"operation.response.v3.1.x","name":"operation.response.v3.1.x","moduleId":760453},"8641358":{"type":"object","properties":{"id":{"type":"string","description":"ID","format":"uuid"},"description":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"x-apidog-orders":["code","description"],"required":["code","description"]},"amount":{"type":"string"},"assetCode":{"type":"string"},"chartOfAccountsGroupName":{"type":"string"},"source":{"type":"array","items":{"type":"string"}},"destination":{"type":"array","items":{"type":"string"}},"operations":{"type":"array","items":{"$ref":"#/definitions/8641347"}},"route":{"type":"string"}},"x-apidog-orders":["id","01JN71ZQSPF1SPSM597SH2N81C","description","route","status","amount","assetCode","chartOfAccountsGroupName","source","destination","01JN72166CQABKZ83FTCMTEQ2S","operations","01JN7275ZNTQQN1PN8XN5ZHHQF"],"required":["id","description","status","amount","assetCode","chartOfAccountsGroupName","source","destination","operations"],"x-apidog-refs":{"01JN71ZQSPF1SPSM597SH2N81C":{"$ref":"#/definitions/5365047"},"01JN72166CQABKZ83FTCMTEQ2S":{"$ref":"#/definitions/5299902"},"01JN7275ZNTQQN1PN8XN5ZHHQF":{"$ref":"#/definitions/5295307"}},"title":"transaction.response.v3.1.x","name":"transaction.response.v3.1.x","moduleId":760453}}},"requestDefinition":{"jsonSchema":{"$ref":"#/definitions/8643885"}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"a86439f2-6f0a-48e9-af4f-10ad5751f33e","id":"fc8be634-b659-548a-a5f5-e257f96c6127","type":"http","name":"Create a JSON Transaction - Remaining 1:N","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":51,"httpApiId":17810516,"httpApiCaseId":26070395,"httpApiName":"Create a JSON Transaction ","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/json","httpApiMethod":"post","httpApiCaseName":"Create a JSON Transaction ","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":true,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"72793bc2-b842-5208-a459-d8a243205c67","type":"group","metaInfo":{"id":"72793bc2-b842-5208-a459-d8a243205c67","type":"group","scopeType":"end","scopeStartId":"3270a21d-042d-549b-88b7-334f6a6c2b85"}},{"id":"9f77a9be-01ea-5e71-8127-aad79017abbe","type":"group","metaInfo":{"id":"9f77a9be-01ea-5e71-8127-aad79017abbe","type":"group","scopeType":"start","scopeEndId":"e8bbf821-fe96-57c2-b2d4-38d8403bea9a","name":"Granular Validation"}},{"id":"29768899-6a45-53a0-b372-4c8e6076843c","name":"Create a JSON Transaction - Approved 1:1 ","request":{"url":{"protocol":"http","port":"3001","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","transactions","json"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-Idempotency","value":"123456789"},{"disabled":false,"key":"X-TTL","value":"3600"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","baseUrl":"http://127.0.0.1:3001","body":{"mode":"raw","raw":"{\n    \"chartOfAccountsGroupName\": \"chartOfAccountsGroupName\",\n    \"pending\": false,\n    \"route\": \"5656daa5-5b2a-4637-955f-e43bafceaf5d\",\n    \"description\": \"Complete Transaction\",\n    \"metadata\": {\n        \"key_1_string\": \"value_1_string\",\n        \"key_2_int\": 1,\n        \"key_3_boolean\": true\n    },\n    \"send\": {\n        \"asset\": \"BRL\",\n        \"value\": \"10000.45\",\n        \"source\": {\n            \"from\": [\n                {\n                    \"accountAlias\": \"@external/BRL\",\n                    \"amount\": {\n                        \"asset\": \"BRL\",\n                        \"value\": \"10000.45\"\n                    },\n                    \"description\": \"Complete Transaction - Source Operation\",\n                    \"route\": \"5656daa5-5b2a-4637-955f-e43bafceaf5e\",\n                    \"chartOfAccounts\": \"chartOfAccounts\",\n                    \"metadata\": {\n                        \"key_1_string\": \"value_1_string\",\n                        \"key_2_int\": 1,\n                        \"key_3_boolean\": true\n                    }\n                }\n            ]\n        },\n        \"distribute\": {\n            \"to\": [\n                {\n                    \"accountAlias\": \"@account1_rt_BRL\",\n                    \"amount\": {\n                        \"asset\": \"BRL\",\n                        \"value\": \"10000.45\"\n                    },\n                    \"chartOfAccounts\": \"chartOfAccounts\",\n                    \"description\": \"Complete Transaction - Destination Operation\",\n                    \"route\": \"5656daa5-5b2a-4637-955f-e43bafceaf5f\",\n                    \"metadata\": {\n                        \"key_1_string\": \"value_1_string\",\n                        \"key_2_int\": 1,\n                        \"key_3_boolean\": true\n                    }\n                }\n            ]\n        }\n    }\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        const responseData = pm.response.json();","const creditOperations = 1;","const debitOperations = 1;","const onHoldOperations = 0;","const releaseOperations = 0;","const statusCode = \"CREATED\"","const assetCode = \"BRL\"","const sourceAccounts = [\"@external/BRL\"];","const destinationAccounts = [\"@account1_rt_BRL\"];","","pm.test(\"Validate Transaction Status\", function () {","    pm.expect(responseData.status.code).to.be.equal(statusCode);","});","","pm.test(\"Validate Source Accounts\", function () {","    sourceAccounts.forEach(function(account) {","        pm.expect(responseData.source).to.include(account);","    });","});","","pm.test(\"Validate Destination Accounts\", function () {","    destinationAccounts.forEach(function(account) {","        pm.expect(responseData.destination).to.include(account);","    });","});","","pm.test(\"Validate Operation Data Length\", function () {","    pm.expect(responseData.operations.length).to.be.equal(creditOperations+debitOperations+onHoldOperations+releaseOperations);","});","","pm.test(\"Validate Asset Code \", function () {","    pm.expect(responseData.assetCode).to.be.equal(\"BRL\");","});","","pm.test(\"Validate CREDIT operation quantity\", function () {","    const creditOp = responseData.operations.filter(op => op.type === 'CREDIT');","    pm.expect(creditOp.length).to.be.equal(creditOperations);","});","","pm.test(\"Validate DEBIT operation quantity\", function () {","    const debitOp = responseData.operations.filter(op => op.type === 'DEBIT');","    pm.expect(debitOp.length).to.eql(debitOperations);","});","","pm.test(\"Validate ON_HOLD operation quantity\", function () {","    const heldOp = responseData.operations.filter(op => op.type === 'ON_HOLD');","    pm.expect(heldOp.length).to.eql(onHoldOperations);","});","","pm.test(\"Validate RELEASE operation quantity\", function () {","    const releaseOp = responseData.operations.filter(op => op.type === 'RELEASE');","    pm.expect(releaseOp.length).to.eql(releaseOperations);","});","","pm.test(\"Validate Transaction Metadata\", function () {","    pm.expect(Object.keys(responseData.metadata).length).to.eql(3);","});","","for (const op in responseData.operations) {","    pm.test(`Validate Operation ${op} Metadata`, function () {","    pm.expect(Object.keys(responseData.operations[op].metadata).length).to.eql(3);","});","}","      "]}}],"responseDefinition":{"id":24931433,"name":"Created","code":201,"contentType":"json","jsonSchema":{"$ref":"#/definitions/8641358"},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453},"7325329":{"type":"object","properties":{"available":{"type":"string","x-apidog-mock":"100.00"},"onHold":{"type":"string","x-apidog-mock":"0"}},"x-apidog-orders":["available","onHold"],"required":["available","onHold"],"title":"balance.values.v3.x.x","name":"balance.values.v3.x.x","moduleId":760453},"8641347":{"type":"object","properties":{"id":{"type":"string","description":"The unique identifier of the Operation.","format":"uuid"},"description":{"type":"string","description":"Description of the operation."},"transactionId":{"type":"string","format":"uuid","description":"The unique identifier of the Transaction."},"type":{"type":"string","enum":["CREDIT","DEBIT","ON_HOLD","RELEASE"],"x-apidog-enum":[{"value":"CREDIT","name":"Credit Operation","description":""},{"value":"DEBIT","name":"Debit Operation","description":""},{"value":"ON_HOLD","name":"On Hold Operation","description":"Balance reservation operation, moving the amount to the on_hold balance."},{"value":"RELEASE","name":"Release Operation","description":"Release operation of the reserved balance, returning it to the available balance"}],"description":"The type of the operation.\n`CREDIT` `DEBIT` `ON_HOLD` `RELEASE`"},"assetCode":{"type":"string","description":"The code of the asset used in the operation."},"chartOfAccounts":{"type":"string","description":"The name of the Chart-of-Accounts that the operation belongs to."},"amount":{"type":"object","properties":{"value":{"type":"string","x-apidog-mock":"100.00"}},"x-apidog-orders":["value"],"x-apidog-refs":{},"required":["value"],"description":"An object containing information about the amount used in the operation."},"balance":{"type":"object","properties":{},"x-apidog-orders":["01JXFMCY8985B99D24K818AW5N"],"x-apidog-refs":{"01JXFMCY8985B99D24K818AW5N":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance before the operation."},"balanceAfter":{"type":"object","properties":{},"x-apidog-orders":["01JXFMDFCFGMBQMPBXMDDXN41A"],"x-apidog-refs":{"01JXFMDFCFGMBQMPBXMDDXN41A":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance after the operation."},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":["string","null"]}},"x-apidog-orders":["code","description"],"required":["code","description"],"description":"The transaction status."},"accountId":{"type":"string","format":"uuid","description":"The unique identifier of the Account."},"accountAlias":{"type":"string","description":"The alias for the account used in the operation."},"balanceId":{"type":"string","description":"The unique identifier of the Balance."},"route":{"type":"string","description":"Unique identifier of the operation route assigned to this specific leg of the transaction. This must match the corresponding source and destination configuration, determining how value is moved between accounts within the transaction route."},"balanceAffected":{"type":"boolean","description":"Indicates whether the operation had an impact on the account balance."},"balanceKey":{"type":"string","description":"The key identifier of the Balance"}},"x-apidog-orders":["id","transactionId","01JN71H2XZAMF6F0KY5QH2XTD6","accountId","accountAlias","balanceId","balanceKey","description","type","assetCode","chartOfAccounts","route","amount","balance","balanceAfter","status","balanceAffected","01JN718VEVJGSYKGXJ4PYFJ64Z","01JN718VKY0WWKT5F4317HNQF5"],"required":["id","description","transactionId","type","assetCode","chartOfAccounts","amount","balance","balanceAfter","status","accountId","accountAlias","balanceId","route","balanceAffected","balanceKey"],"x-apidog-refs":{"01JN718VEVJGSYKGXJ4PYFJ64Z":{"$ref":"#/definitions/5299902"},"01JN718VKY0WWKT5F4317HNQF5":{"$ref":"#/definitions/5295307"},"01JN71H2XZAMF6F0KY5QH2XTD6":{"$ref":"#/definitions/5365047"}},"title":"operation.response.v3.1.x","name":"operation.response.v3.1.x","moduleId":760453},"8641358":{"type":"object","properties":{"id":{"type":"string","description":"ID","format":"uuid"},"description":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"x-apidog-orders":["code","description"],"required":["code","description"]},"amount":{"type":"string"},"assetCode":{"type":"string"},"chartOfAccountsGroupName":{"type":"string"},"source":{"type":"array","items":{"type":"string"}},"destination":{"type":"array","items":{"type":"string"}},"operations":{"type":"array","items":{"$ref":"#/definitions/8641347"}},"route":{"type":"string"}},"x-apidog-orders":["id","01JN71ZQSPF1SPSM597SH2N81C","description","route","status","amount","assetCode","chartOfAccountsGroupName","source","destination","01JN72166CQABKZ83FTCMTEQ2S","operations","01JN7275ZNTQQN1PN8XN5ZHHQF"],"required":["id","description","status","amount","assetCode","chartOfAccountsGroupName","source","destination","operations"],"x-apidog-refs":{"01JN71ZQSPF1SPSM597SH2N81C":{"$ref":"#/definitions/5365047"},"01JN72166CQABKZ83FTCMTEQ2S":{"$ref":"#/definitions/5299902"},"01JN7275ZNTQQN1PN8XN5ZHHQF":{"$ref":"#/definitions/5295307"}},"title":"transaction.response.v3.1.x","name":"transaction.response.v3.1.x","moduleId":760453}}},"requestDefinition":{"jsonSchema":{"$ref":"#/definitions/8643885"}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"79175c2c-3511-4c48-b2e4-a5035b1da81a","id":"29768899-6a45-53a0-b372-4c8e6076843c","type":"http","name":"Create a JSON Transaction - Approved 1:1 ","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":54,"httpApiId":17810516,"httpApiCaseId":26070730,"httpApiName":"Create a JSON Transaction ","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/json","httpApiMethod":"post","httpApiCaseName":"Create a JSON Transaction ","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":true,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"967925f6-3e38-5136-a8ad-187880a7b282","name":"Create a  Transaction to Commit - Pending 1:1","request":{"url":{"protocol":"http","port":"3001","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","transactions","json"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-Idempotency","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-TTL","value":"{{$number.int(min=0,max=3600)}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","baseUrl":"http://127.0.0.1:3001","body":{"mode":"raw","raw":"{\n    \"chartOfAccountsGroupName\": \"chartOfAccountsGroupName\",\n    \"pending\": true,\n    \"route\": \"5656daa5-5b2a-4637-955f-e43bafceaf5d\",\n    \"description\": \"Pending Transaction\",\n    \"metadata\": {\n        \"key_1_string\": \"value_1_string\",\n        \"key_2_int\": 1,\n        \"key_3_boolean\": true\n    },\n    \"send\": {\n        \"asset\": \"BRL\",\n        \"value\": \"1.45\",\n        \"source\": {\n            \"from\": [\n                {\n                    \"accountAlias\": \"@account1_rt_BRL\",\n                    \"amount\": {\n                        \"asset\": \"BRL\",\n                        \"value\": \"1.45\"\n                    },\n                    \"description\": \"Pending Transaction - Source Operation\",\n                    \"route\": \"5656daa5-5b2a-4637-955f-e43bafceaf5e\",\n                    \"chartOfAccounts\": \"chartOfAccounts\",\n                    \"metadata\": {\n                        \"key_1_string\": \"value_1_string\",\n                        \"key_2_int\": 1,\n                        \"key_3_boolean\": true\n                    }\n                }\n            ]\n        },\n        \"distribute\": {\n            \"to\": [\n                {\n                    \"accountAlias\": \"@account2_rt_BRL\",\n                    \"amount\": {\n                        \"asset\": \"BRL\",\n                        \"value\": \"1.45\"\n                    },\n                    \"chartOfAccounts\": \"chartOfAccounts\",\n                    \"description\": \"Pending Transaction - Destination Operation\",\n                    \"route\": \"5656daa5-5b2a-4637-955f-e43bafceaf5f\",\n                    \"metadata\": {\n                        \"key_1_string\": \"value_1_string\",\n                        \"key_2_int\": 1,\n                        \"key_3_boolean\": true\n                    }\n                }\n            ]\n        }\n    }\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`pending_transaction_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable pending_transaction_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}},{"listen":"test","script":{"id":"postProcessors.1.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        const responseData = pm.response.json();","const creditOperations = 0;","const debitOperations = 0;","const onHoldOperations = 1;","const releaseOperations = 0;","const statusCode = \"PENDING\"","const assetCode = \"BRL\"","const sourceAccounts = [\"@account1_rt_BRL\"];","const destinationAccounts = [\"@account2_rt_BRL\"];","","pm.test(\"Validate Transaction Status\", function () {","    pm.expect(responseData.status.code).to.be.equal(statusCode);","});","","pm.test(\"Validate Source Accounts\", function () {","    sourceAccounts.forEach(function(account) {","        pm.expect(responseData.source).to.include(account);","    });","});","","pm.test(\"Validate Destination Accounts\", function () {","    destinationAccounts.forEach(function(account) {","        pm.expect(responseData.destination).to.include(account);","    });","});","","pm.test(\"Validate Operation Data Length\", function () {","    pm.expect(responseData.operations.length).to.be.equal(creditOperations+debitOperations+onHoldOperations+releaseOperations);","});","","pm.test(\"Validate Asset Code \", function () {","    pm.expect(responseData.assetCode).to.be.equal(\"BRL\");","});","","pm.test(\"Validate CREDIT operation quantity\", function () {","    const creditOp = responseData.operations.filter(op => op.type === 'CREDIT');","    pm.expect(creditOp.length).to.be.equal(creditOperations);","});","","pm.test(\"Validate DEBIT operation quantity\", function () {","    const debitOp = responseData.operations.filter(op => op.type === 'DEBIT');","    pm.expect(debitOp.length).to.eql(debitOperations);","});","","pm.test(\"Validate ON_HOLD operation quantity\", function () {","    const heldOp = responseData.operations.filter(op => op.type === 'ON_HOLD');","    pm.expect(heldOp.length).to.eql(onHoldOperations);","});","","pm.test(\"Validate RELEASE operation quantity\", function () {","    const releaseOp = responseData.operations.filter(op => op.type === 'RELEASE');","    pm.expect(releaseOp.length).to.eql(releaseOperations);","});","","pm.test(\"Validate Transaction Metadata\", function () {","    pm.expect(Object.keys(responseData.metadata).length).to.eql(3);","});","","for (const op in responseData.operations) {","    pm.test(`Validate Operation ${op} Metadata`, function () {","    pm.expect(Object.keys(responseData.operations[op].metadata).length).to.eql(3);","});","}","      "]}}],"responseDefinition":{"id":24931433,"name":"Created","code":201,"contentType":"json","jsonSchema":{"$ref":"#/definitions/8641358"},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453},"7325329":{"type":"object","properties":{"available":{"type":"string","x-apidog-mock":"100.00"},"onHold":{"type":"string","x-apidog-mock":"0"}},"x-apidog-orders":["available","onHold"],"required":["available","onHold"],"title":"balance.values.v3.x.x","name":"balance.values.v3.x.x","moduleId":760453},"8641347":{"type":"object","properties":{"id":{"type":"string","description":"The unique identifier of the Operation.","format":"uuid"},"description":{"type":"string","description":"Description of the operation."},"transactionId":{"type":"string","format":"uuid","description":"The unique identifier of the Transaction."},"type":{"type":"string","enum":["CREDIT","DEBIT","ON_HOLD","RELEASE"],"x-apidog-enum":[{"value":"CREDIT","name":"Credit Operation","description":""},{"value":"DEBIT","name":"Debit Operation","description":""},{"value":"ON_HOLD","name":"On Hold Operation","description":"Balance reservation operation, moving the amount to the on_hold balance."},{"value":"RELEASE","name":"Release Operation","description":"Release operation of the reserved balance, returning it to the available balance"}],"description":"The type of the operation.\n`CREDIT` `DEBIT` `ON_HOLD` `RELEASE`"},"assetCode":{"type":"string","description":"The code of the asset used in the operation."},"chartOfAccounts":{"type":"string","description":"The name of the Chart-of-Accounts that the operation belongs to."},"amount":{"type":"object","properties":{"value":{"type":"string","x-apidog-mock":"100.00"}},"x-apidog-orders":["value"],"x-apidog-refs":{},"required":["value"],"description":"An object containing information about the amount used in the operation."},"balance":{"type":"object","properties":{},"x-apidog-orders":["01JXFMCY8985B99D24K818AW5N"],"x-apidog-refs":{"01JXFMCY8985B99D24K818AW5N":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance before the operation."},"balanceAfter":{"type":"object","properties":{},"x-apidog-orders":["01JXFMDFCFGMBQMPBXMDDXN41A"],"x-apidog-refs":{"01JXFMDFCFGMBQMPBXMDDXN41A":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance after the operation."},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":["string","null"]}},"x-apidog-orders":["code","description"],"required":["code","description"],"description":"The transaction status."},"accountId":{"type":"string","format":"uuid","description":"The unique identifier of the Account."},"accountAlias":{"type":"string","description":"The alias for the account used in the operation."},"balanceId":{"type":"string","description":"The unique identifier of the Balance."},"route":{"type":"string","description":"Unique identifier of the operation route assigned to this specific leg of the transaction. This must match the corresponding source and destination configuration, determining how value is moved between accounts within the transaction route."},"balanceAffected":{"type":"boolean","description":"Indicates whether the operation had an impact on the account balance."},"balanceKey":{"type":"string","description":"The key identifier of the Balance"}},"x-apidog-orders":["id","transactionId","01JN71H2XZAMF6F0KY5QH2XTD6","accountId","accountAlias","balanceId","balanceKey","description","type","assetCode","chartOfAccounts","route","amount","balance","balanceAfter","status","balanceAffected","01JN718VEVJGSYKGXJ4PYFJ64Z","01JN718VKY0WWKT5F4317HNQF5"],"required":["id","description","transactionId","type","assetCode","chartOfAccounts","amount","balance","balanceAfter","status","accountId","accountAlias","balanceId","route","balanceAffected","balanceKey"],"x-apidog-refs":{"01JN718VEVJGSYKGXJ4PYFJ64Z":{"$ref":"#/definitions/5299902"},"01JN718VKY0WWKT5F4317HNQF5":{"$ref":"#/definitions/5295307"},"01JN71H2XZAMF6F0KY5QH2XTD6":{"$ref":"#/definitions/5365047"}},"title":"operation.response.v3.1.x","name":"operation.response.v3.1.x","moduleId":760453},"8641358":{"type":"object","properties":{"id":{"type":"string","description":"ID","format":"uuid"},"description":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"x-apidog-orders":["code","description"],"required":["code","description"]},"amount":{"type":"string"},"assetCode":{"type":"string"},"chartOfAccountsGroupName":{"type":"string"},"source":{"type":"array","items":{"type":"string"}},"destination":{"type":"array","items":{"type":"string"}},"operations":{"type":"array","items":{"$ref":"#/definitions/8641347"}},"route":{"type":"string"}},"x-apidog-orders":["id","01JN71ZQSPF1SPSM597SH2N81C","description","route","status","amount","assetCode","chartOfAccountsGroupName","source","destination","01JN72166CQABKZ83FTCMTEQ2S","operations","01JN7275ZNTQQN1PN8XN5ZHHQF"],"required":["id","description","status","amount","assetCode","chartOfAccountsGroupName","source","destination","operations"],"x-apidog-refs":{"01JN71ZQSPF1SPSM597SH2N81C":{"$ref":"#/definitions/5365047"},"01JN72166CQABKZ83FTCMTEQ2S":{"$ref":"#/definitions/5299902"},"01JN7275ZNTQQN1PN8XN5ZHHQF":{"$ref":"#/definitions/5295307"}},"title":"transaction.response.v3.1.x","name":"transaction.response.v3.1.x","moduleId":760453}}},"requestDefinition":{"jsonSchema":{"$ref":"#/definitions/8643885"}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"76349c99-ed0e-4c43-9a35-33b8fa541169","id":"967925f6-3e38-5136-a8ad-187880a7b282","type":"http","name":"Create a  Transaction to Commit - Pending 1:1","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":55,"httpApiId":17810516,"httpApiCaseId":26173283,"httpApiName":"Create a JSON Transaction ","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/json","httpApiMethod":"post","httpApiCaseName":"Create a JSON Transaction ","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":true,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"c1af18a6-8e0c-5ca2-96b1-d17b3e0db2a5","name":"Commit a Pending Transaction 1:1","request":{"url":{"protocol":"http","port":"3001","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","transactions","{{pending_transaction_id}}","commit"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"},{"disabled":false,"type":"string","value":"{{pending_transaction_id}}","key":"transaction_id"}]},"header":[{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"}],"method":"POST","baseUrl":"http://127.0.0.1:3001","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        const responseData = pm.response.json();","const creditOperations = 1;","const debitOperations = 1;","const onHoldOperations = 0;","const releaseOperations = 0;","const statusCode = \"APPROVED\"","const assetCode = \"BRL\"","const sourceAccounts = [\"@account1_rt_BRL\"];","const destinationAccounts = [\"@account2_rt_BRL\"];","","pm.test(\"Validate Transaction Status\", function () {","    pm.expect(responseData.status.code).to.be.equal(statusCode);","});","","pm.test(\"Validate Source Accounts\", function () {","    sourceAccounts.forEach(function(account) {","        pm.expect(responseData.source).to.include(account);","    });","});","","pm.test(\"Validate Destination Accounts\", function () {","    destinationAccounts.forEach(function(account) {","        pm.expect(responseData.destination).to.include(account);","    });","});","","pm.test(\"Validate Operation Data Length\", function () {","    pm.expect(responseData.operations.length).to.be.equal(creditOperations+debitOperations+onHoldOperations+releaseOperations);","});","","pm.test(\"Validate Asset Code \", function () {","    pm.expect(responseData.assetCode).to.be.equal(\"BRL\");","});","","pm.test(\"Validate CREDIT operation quantity\", function () {","    const creditOp = responseData.operations.filter(op => op.type === 'CREDIT');","    pm.expect(creditOp.length).to.be.equal(creditOperations);","});","","pm.test(\"Validate DEBIT operation quantity\", function () {","    const debitOp = responseData.operations.filter(op => op.type === 'DEBIT');","    pm.expect(debitOp.length).to.eql(debitOperations);","});","","pm.test(\"Validate ON_HOLD operation quantity\", function () {","    const heldOp = responseData.operations.filter(op => op.type === 'ON_HOLD');","    pm.expect(heldOp.length).to.eql(onHoldOperations);","});","","pm.test(\"Validate RELEASE operation quantity\", function () {","    const releaseOp = responseData.operations.filter(op => op.type === 'RELEASE');","    pm.expect(releaseOp.length).to.eql(releaseOperations);","});","","pm.test(\"Validate Transaction Metadata\", function () {","    pm.expect(Object.keys(responseData.metadata).length).to.eql(3);","});","","for (const op in responseData.operations) {","    pm.test(`Validate Operation ${op} Metadata`, function () {","    pm.expect(Object.keys(responseData.operations[op].metadata).length).to.eql(3);","});","}","      "]}}],"responseDefinition":{"id":25051272,"name":"Created","code":201,"contentType":"json","jsonSchema":{"$ref":"#/definitions/8641358"},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453},"7325329":{"type":"object","properties":{"available":{"type":"string","x-apidog-mock":"100.00"},"onHold":{"type":"string","x-apidog-mock":"0"}},"x-apidog-orders":["available","onHold"],"required":["available","onHold"],"title":"balance.values.v3.x.x","name":"balance.values.v3.x.x","moduleId":760453},"8641347":{"type":"object","properties":{"id":{"type":"string","description":"The unique identifier of the Operation.","format":"uuid"},"description":{"type":"string","description":"Description of the operation."},"transactionId":{"type":"string","format":"uuid","description":"The unique identifier of the Transaction."},"type":{"type":"string","enum":["CREDIT","DEBIT","ON_HOLD","RELEASE"],"x-apidog-enum":[{"value":"CREDIT","name":"Credit Operation","description":""},{"value":"DEBIT","name":"Debit Operation","description":""},{"value":"ON_HOLD","name":"On Hold Operation","description":"Balance reservation operation, moving the amount to the on_hold balance."},{"value":"RELEASE","name":"Release Operation","description":"Release operation of the reserved balance, returning it to the available balance"}],"description":"The type of the operation.\n`CREDIT` `DEBIT` `ON_HOLD` `RELEASE`"},"assetCode":{"type":"string","description":"The code of the asset used in the operation."},"chartOfAccounts":{"type":"string","description":"The name of the Chart-of-Accounts that the operation belongs to."},"amount":{"type":"object","properties":{"value":{"type":"string","x-apidog-mock":"100.00"}},"x-apidog-orders":["value"],"x-apidog-refs":{},"required":["value"],"description":"An object containing information about the amount used in the operation."},"balance":{"type":"object","properties":{},"x-apidog-orders":["01JXFMCY8985B99D24K818AW5N"],"x-apidog-refs":{"01JXFMCY8985B99D24K818AW5N":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance before the operation."},"balanceAfter":{"type":"object","properties":{},"x-apidog-orders":["01JXFMDFCFGMBQMPBXMDDXN41A"],"x-apidog-refs":{"01JXFMDFCFGMBQMPBXMDDXN41A":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance after the operation."},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":["string","null"]}},"x-apidog-orders":["code","description"],"required":["code","description"],"description":"The transaction status."},"accountId":{"type":"string","format":"uuid","description":"The unique identifier of the Account."},"accountAlias":{"type":"string","description":"The alias for the account used in the operation."},"balanceId":{"type":"string","description":"The unique identifier of the Balance."},"route":{"type":"string","description":"Unique identifier of the operation route assigned to this specific leg of the transaction. This must match the corresponding source and destination configuration, determining how value is moved between accounts within the transaction route."},"balanceAffected":{"type":"boolean","description":"Indicates whether the operation had an impact on the account balance."},"balanceKey":{"type":"string","description":"The key identifier of the Balance"}},"x-apidog-orders":["id","transactionId","01JN71H2XZAMF6F0KY5QH2XTD6","accountId","accountAlias","balanceId","balanceKey","description","type","assetCode","chartOfAccounts","route","amount","balance","balanceAfter","status","balanceAffected","01JN718VEVJGSYKGXJ4PYFJ64Z","01JN718VKY0WWKT5F4317HNQF5"],"required":["id","description","transactionId","type","assetCode","chartOfAccounts","amount","balance","balanceAfter","status","accountId","accountAlias","balanceId","route","balanceAffected","balanceKey"],"x-apidog-refs":{"01JN718VEVJGSYKGXJ4PYFJ64Z":{"$ref":"#/definitions/5299902"},"01JN718VKY0WWKT5F4317HNQF5":{"$ref":"#/definitions/5295307"},"01JN71H2XZAMF6F0KY5QH2XTD6":{"$ref":"#/definitions/5365047"}},"title":"operation.response.v3.1.x","name":"operation.response.v3.1.x","moduleId":760453},"8641358":{"type":"object","properties":{"id":{"type":"string","description":"ID","format":"uuid"},"description":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"x-apidog-orders":["code","description"],"required":["code","description"]},"amount":{"type":"string"},"assetCode":{"type":"string"},"chartOfAccountsGroupName":{"type":"string"},"source":{"type":"array","items":{"type":"string"}},"destination":{"type":"array","items":{"type":"string"}},"operations":{"type":"array","items":{"$ref":"#/definitions/8641347"}},"route":{"type":"string"}},"x-apidog-orders":["id","01JN71ZQSPF1SPSM597SH2N81C","description","route","status","amount","assetCode","chartOfAccountsGroupName","source","destination","01JN72166CQABKZ83FTCMTEQ2S","operations","01JN7275ZNTQQN1PN8XN5ZHHQF"],"required":["id","description","status","amount","assetCode","chartOfAccountsGroupName","source","destination","operations"],"x-apidog-refs":{"01JN71ZQSPF1SPSM597SH2N81C":{"$ref":"#/definitions/5365047"},"01JN72166CQABKZ83FTCMTEQ2S":{"$ref":"#/definitions/5299902"},"01JN7275ZNTQQN1PN8XN5ZHHQF":{"$ref":"#/definitions/5295307"}},"title":"transaction.response.v3.1.x","name":"transaction.response.v3.1.x","moduleId":760453}}},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"6b21073e-0ffc-4ebb-a8fe-ecc2a77365a6","id":"c1af18a6-8e0c-5ca2-96b1-d17b3e0db2a5","type":"http","name":"Commit a Pending Transaction 1:1","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":56,"httpApiId":17886200,"httpApiCaseId":26173416,"httpApiName":"Commit a Pending Transaction","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/{transaction_id}/commit","httpApiMethod":"post","httpApiCaseName":"Commit a Pending Transaction","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"2d0ece7e-9163-5649-90de-23ed68cfeae6","type":"delay","metaInfo":{"id":"2d0ece7e-9163-5649-90de-23ed68cfeae6","type":"delay","timeout":1000}},{"id":"88eae71a-d773-5b45-849a-66395c80b34b","name":"Retrieve a Commited Transaction 1:1","request":{"url":{"protocol":"http","port":"3001","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","transactions","{{pending_transaction_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"},{"disabled":false,"type":"string","value":"{{pending_transaction_id}}","key":"transaction_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","baseUrl":"http://127.0.0.1:3001","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        const responseData = pm.response.json();","const creditOperations = 1;","const debitOperations = 1;","const onHoldOperations = 1;","const releaseOperations = 0;","const statusCode = \"APPROVED\"","const assetCode = \"BRL\"","const sourceAccounts = [\"@account1_rt_BRL\"];","const destinationAccounts = [\"@account2_rt_BRL\"];","","pm.test(\"Validate Transaction Status\", function () {","    pm.expect(responseData.status.code).to.be.equal(statusCode);","});","","pm.test(\"Validate Source Accounts\", function () {","    sourceAccounts.forEach(function(account) {","        pm.expect(responseData.source).to.include(account);","    });","});","","pm.test(\"Validate Destination Accounts\", function () {","    destinationAccounts.forEach(function(account) {","        pm.expect(responseData.destination).to.include(account);","    });","});","","pm.test(\"Validate Operation Data Length\", function () {","    pm.expect(responseData.operations.length).to.be.equal(creditOperations+debitOperations+onHoldOperations+releaseOperations);","});","","pm.test(\"Validate Asset Code \", function () {","    pm.expect(responseData.assetCode).to.be.equal(\"BRL\");","});","","pm.test(\"Validate CREDIT operation quantity\", function () {","    const creditOp = responseData.operations.filter(op => op.type === 'CREDIT');","    pm.expect(creditOp.length).to.be.equal(creditOperations);","});","","pm.test(\"Validate DEBIT operation quantity\", function () {","    const debitOp = responseData.operations.filter(op => op.type === 'DEBIT');","    pm.expect(debitOp.length).to.eql(debitOperations);","});","","pm.test(\"Validate ON_HOLD operation quantity\", function () {","    const heldOp = responseData.operations.filter(op => op.type === 'ON_HOLD');","    pm.expect(heldOp.length).to.eql(onHoldOperations);","});","","pm.test(\"Validate RELEASE operation quantity\", function () {","    const releaseOp = responseData.operations.filter(op => op.type === 'RELEASE');","    pm.expect(releaseOp.length).to.eql(releaseOperations);","});","","pm.test(\"Validate Transaction Metadata\", function () {","    pm.expect(Object.keys(responseData.metadata).length).to.eql(3);","});","","for (const op in responseData.operations) {","    pm.test(`Validate Operation ${op} Metadata`, function () {","    pm.expect(Object.keys(responseData.operations[op].metadata).length).to.eql(3);","});","}","      "]}}],"responseDefinition":{"id":24932086,"name":"Success","code":200,"contentType":"json","jsonSchema":{"$ref":"#/definitions/8641358"},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453},"7325329":{"type":"object","properties":{"available":{"type":"string","x-apidog-mock":"100.00"},"onHold":{"type":"string","x-apidog-mock":"0"}},"x-apidog-orders":["available","onHold"],"required":["available","onHold"],"title":"balance.values.v3.x.x","name":"balance.values.v3.x.x","moduleId":760453},"8641347":{"type":"object","properties":{"id":{"type":"string","description":"The unique identifier of the Operation.","format":"uuid"},"description":{"type":"string","description":"Description of the operation."},"transactionId":{"type":"string","format":"uuid","description":"The unique identifier of the Transaction."},"type":{"type":"string","enum":["CREDIT","DEBIT","ON_HOLD","RELEASE"],"x-apidog-enum":[{"value":"CREDIT","name":"Credit Operation","description":""},{"value":"DEBIT","name":"Debit Operation","description":""},{"value":"ON_HOLD","name":"On Hold Operation","description":"Balance reservation operation, moving the amount to the on_hold balance."},{"value":"RELEASE","name":"Release Operation","description":"Release operation of the reserved balance, returning it to the available balance"}],"description":"The type of the operation.\n`CREDIT` `DEBIT` `ON_HOLD` `RELEASE`"},"assetCode":{"type":"string","description":"The code of the asset used in the operation."},"chartOfAccounts":{"type":"string","description":"The name of the Chart-of-Accounts that the operation belongs to."},"amount":{"type":"object","properties":{"value":{"type":"string","x-apidog-mock":"100.00"}},"x-apidog-orders":["value"],"x-apidog-refs":{},"required":["value"],"description":"An object containing information about the amount used in the operation."},"balance":{"type":"object","properties":{},"x-apidog-orders":["01JXFMCY8985B99D24K818AW5N"],"x-apidog-refs":{"01JXFMCY8985B99D24K818AW5N":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance before the operation."},"balanceAfter":{"type":"object","properties":{},"x-apidog-orders":["01JXFMDFCFGMBQMPBXMDDXN41A"],"x-apidog-refs":{"01JXFMDFCFGMBQMPBXMDDXN41A":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance after the operation."},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":["string","null"]}},"x-apidog-orders":["code","description"],"required":["code","description"],"description":"The transaction status."},"accountId":{"type":"string","format":"uuid","description":"The unique identifier of the Account."},"accountAlias":{"type":"string","description":"The alias for the account used in the operation."},"balanceId":{"type":"string","description":"The unique identifier of the Balance."},"route":{"type":"string","description":"Unique identifier of the operation route assigned to this specific leg of the transaction. This must match the corresponding source and destination configuration, determining how value is moved between accounts within the transaction route."},"balanceAffected":{"type":"boolean","description":"Indicates whether the operation had an impact on the account balance."},"balanceKey":{"type":"string","description":"The key identifier of the Balance"}},"x-apidog-orders":["id","transactionId","01JN71H2XZAMF6F0KY5QH2XTD6","accountId","accountAlias","balanceId","balanceKey","description","type","assetCode","chartOfAccounts","route","amount","balance","balanceAfter","status","balanceAffected","01JN718VEVJGSYKGXJ4PYFJ64Z","01JN718VKY0WWKT5F4317HNQF5"],"required":["id","description","transactionId","type","assetCode","chartOfAccounts","amount","balance","balanceAfter","status","accountId","accountAlias","balanceId","route","balanceAffected","balanceKey"],"x-apidog-refs":{"01JN718VEVJGSYKGXJ4PYFJ64Z":{"$ref":"#/definitions/5299902"},"01JN718VKY0WWKT5F4317HNQF5":{"$ref":"#/definitions/5295307"},"01JN71H2XZAMF6F0KY5QH2XTD6":{"$ref":"#/definitions/5365047"}},"title":"operation.response.v3.1.x","name":"operation.response.v3.1.x","moduleId":760453},"8641358":{"type":"object","properties":{"id":{"type":"string","description":"ID","format":"uuid"},"description":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"x-apidog-orders":["code","description"],"required":["code","description"]},"amount":{"type":"string"},"assetCode":{"type":"string"},"chartOfAccountsGroupName":{"type":"string"},"source":{"type":"array","items":{"type":"string"}},"destination":{"type":"array","items":{"type":"string"}},"operations":{"type":"array","items":{"$ref":"#/definitions/8641347"}},"route":{"type":"string"}},"x-apidog-orders":["id","01JN71ZQSPF1SPSM597SH2N81C","description","route","status","amount","assetCode","chartOfAccountsGroupName","source","destination","01JN72166CQABKZ83FTCMTEQ2S","operations","01JN7275ZNTQQN1PN8XN5ZHHQF"],"required":["id","description","status","amount","assetCode","chartOfAccountsGroupName","source","destination","operations"],"x-apidog-refs":{"01JN71ZQSPF1SPSM597SH2N81C":{"$ref":"#/definitions/5365047"},"01JN72166CQABKZ83FTCMTEQ2S":{"$ref":"#/definitions/5299902"},"01JN7275ZNTQQN1PN8XN5ZHHQF":{"$ref":"#/definitions/5295307"}},"title":"transaction.response.v3.1.x","name":"transaction.response.v3.1.x","moduleId":760453}}},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"55a1a9ab-5512-4063-bbb3-401ae44d0bec","id":"88eae71a-d773-5b45-849a-66395c80b34b","type":"http","name":"Retrieve a Commited Transaction 1:1","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":66,"httpApiId":17810519,"httpApiCaseId":26177312,"httpApiName":"Retrieve a Transaction","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/{transaction_id}","httpApiMethod":"get","httpApiCaseName":"Retrieve a Transaction","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":true,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"e97ccc12-9e58-56b4-a04d-b14e93fa5e9a","name":"Create a Transaction to Cancel - Pending 1:1","request":{"url":{"protocol":"http","port":"3001","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","transactions","json"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-Idempotency","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-TTL","value":"{{$number.int(min=0,max=3600)}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","baseUrl":"http://127.0.0.1:3001","body":{"mode":"raw","raw":"{\n    \"chartOfAccountsGroupName\": \"chartOfAccountsGroupName\",\n    \"pending\": true,\n    \"route\": \"5656daa5-5b2a-4637-955f-e43bafceaf5d\",\n    \"description\": \"Pending Transaction\",\n    \"metadata\": {\n        \"key_1_string\": \"value_1_string\",\n        \"key_2_int\": 1,\n        \"key_3_boolean\": true\n    },\n    \"send\": {\n        \"asset\": \"BRL\",\n        \"value\": \"1.45\",\n        \"source\": {\n            \"from\": [\n                {\n                    \"accountAlias\": \"@account1_rt_BRL\",\n                    \"amount\": {\n                        \"asset\": \"BRL\",\n                        \"value\": \"1.45\"\n                    },\n                    \"description\": \"Pending Transaction - Source Operation\",\n                    \"route\": \"5656daa5-5b2a-4637-955f-e43bafceaf5e\",\n                    \"chartOfAccounts\": \"chartOfAccounts\",\n                    \"metadata\": {\n                        \"key_1_string\": \"value_1_string\",\n                        \"key_2_int\": 1,\n                        \"key_3_boolean\": true\n                    }\n                }\n            ]\n        },\n        \"distribute\": {\n            \"to\": [\n                {\n                    \"accountAlias\": \"@account2_rt_BRL\",\n                    \"amount\": {\n                        \"asset\": \"BRL\",\n                        \"value\": \"1.45\"\n                    },\n                    \"chartOfAccounts\": \"chartOfAccounts\",\n                    \"description\": \"Pending Transaction - Destination Operation\",\n                    \"route\": \"5656daa5-5b2a-4637-955f-e43bafceaf5f\",\n                    \"metadata\": {\n                        \"key_1_string\": \"value_1_string\",\n                        \"key_2_int\": 1,\n                        \"key_3_boolean\": true\n                    }\n                }\n            ]\n        }\n    }\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`pending_transaction_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable pending_transaction_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}},{"listen":"test","script":{"id":"postProcessors.1.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        const responseData = pm.response.json();","const creditOperations = 0;","const debitOperations = 0;","const onHoldOperations = 1;","const releaseOperations = 0;","const statusCode = \"PENDING\"","const assetCode = \"BRL\"","const sourceAccounts = [\"@account1_rt_BRL\"];","const destinationAccounts = [\"@account2_rt_BRL\"];","","pm.test(\"Validate Transaction Status\", function () {","    pm.expect(responseData.status.code).to.be.equal(statusCode);","});","","pm.test(\"Validate Source Accounts\", function () {","    sourceAccounts.forEach(function(account) {","        pm.expect(responseData.source).to.include(account);","    });","});","","pm.test(\"Validate Destination Accounts\", function () {","    destinationAccounts.forEach(function(account) {","        pm.expect(responseData.destination).to.include(account);","    });","});","","pm.test(\"Validate Operation Data Length\", function () {","    pm.expect(responseData.operations.length).to.be.equal(creditOperations+debitOperations+onHoldOperations+releaseOperations);","});","","pm.test(\"Validate Asset Code \", function () {","    pm.expect(responseData.assetCode).to.be.equal(\"BRL\");","});","","pm.test(\"Validate CREDIT operation quantity\", function () {","    const creditOp = responseData.operations.filter(op => op.type === 'CREDIT');","    pm.expect(creditOp.length).to.be.equal(creditOperations);","});","","pm.test(\"Validate DEBIT operation quantity\", function () {","    const debitOp = responseData.operations.filter(op => op.type === 'DEBIT');","    pm.expect(debitOp.length).to.eql(debitOperations);","});","","pm.test(\"Validate ON_HOLD operation quantity\", function () {","    const heldOp = responseData.operations.filter(op => op.type === 'ON_HOLD');","    pm.expect(heldOp.length).to.eql(onHoldOperations);","});","","pm.test(\"Validate RELEASE operation quantity\", function () {","    const releaseOp = responseData.operations.filter(op => op.type === 'RELEASE');","    pm.expect(releaseOp.length).to.eql(releaseOperations);","});","","pm.test(\"Validate Transaction Metadata\", function () {","    pm.expect(Object.keys(responseData.metadata).length).to.eql(3);","});","","for (const op in responseData.operations) {","    pm.test(`Validate Operation ${op} Metadata`, function () {","    pm.expect(Object.keys(responseData.operations[op].metadata).length).to.eql(3);","});","}","      "]}}],"responseDefinition":{"id":24931433,"name":"Created","code":201,"contentType":"json","jsonSchema":{"$ref":"#/definitions/8641358"},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453},"7325329":{"type":"object","properties":{"available":{"type":"string","x-apidog-mock":"100.00"},"onHold":{"type":"string","x-apidog-mock":"0"}},"x-apidog-orders":["available","onHold"],"required":["available","onHold"],"title":"balance.values.v3.x.x","name":"balance.values.v3.x.x","moduleId":760453},"8641347":{"type":"object","properties":{"id":{"type":"string","description":"The unique identifier of the Operation.","format":"uuid"},"description":{"type":"string","description":"Description of the operation."},"transactionId":{"type":"string","format":"uuid","description":"The unique identifier of the Transaction."},"type":{"type":"string","enum":["CREDIT","DEBIT","ON_HOLD","RELEASE"],"x-apidog-enum":[{"value":"CREDIT","name":"Credit Operation","description":""},{"value":"DEBIT","name":"Debit Operation","description":""},{"value":"ON_HOLD","name":"On Hold Operation","description":"Balance reservation operation, moving the amount to the on_hold balance."},{"value":"RELEASE","name":"Release Operation","description":"Release operation of the reserved balance, returning it to the available balance"}],"description":"The type of the operation.\n`CREDIT` `DEBIT` `ON_HOLD` `RELEASE`"},"assetCode":{"type":"string","description":"The code of the asset used in the operation."},"chartOfAccounts":{"type":"string","description":"The name of the Chart-of-Accounts that the operation belongs to."},"amount":{"type":"object","properties":{"value":{"type":"string","x-apidog-mock":"100.00"}},"x-apidog-orders":["value"],"x-apidog-refs":{},"required":["value"],"description":"An object containing information about the amount used in the operation."},"balance":{"type":"object","properties":{},"x-apidog-orders":["01JXFMCY8985B99D24K818AW5N"],"x-apidog-refs":{"01JXFMCY8985B99D24K818AW5N":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance before the operation."},"balanceAfter":{"type":"object","properties":{},"x-apidog-orders":["01JXFMDFCFGMBQMPBXMDDXN41A"],"x-apidog-refs":{"01JXFMDFCFGMBQMPBXMDDXN41A":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance after the operation."},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":["string","null"]}},"x-apidog-orders":["code","description"],"required":["code","description"],"description":"The transaction status."},"accountId":{"type":"string","format":"uuid","description":"The unique identifier of the Account."},"accountAlias":{"type":"string","description":"The alias for the account used in the operation."},"balanceId":{"type":"string","description":"The unique identifier of the Balance."},"route":{"type":"string","description":"Unique identifier of the operation route assigned to this specific leg of the transaction. This must match the corresponding source and destination configuration, determining how value is moved between accounts within the transaction route."},"balanceAffected":{"type":"boolean","description":"Indicates whether the operation had an impact on the account balance."},"balanceKey":{"type":"string","description":"The key identifier of the Balance"}},"x-apidog-orders":["id","transactionId","01JN71H2XZAMF6F0KY5QH2XTD6","accountId","accountAlias","balanceId","balanceKey","description","type","assetCode","chartOfAccounts","route","amount","balance","balanceAfter","status","balanceAffected","01JN718VEVJGSYKGXJ4PYFJ64Z","01JN718VKY0WWKT5F4317HNQF5"],"required":["id","description","transactionId","type","assetCode","chartOfAccounts","amount","balance","balanceAfter","status","accountId","accountAlias","balanceId","route","balanceAffected","balanceKey"],"x-apidog-refs":{"01JN718VEVJGSYKGXJ4PYFJ64Z":{"$ref":"#/definitions/5299902"},"01JN718VKY0WWKT5F4317HNQF5":{"$ref":"#/definitions/5295307"},"01JN71H2XZAMF6F0KY5QH2XTD6":{"$ref":"#/definitions/5365047"}},"title":"operation.response.v3.1.x","name":"operation.response.v3.1.x","moduleId":760453},"8641358":{"type":"object","properties":{"id":{"type":"string","description":"ID","format":"uuid"},"description":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"x-apidog-orders":["code","description"],"required":["code","description"]},"amount":{"type":"string"},"assetCode":{"type":"string"},"chartOfAccountsGroupName":{"type":"string"},"source":{"type":"array","items":{"type":"string"}},"destination":{"type":"array","items":{"type":"string"}},"operations":{"type":"array","items":{"$ref":"#/definitions/8641347"}},"route":{"type":"string"}},"x-apidog-orders":["id","01JN71ZQSPF1SPSM597SH2N81C","description","route","status","amount","assetCode","chartOfAccountsGroupName","source","destination","01JN72166CQABKZ83FTCMTEQ2S","operations","01JN7275ZNTQQN1PN8XN5ZHHQF"],"required":["id","description","status","amount","assetCode","chartOfAccountsGroupName","source","destination","operations"],"x-apidog-refs":{"01JN71ZQSPF1SPSM597SH2N81C":{"$ref":"#/definitions/5365047"},"01JN72166CQABKZ83FTCMTEQ2S":{"$ref":"#/definitions/5299902"},"01JN7275ZNTQQN1PN8XN5ZHHQF":{"$ref":"#/definitions/5295307"}},"title":"transaction.response.v3.1.x","name":"transaction.response.v3.1.x","moduleId":760453}}},"requestDefinition":{"jsonSchema":{"$ref":"#/definitions/8643885"}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"7249c10c-0df2-4ccf-9afe-f144b492987b","id":"e97ccc12-9e58-56b4-a04d-b14e93fa5e9a","type":"http","name":"Create a Transaction to Cancel - Pending 1:1","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":57,"httpApiId":17810516,"httpApiCaseId":26175423,"httpApiName":"Create a JSON Transaction ","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/json","httpApiMethod":"post","httpApiCaseName":"Create a JSON Transaction ","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"e44f1c11-e5f6-5034-84c4-fa9fc4de70e1","name":"Cancel a Pending Transaction 1:1","request":{"url":{"protocol":"http","port":"3001","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","transactions","{{pending_transaction_id}}","cancel"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"},{"disabled":false,"type":"string","value":"{{pending_transaction_id}}","key":"transaction_id"}]},"header":[{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"}],"method":"POST","baseUrl":"http://127.0.0.1:3001","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        const responseData = pm.response.json();","const creditOperations = 0;","const debitOperations = 0;","const onHoldOperations = 0;","const releaseOperations = 1;","const statusCode = \"CANCELED\"","const assetCode = \"BRL\"","const sourceAccounts = [\"@account1_rt_BRL\"];","const destinationAccounts = [\"@account2_rt_BRL\"];","","pm.test(\"Validate Transaction Status\", function () {","    pm.expect(responseData.status.code).to.be.equal(statusCode);","});","","pm.test(\"Validate Source Accounts\", function () {","    sourceAccounts.forEach(function(account) {","        pm.expect(responseData.source).to.include(account);","    });","});","","pm.test(\"Validate Destination Accounts\", function () {","    destinationAccounts.forEach(function(account) {","        pm.expect(responseData.destination).to.include(account);","    });","});","","pm.test(\"Validate Operation Data Length\", function () {","    pm.expect(responseData.operations.length).to.be.equal(creditOperations+debitOperations+onHoldOperations+releaseOperations);","});","","pm.test(\"Validate Asset Code \", function () {","    pm.expect(responseData.assetCode).to.be.equal(\"BRL\");","});","","pm.test(\"Validate CREDIT operation quantity\", function () {","    const creditOp = responseData.operations.filter(op => op.type === 'CREDIT');","    pm.expect(creditOp.length).to.be.equal(creditOperations);","});","","pm.test(\"Validate DEBIT operation quantity\", function () {","    const debitOp = responseData.operations.filter(op => op.type === 'DEBIT');","    pm.expect(debitOp.length).to.eql(debitOperations);","});","","pm.test(\"Validate ON_HOLD operation quantity\", function () {","    const heldOp = responseData.operations.filter(op => op.type === 'ON_HOLD');","    pm.expect(heldOp.length).to.eql(onHoldOperations);","});","","pm.test(\"Validate RELEASE operation quantity\", function () {","    const releaseOp = responseData.operations.filter(op => op.type === 'RELEASE');","    pm.expect(releaseOp.length).to.eql(releaseOperations);","});","","pm.test(\"Validate Transaction Metadata\", function () {","    pm.expect(Object.keys(responseData.metadata).length).to.eql(3);","});","","for (const op in responseData.operations) {","    pm.test(`Validate Operation ${op} Metadata`, function () {","    pm.expect(Object.keys(responseData.operations[op].metadata).length).to.eql(3);","});","}","      "]}}],"responseDefinition":{"id":25053644,"name":"Created","code":201,"contentType":"json","jsonSchema":{"$ref":"#/definitions/8641358"},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453},"7325329":{"type":"object","properties":{"available":{"type":"string","x-apidog-mock":"100.00"},"onHold":{"type":"string","x-apidog-mock":"0"}},"x-apidog-orders":["available","onHold"],"required":["available","onHold"],"title":"balance.values.v3.x.x","name":"balance.values.v3.x.x","moduleId":760453},"8641347":{"type":"object","properties":{"id":{"type":"string","description":"The unique identifier of the Operation.","format":"uuid"},"description":{"type":"string","description":"Description of the operation."},"transactionId":{"type":"string","format":"uuid","description":"The unique identifier of the Transaction."},"type":{"type":"string","enum":["CREDIT","DEBIT","ON_HOLD","RELEASE"],"x-apidog-enum":[{"value":"CREDIT","name":"Credit Operation","description":""},{"value":"DEBIT","name":"Debit Operation","description":""},{"value":"ON_HOLD","name":"On Hold Operation","description":"Balance reservation operation, moving the amount to the on_hold balance."},{"value":"RELEASE","name":"Release Operation","description":"Release operation of the reserved balance, returning it to the available balance"}],"description":"The type of the operation.\n`CREDIT` `DEBIT` `ON_HOLD` `RELEASE`"},"assetCode":{"type":"string","description":"The code of the asset used in the operation."},"chartOfAccounts":{"type":"string","description":"The name of the Chart-of-Accounts that the operation belongs to."},"amount":{"type":"object","properties":{"value":{"type":"string","x-apidog-mock":"100.00"}},"x-apidog-orders":["value"],"x-apidog-refs":{},"required":["value"],"description":"An object containing information about the amount used in the operation."},"balance":{"type":"object","properties":{},"x-apidog-orders":["01JXFMCY8985B99D24K818AW5N"],"x-apidog-refs":{"01JXFMCY8985B99D24K818AW5N":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance before the operation."},"balanceAfter":{"type":"object","properties":{},"x-apidog-orders":["01JXFMDFCFGMBQMPBXMDDXN41A"],"x-apidog-refs":{"01JXFMDFCFGMBQMPBXMDDXN41A":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance after the operation."},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":["string","null"]}},"x-apidog-orders":["code","description"],"required":["code","description"],"description":"The transaction status."},"accountId":{"type":"string","format":"uuid","description":"The unique identifier of the Account."},"accountAlias":{"type":"string","description":"The alias for the account used in the operation."},"balanceId":{"type":"string","description":"The unique identifier of the Balance."},"route":{"type":"string","description":"Unique identifier of the operation route assigned to this specific leg of the transaction. This must match the corresponding source and destination configuration, determining how value is moved between accounts within the transaction route."},"balanceAffected":{"type":"boolean","description":"Indicates whether the operation had an impact on the account balance."},"balanceKey":{"type":"string","description":"The key identifier of the Balance"}},"x-apidog-orders":["id","transactionId","01JN71H2XZAMF6F0KY5QH2XTD6","accountId","accountAlias","balanceId","balanceKey","description","type","assetCode","chartOfAccounts","route","amount","balance","balanceAfter","status","balanceAffected","01JN718VEVJGSYKGXJ4PYFJ64Z","01JN718VKY0WWKT5F4317HNQF5"],"required":["id","description","transactionId","type","assetCode","chartOfAccounts","amount","balance","balanceAfter","status","accountId","accountAlias","balanceId","route","balanceAffected","balanceKey"],"x-apidog-refs":{"01JN718VEVJGSYKGXJ4PYFJ64Z":{"$ref":"#/definitions/5299902"},"01JN718VKY0WWKT5F4317HNQF5":{"$ref":"#/definitions/5295307"},"01JN71H2XZAMF6F0KY5QH2XTD6":{"$ref":"#/definitions/5365047"}},"title":"operation.response.v3.1.x","name":"operation.response.v3.1.x","moduleId":760453},"8641358":{"type":"object","properties":{"id":{"type":"string","description":"ID","format":"uuid"},"description":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"x-apidog-orders":["code","description"],"required":["code","description"]},"amount":{"type":"string"},"assetCode":{"type":"string"},"chartOfAccountsGroupName":{"type":"string"},"source":{"type":"array","items":{"type":"string"}},"destination":{"type":"array","items":{"type":"string"}},"operations":{"type":"array","items":{"$ref":"#/definitions/8641347"}},"route":{"type":"string"}},"x-apidog-orders":["id","01JN71ZQSPF1SPSM597SH2N81C","description","route","status","amount","assetCode","chartOfAccountsGroupName","source","destination","01JN72166CQABKZ83FTCMTEQ2S","operations","01JN7275ZNTQQN1PN8XN5ZHHQF"],"required":["id","description","status","amount","assetCode","chartOfAccountsGroupName","source","destination","operations"],"x-apidog-refs":{"01JN71ZQSPF1SPSM597SH2N81C":{"$ref":"#/definitions/5365047"},"01JN72166CQABKZ83FTCMTEQ2S":{"$ref":"#/definitions/5299902"},"01JN7275ZNTQQN1PN8XN5ZHHQF":{"$ref":"#/definitions/5295307"}},"title":"transaction.response.v3.1.x","name":"transaction.response.v3.1.x","moduleId":760453}}},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"26de48d6-3f59-4947-9709-f87dc10cc4f9","id":"e44f1c11-e5f6-5034-84c4-fa9fc4de70e1","type":"http","name":"Cancel a Pending Transaction 1:1","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":58,"httpApiId":17886274,"httpApiCaseId":26175442,"httpApiName":"Cancel a Pending Transaction","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/{transaction_id}/cancel","httpApiMethod":"post","httpApiCaseName":"Cancel a Pending Transaction","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"d25d1120-d80a-541b-bc4b-2b7b8652912c","type":"delay","metaInfo":{"id":"d25d1120-d80a-541b-bc4b-2b7b8652912c","type":"delay","timeout":1000}},{"id":"f5b2bd1f-dff7-5769-b80d-13a22515936f","name":"Retrieve a Canceled Transaction 1:1","request":{"url":{"protocol":"http","port":"3001","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","transactions","{{pending_transaction_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"},{"disabled":false,"type":"string","value":"{{pending_transaction_id}}","key":"transaction_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","baseUrl":"http://127.0.0.1:3001","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        const responseData = pm.response.json();","const creditOperations = 0;","const debitOperations = 0;","const onHoldOperations = 1;","const releaseOperations = 1;","const statusCode = \"CANCELED\"","const assetCode = \"BRL\"","const sourceAccounts = [];","const destinationAccounts = [];","","pm.test(\"Validate Transaction Status\", function () {","    pm.expect(responseData.status.code).to.be.equal(statusCode);","});","","pm.test(\"Validate Source Accounts\", function () {","    sourceAccounts.forEach(function(account) {","        pm.expect(responseData.source).to.include(account);","    });","});","","pm.test(\"Validate Destination Accounts\", function () {","    destinationAccounts.forEach(function(account) {","        pm.expect(responseData.destination).to.include(account);","    });","});","","pm.test(\"Validate Operation Data Length\", function () {","    pm.expect(responseData.operations.length).to.be.equal(creditOperations+debitOperations+onHoldOperations+releaseOperations);","});","","pm.test(\"Validate Asset Code \", function () {","    pm.expect(responseData.assetCode).to.be.equal(\"BRL\");","});","","pm.test(\"Validate CREDIT operation quantity\", function () {","    const creditOp = responseData.operations.filter(op => op.type === 'CREDIT');","    pm.expect(creditOp.length).to.be.equal(creditOperations);","});","","pm.test(\"Validate DEBIT operation quantity\", function () {","    const debitOp = responseData.operations.filter(op => op.type === 'DEBIT');","    pm.expect(debitOp.length).to.eql(debitOperations);","});","","pm.test(\"Validate ON_HOLD operation quantity\", function () {","    const heldOp = responseData.operations.filter(op => op.type === 'ON_HOLD');","    pm.expect(heldOp.length).to.eql(onHoldOperations);","});","","pm.test(\"Validate RELEASE operation quantity\", function () {","    const releaseOp = responseData.operations.filter(op => op.type === 'RELEASE');","    pm.expect(releaseOp.length).to.eql(releaseOperations);","});","","pm.test(\"Validate Transaction Metadata\", function () {","    pm.expect(Object.keys(responseData.metadata).length).to.eql(3);","});","","for (const op in responseData.operations) {","    pm.test(`Validate Operation ${op} Metadata`, function () {","    pm.expect(Object.keys(responseData.operations[op].metadata).length).to.eql(3);","});","}","      "]}}],"responseDefinition":{"id":24932086,"name":"Success","code":200,"contentType":"json","jsonSchema":{"$ref":"#/definitions/8641358"},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453},"7325329":{"type":"object","properties":{"available":{"type":"string","x-apidog-mock":"100.00"},"onHold":{"type":"string","x-apidog-mock":"0"}},"x-apidog-orders":["available","onHold"],"required":["available","onHold"],"title":"balance.values.v3.x.x","name":"balance.values.v3.x.x","moduleId":760453},"8641347":{"type":"object","properties":{"id":{"type":"string","description":"The unique identifier of the Operation.","format":"uuid"},"description":{"type":"string","description":"Description of the operation."},"transactionId":{"type":"string","format":"uuid","description":"The unique identifier of the Transaction."},"type":{"type":"string","enum":["CREDIT","DEBIT","ON_HOLD","RELEASE"],"x-apidog-enum":[{"value":"CREDIT","name":"Credit Operation","description":""},{"value":"DEBIT","name":"Debit Operation","description":""},{"value":"ON_HOLD","name":"On Hold Operation","description":"Balance reservation operation, moving the amount to the on_hold balance."},{"value":"RELEASE","name":"Release Operation","description":"Release operation of the reserved balance, returning it to the available balance"}],"description":"The type of the operation.\n`CREDIT` `DEBIT` `ON_HOLD` `RELEASE`"},"assetCode":{"type":"string","description":"The code of the asset used in the operation."},"chartOfAccounts":{"type":"string","description":"The name of the Chart-of-Accounts that the operation belongs to."},"amount":{"type":"object","properties":{"value":{"type":"string","x-apidog-mock":"100.00"}},"x-apidog-orders":["value"],"x-apidog-refs":{},"required":["value"],"description":"An object containing information about the amount used in the operation."},"balance":{"type":"object","properties":{},"x-apidog-orders":["01JXFMCY8985B99D24K818AW5N"],"x-apidog-refs":{"01JXFMCY8985B99D24K818AW5N":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance before the operation."},"balanceAfter":{"type":"object","properties":{},"x-apidog-orders":["01JXFMDFCFGMBQMPBXMDDXN41A"],"x-apidog-refs":{"01JXFMDFCFGMBQMPBXMDDXN41A":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance after the operation."},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":["string","null"]}},"x-apidog-orders":["code","description"],"required":["code","description"],"description":"The transaction status."},"accountId":{"type":"string","format":"uuid","description":"The unique identifier of the Account."},"accountAlias":{"type":"string","description":"The alias for the account used in the operation."},"balanceId":{"type":"string","description":"The unique identifier of the Balance."},"route":{"type":"string","description":"Unique identifier of the operation route assigned to this specific leg of the transaction. This must match the corresponding source and destination configuration, determining how value is moved between accounts within the transaction route."},"balanceAffected":{"type":"boolean","description":"Indicates whether the operation had an impact on the account balance."},"balanceKey":{"type":"string","description":"The key identifier of the Balance"}},"x-apidog-orders":["id","transactionId","01JN71H2XZAMF6F0KY5QH2XTD6","accountId","accountAlias","balanceId","balanceKey","description","type","assetCode","chartOfAccounts","route","amount","balance","balanceAfter","status","balanceAffected","01JN718VEVJGSYKGXJ4PYFJ64Z","01JN718VKY0WWKT5F4317HNQF5"],"required":["id","description","transactionId","type","assetCode","chartOfAccounts","amount","balance","balanceAfter","status","accountId","accountAlias","balanceId","route","balanceAffected","balanceKey"],"x-apidog-refs":{"01JN718VEVJGSYKGXJ4PYFJ64Z":{"$ref":"#/definitions/5299902"},"01JN718VKY0WWKT5F4317HNQF5":{"$ref":"#/definitions/5295307"},"01JN71H2XZAMF6F0KY5QH2XTD6":{"$ref":"#/definitions/5365047"}},"title":"operation.response.v3.1.x","name":"operation.response.v3.1.x","moduleId":760453},"8641358":{"type":"object","properties":{"id":{"type":"string","description":"ID","format":"uuid"},"description":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"x-apidog-orders":["code","description"],"required":["code","description"]},"amount":{"type":"string"},"assetCode":{"type":"string"},"chartOfAccountsGroupName":{"type":"string"},"source":{"type":"array","items":{"type":"string"}},"destination":{"type":"array","items":{"type":"string"}},"operations":{"type":"array","items":{"$ref":"#/definitions/8641347"}},"route":{"type":"string"}},"x-apidog-orders":["id","01JN71ZQSPF1SPSM597SH2N81C","description","route","status","amount","assetCode","chartOfAccountsGroupName","source","destination","01JN72166CQABKZ83FTCMTEQ2S","operations","01JN7275ZNTQQN1PN8XN5ZHHQF"],"required":["id","description","status","amount","assetCode","chartOfAccountsGroupName","source","destination","operations"],"x-apidog-refs":{"01JN71ZQSPF1SPSM597SH2N81C":{"$ref":"#/definitions/5365047"},"01JN72166CQABKZ83FTCMTEQ2S":{"$ref":"#/definitions/5299902"},"01JN7275ZNTQQN1PN8XN5ZHHQF":{"$ref":"#/definitions/5295307"}},"title":"transaction.response.v3.1.x","name":"transaction.response.v3.1.x","moduleId":760453}}},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"58942061-28fe-49af-b71f-19dd87f763dd","id":"f5b2bd1f-dff7-5769-b80d-13a22515936f","type":"http","name":"Retrieve a Canceled Transaction 1:1","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":65,"httpApiId":17810519,"httpApiCaseId":26177288,"httpApiName":"Retrieve a Transaction","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/{transaction_id}","httpApiMethod":"get","httpApiCaseName":"Retrieve a Transaction","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":true,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"7838f5e5-0b0b-5672-bbb8-1ff475b4428e","name":"Create a JSON Transaction - Approved 1:N ","request":{"url":{"protocol":"http","port":"3001","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","transactions","json"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-Idempotency","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-TTL","value":"{{$number.int(min=0,max=3600)}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","baseUrl":"http://127.0.0.1:3001","body":{"mode":"raw","raw":"{\n    \"chartOfAccountsGroupName\": \"chartOfAccountsGroupName\",\n    \"pending\": false,\n    \"route\": \"5656daa5-5b2a-4637-955f-e43bafceaf5d\",\n    \"description\": \"Complete Transaction\",\n    \"metadata\": {\n        \"key_1_string\": \"value_1_string\",\n        \"key_2_int\": 1,\n        \"key_3_boolean\": true\n    },\n    \"send\": {\n        \"asset\": \"BRL\",\n        \"value\": \"10000.45\",\n        \"source\": {\n            \"from\": [\n                {\n                    \"accountAlias\": \"@external/BRL\",\n                    \"amount\": {\n                        \"asset\": \"BRL\",\n                        \"value\": \"10000.45\"\n                    },\n                    \"description\": \"Complete Transaction - Source Operation\",\n                    \"route\": \"5656daa5-5b2a-4637-955f-e43bafceaf5e\",\n                    \"chartOfAccounts\": \"chartOfAccounts\",\n                    \"metadata\": {\n                        \"key_1_string\": \"value_1_string\",\n                        \"key_2_int\": 1,\n                        \"key_3_boolean\": true\n                    }\n                }\n            ]\n        },\n        \"distribute\": {\n            \"to\": [\n                {\n                    \"accountAlias\": \"@account1_rt_BRL\",\n                    \"amount\": {\n                        \"asset\": \"BRL\",\n                        \"value\": \"0.45\"\n                    },\n                    \"chartOfAccounts\": \"chartOfAccounts\",\n                    \"description\": \"Complete Transaction - Destination Operation\",\n                    \"route\": \"5656daa5-5b2a-4637-955f-e43bafceaf5f\",\n                    \"metadata\": {\n                        \"key_1_string\": \"value_1_string\",\n                        \"key_2_int\": 1,\n                        \"key_3_boolean\": true\n                    }\n                },\n                {\n                    \"accountAlias\": \"@account2_rt_BRL\",\n                    \"share\": {\n                        \"percentage\": 50\n                    },\n                    \"chartOfAccounts\": \"chartOfAccounts\",\n                    \"description\": \"Complete Transaction - Destination Operation\",\n                    \"route\": \"5656daa5-5b2a-4637-955f-e43bafceaf5f\",\n                    \"metadata\": {\n                        \"key_1_string\": \"value_1_string\",\n                        \"key_2_int\": 1,\n                        \"key_3_boolean\": true\n                    }\n                },\n                {\n                    \"accountAlias\": \"@account3_rt_BRL\",\n                    \"remaining\": \"remaining\",\n                    \"chartOfAccounts\": \"chartOfAccounts\",\n                    \"description\": \"Complete Transaction - Destination Operation\",\n                    \"route\": \"5656daa5-5b2a-4637-955f-e43bafceaf5f\",\n                    \"metadata\": {\n                        \"key_1_string\": \"value_1_string\",\n                        \"key_2_int\": 1,\n                        \"key_3_boolean\": true\n                    }\n                }\n            ]\n        }\n    }\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`transaction_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable transaction_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}},{"listen":"test","script":{"id":"postProcessors.1.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        const responseData = pm.response.json();","const creditOperations = 3;","const debitOperations = 1;","const onHoldOperations = 0;","const releaseOperations = 0;","const statusCode = \"CREATED\"","const assetCode = \"BRL\"","const sourceAccounts = [\"@external/BRL\"];","const destinationAccounts = [\"@account1_rt_BRL\",\"@account2_rt_BRL\",\"@account3_rt_BRL\"];","","pm.test(\"Validate Transaction Status\", function () {","    pm.expect(responseData.status.code).to.be.equal(statusCode);","});","","pm.test(\"Validate Source Accounts\", function () {","    sourceAccounts.forEach(function(account) {","        pm.expect(responseData.source).to.include(account);","    });","});","","pm.test(\"Validate Destination Accounts\", function () {","    destinationAccounts.forEach(function(account) {","        pm.expect(responseData.destination).to.include(account);","    });","});","","pm.test(\"Validate Operation Data Length\", function () {","    pm.expect(responseData.operations.length).to.be.equal(creditOperations+debitOperations+onHoldOperations+releaseOperations);","});","","pm.test(\"Validate Asset Code \", function () {","    pm.expect(responseData.assetCode).to.be.equal(\"BRL\");","});","","pm.test(\"Validate CREDIT operation quantity\", function () {","    const creditOp = responseData.operations.filter(op => op.type === 'CREDIT');","    pm.expect(creditOp.length).to.be.equal(creditOperations);","});","","pm.test(\"Validate DEBIT operation quantity\", function () {","    const debitOp = responseData.operations.filter(op => op.type === 'DEBIT');","    pm.expect(debitOp.length).to.eql(debitOperations);","});","","pm.test(\"Validate ON_HOLD operation quantity\", function () {","    const heldOp = responseData.operations.filter(op => op.type === 'ON_HOLD');","    pm.expect(heldOp.length).to.eql(onHoldOperations);","});","","pm.test(\"Validate RELEASE operation quantity\", function () {","    const releaseOp = responseData.operations.filter(op => op.type === 'RELEASE');","    pm.expect(releaseOp.length).to.eql(releaseOperations);","});","","pm.test(\"Validate Transaction Metadata\", function () {","    pm.expect(Object.keys(responseData.metadata).length).to.eql(3);","});","","for (const op in responseData.operations) {","    pm.test(`Validate Operation ${op} Metadata`, function () {","    pm.expect(Object.keys(responseData.operations[op].metadata).length).to.eql(3);","});","}","      "]}}],"responseDefinition":{"id":24931433,"name":"Created","code":201,"contentType":"json","jsonSchema":{"$ref":"#/definitions/8641358"},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453},"7325329":{"type":"object","properties":{"available":{"type":"string","x-apidog-mock":"100.00"},"onHold":{"type":"string","x-apidog-mock":"0"}},"x-apidog-orders":["available","onHold"],"required":["available","onHold"],"title":"balance.values.v3.x.x","name":"balance.values.v3.x.x","moduleId":760453},"8641347":{"type":"object","properties":{"id":{"type":"string","description":"The unique identifier of the Operation.","format":"uuid"},"description":{"type":"string","description":"Description of the operation."},"transactionId":{"type":"string","format":"uuid","description":"The unique identifier of the Transaction."},"type":{"type":"string","enum":["CREDIT","DEBIT","ON_HOLD","RELEASE"],"x-apidog-enum":[{"value":"CREDIT","name":"Credit Operation","description":""},{"value":"DEBIT","name":"Debit Operation","description":""},{"value":"ON_HOLD","name":"On Hold Operation","description":"Balance reservation operation, moving the amount to the on_hold balance."},{"value":"RELEASE","name":"Release Operation","description":"Release operation of the reserved balance, returning it to the available balance"}],"description":"The type of the operation.\n`CREDIT` `DEBIT` `ON_HOLD` `RELEASE`"},"assetCode":{"type":"string","description":"The code of the asset used in the operation."},"chartOfAccounts":{"type":"string","description":"The name of the Chart-of-Accounts that the operation belongs to."},"amount":{"type":"object","properties":{"value":{"type":"string","x-apidog-mock":"100.00"}},"x-apidog-orders":["value"],"x-apidog-refs":{},"required":["value"],"description":"An object containing information about the amount used in the operation."},"balance":{"type":"object","properties":{},"x-apidog-orders":["01JXFMCY8985B99D24K818AW5N"],"x-apidog-refs":{"01JXFMCY8985B99D24K818AW5N":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance before the operation."},"balanceAfter":{"type":"object","properties":{},"x-apidog-orders":["01JXFMDFCFGMBQMPBXMDDXN41A"],"x-apidog-refs":{"01JXFMDFCFGMBQMPBXMDDXN41A":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance after the operation."},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":["string","null"]}},"x-apidog-orders":["code","description"],"required":["code","description"],"description":"The transaction status."},"accountId":{"type":"string","format":"uuid","description":"The unique identifier of the Account."},"accountAlias":{"type":"string","description":"The alias for the account used in the operation."},"balanceId":{"type":"string","description":"The unique identifier of the Balance."},"route":{"type":"string","description":"Unique identifier of the operation route assigned to this specific leg of the transaction. This must match the corresponding source and destination configuration, determining how value is moved between accounts within the transaction route."},"balanceAffected":{"type":"boolean","description":"Indicates whether the operation had an impact on the account balance."},"balanceKey":{"type":"string","description":"The key identifier of the Balance"}},"x-apidog-orders":["id","transactionId","01JN71H2XZAMF6F0KY5QH2XTD6","accountId","accountAlias","balanceId","balanceKey","description","type","assetCode","chartOfAccounts","route","amount","balance","balanceAfter","status","balanceAffected","01JN718VEVJGSYKGXJ4PYFJ64Z","01JN718VKY0WWKT5F4317HNQF5"],"required":["id","description","transactionId","type","assetCode","chartOfAccounts","amount","balance","balanceAfter","status","accountId","accountAlias","balanceId","route","balanceAffected","balanceKey"],"x-apidog-refs":{"01JN718VEVJGSYKGXJ4PYFJ64Z":{"$ref":"#/definitions/5299902"},"01JN718VKY0WWKT5F4317HNQF5":{"$ref":"#/definitions/5295307"},"01JN71H2XZAMF6F0KY5QH2XTD6":{"$ref":"#/definitions/5365047"}},"title":"operation.response.v3.1.x","name":"operation.response.v3.1.x","moduleId":760453},"8641358":{"type":"object","properties":{"id":{"type":"string","description":"ID","format":"uuid"},"description":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"x-apidog-orders":["code","description"],"required":["code","description"]},"amount":{"type":"string"},"assetCode":{"type":"string"},"chartOfAccountsGroupName":{"type":"string"},"source":{"type":"array","items":{"type":"string"}},"destination":{"type":"array","items":{"type":"string"}},"operations":{"type":"array","items":{"$ref":"#/definitions/8641347"}},"route":{"type":"string"}},"x-apidog-orders":["id","01JN71ZQSPF1SPSM597SH2N81C","description","route","status","amount","assetCode","chartOfAccountsGroupName","source","destination","01JN72166CQABKZ83FTCMTEQ2S","operations","01JN7275ZNTQQN1PN8XN5ZHHQF"],"required":["id","description","status","amount","assetCode","chartOfAccountsGroupName","source","destination","operations"],"x-apidog-refs":{"01JN71ZQSPF1SPSM597SH2N81C":{"$ref":"#/definitions/5365047"},"01JN72166CQABKZ83FTCMTEQ2S":{"$ref":"#/definitions/5299902"},"01JN7275ZNTQQN1PN8XN5ZHHQF":{"$ref":"#/definitions/5295307"}},"title":"transaction.response.v3.1.x","name":"transaction.response.v3.1.x","moduleId":760453}}},"requestDefinition":{"jsonSchema":{"$ref":"#/definitions/8643885"}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"189d4680-ae0f-4bf6-8f0e-2157a37a7e06","id":"7838f5e5-0b0b-5672-bbb8-1ff475b4428e","type":"http","name":"Create a JSON Transaction - Approved 1:N ","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":59,"httpApiId":17810516,"httpApiCaseId":26176764,"httpApiName":"Create a JSON Transaction ","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/json","httpApiMethod":"post","httpApiCaseName":"Create a JSON Transaction ","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":true,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"9a439b71-0528-524d-afc9-dfed5bba7b99","type":"delay","metaInfo":{"id":"9a439b71-0528-524d-afc9-dfed5bba7b99","type":"delay","timeout":1000}},{"id":"19ae8e1a-0a07-533e-ad6f-5c1009b16f4f","name":"Retrieve a Approved Transaction 1:N","request":{"url":{"protocol":"http","port":"3001","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","transactions","{{transaction_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"},{"disabled":false,"type":"string","value":"{{transaction_id}}","key":"transaction_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","baseUrl":"http://127.0.0.1:3001","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        const responseData = pm.response.json();","const creditOperations = 3;","const debitOperations = 1;","const onHoldOperations = 0;","const releaseOperations = 0;","const statusCode = \"APPROVED\"","const assetCode = \"BRL\"","const sourceAccounts = [\"@external/BRL\"];","const destinationAccounts = [\"@account1_rt_BRL\",\"@account2_rt_BRL\",\"@account3_rt_BRL\"];","","pm.test(\"Validate Transaction Status\", function () {","    pm.expect(responseData.status.code).to.be.equal(statusCode);","});","","pm.test(\"Validate Source Accounts\", function () {","    sourceAccounts.forEach(function(account) {","        pm.expect(responseData.source).to.include(account);","    });","});","","pm.test(\"Validate Destination Accounts\", function () {","    destinationAccounts.forEach(function(account) {","        pm.expect(responseData.destination).to.include(account);","    });","});","","pm.test(\"Validate Operation Data Length\", function () {","    pm.expect(responseData.operations.length).to.be.equal(creditOperations+debitOperations+onHoldOperations+releaseOperations);","});","","pm.test(\"Validate Asset Code \", function () {","    pm.expect(responseData.assetCode).to.be.equal(\"BRL\");","});","","pm.test(\"Validate CREDIT operation quantity\", function () {","    const creditOp = responseData.operations.filter(op => op.type === 'CREDIT');","    pm.expect(creditOp.length).to.be.equal(creditOperations);","});","","pm.test(\"Validate DEBIT operation quantity\", function () {","    const debitOp = responseData.operations.filter(op => op.type === 'DEBIT');","    pm.expect(debitOp.length).to.eql(debitOperations);","});","","pm.test(\"Validate ON_HOLD operation quantity\", function () {","    const heldOp = responseData.operations.filter(op => op.type === 'ON_HOLD');","    pm.expect(heldOp.length).to.eql(onHoldOperations);","});","","pm.test(\"Validate RELEASE operation quantity\", function () {","    const releaseOp = responseData.operations.filter(op => op.type === 'RELEASE');","    pm.expect(releaseOp.length).to.eql(releaseOperations);","});","","pm.test(\"Validate Transaction Metadata\", function () {","    pm.expect(Object.keys(responseData.metadata).length).to.eql(3);","});","","for (const op in responseData.operations) {","    pm.test(`Validate Operation ${op} Metadata`, function () {","    pm.expect(Object.keys(responseData.operations[op].metadata).length).to.eql(3);","});","}","      "]}}],"responseDefinition":{"id":24932086,"name":"Success","code":200,"contentType":"json","jsonSchema":{"$ref":"#/definitions/8641358"},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453},"7325329":{"type":"object","properties":{"available":{"type":"string","x-apidog-mock":"100.00"},"onHold":{"type":"string","x-apidog-mock":"0"}},"x-apidog-orders":["available","onHold"],"required":["available","onHold"],"title":"balance.values.v3.x.x","name":"balance.values.v3.x.x","moduleId":760453},"8641347":{"type":"object","properties":{"id":{"type":"string","description":"The unique identifier of the Operation.","format":"uuid"},"description":{"type":"string","description":"Description of the operation."},"transactionId":{"type":"string","format":"uuid","description":"The unique identifier of the Transaction."},"type":{"type":"string","enum":["CREDIT","DEBIT","ON_HOLD","RELEASE"],"x-apidog-enum":[{"value":"CREDIT","name":"Credit Operation","description":""},{"value":"DEBIT","name":"Debit Operation","description":""},{"value":"ON_HOLD","name":"On Hold Operation","description":"Balance reservation operation, moving the amount to the on_hold balance."},{"value":"RELEASE","name":"Release Operation","description":"Release operation of the reserved balance, returning it to the available balance"}],"description":"The type of the operation.\n`CREDIT` `DEBIT` `ON_HOLD` `RELEASE`"},"assetCode":{"type":"string","description":"The code of the asset used in the operation."},"chartOfAccounts":{"type":"string","description":"The name of the Chart-of-Accounts that the operation belongs to."},"amount":{"type":"object","properties":{"value":{"type":"string","x-apidog-mock":"100.00"}},"x-apidog-orders":["value"],"x-apidog-refs":{},"required":["value"],"description":"An object containing information about the amount used in the operation."},"balance":{"type":"object","properties":{},"x-apidog-orders":["01JXFMCY8985B99D24K818AW5N"],"x-apidog-refs":{"01JXFMCY8985B99D24K818AW5N":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance before the operation."},"balanceAfter":{"type":"object","properties":{},"x-apidog-orders":["01JXFMDFCFGMBQMPBXMDDXN41A"],"x-apidog-refs":{"01JXFMDFCFGMBQMPBXMDDXN41A":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance after the operation."},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":["string","null"]}},"x-apidog-orders":["code","description"],"required":["code","description"],"description":"The transaction status."},"accountId":{"type":"string","format":"uuid","description":"The unique identifier of the Account."},"accountAlias":{"type":"string","description":"The alias for the account used in the operation."},"balanceId":{"type":"string","description":"The unique identifier of the Balance."},"route":{"type":"string","description":"Unique identifier of the operation route assigned to this specific leg of the transaction. This must match the corresponding source and destination configuration, determining how value is moved between accounts within the transaction route."},"balanceAffected":{"type":"boolean","description":"Indicates whether the operation had an impact on the account balance."},"balanceKey":{"type":"string","description":"The key identifier of the Balance"}},"x-apidog-orders":["id","transactionId","01JN71H2XZAMF6F0KY5QH2XTD6","accountId","accountAlias","balanceId","balanceKey","description","type","assetCode","chartOfAccounts","route","amount","balance","balanceAfter","status","balanceAffected","01JN718VEVJGSYKGXJ4PYFJ64Z","01JN718VKY0WWKT5F4317HNQF5"],"required":["id","description","transactionId","type","assetCode","chartOfAccounts","amount","balance","balanceAfter","status","accountId","accountAlias","balanceId","route","balanceAffected","balanceKey"],"x-apidog-refs":{"01JN718VEVJGSYKGXJ4PYFJ64Z":{"$ref":"#/definitions/5299902"},"01JN718VKY0WWKT5F4317HNQF5":{"$ref":"#/definitions/5295307"},"01JN71H2XZAMF6F0KY5QH2XTD6":{"$ref":"#/definitions/5365047"}},"title":"operation.response.v3.1.x","name":"operation.response.v3.1.x","moduleId":760453},"8641358":{"type":"object","properties":{"id":{"type":"string","description":"ID","format":"uuid"},"description":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"x-apidog-orders":["code","description"],"required":["code","description"]},"amount":{"type":"string"},"assetCode":{"type":"string"},"chartOfAccountsGroupName":{"type":"string"},"source":{"type":"array","items":{"type":"string"}},"destination":{"type":"array","items":{"type":"string"}},"operations":{"type":"array","items":{"$ref":"#/definitions/8641347"}},"route":{"type":"string"}},"x-apidog-orders":["id","01JN71ZQSPF1SPSM597SH2N81C","description","route","status","amount","assetCode","chartOfAccountsGroupName","source","destination","01JN72166CQABKZ83FTCMTEQ2S","operations","01JN7275ZNTQQN1PN8XN5ZHHQF"],"required":["id","description","status","amount","assetCode","chartOfAccountsGroupName","source","destination","operations"],"x-apidog-refs":{"01JN71ZQSPF1SPSM597SH2N81C":{"$ref":"#/definitions/5365047"},"01JN72166CQABKZ83FTCMTEQ2S":{"$ref":"#/definitions/5299902"},"01JN7275ZNTQQN1PN8XN5ZHHQF":{"$ref":"#/definitions/5295307"}},"title":"transaction.response.v3.1.x","name":"transaction.response.v3.1.x","moduleId":760453}}},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"bf0bb4e3-f1e3-4f41-8502-b6f4c26a33b5","id":"19ae8e1a-0a07-533e-ad6f-5c1009b16f4f","type":"http","name":"Retrieve a Approved Transaction 1:N","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":64,"httpApiId":17810519,"httpApiCaseId":26177060,"httpApiName":"Retrieve a Transaction","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/{transaction_id}","httpApiMethod":"get","httpApiCaseName":"Retrieve a Transaction","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":true,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"f84cb0a6-5f14-5a8e-acb7-afc37757515c","name":"Create a  Transaction to Commit - Pending 1:N","request":{"url":{"protocol":"http","port":"3001","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","transactions","json"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-Idempotency","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-TTL","value":"{{$number.int(min=0,max=3600)}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","baseUrl":"http://127.0.0.1:3001","body":{"mode":"raw","raw":"{\n    \"chartOfAccountsGroupName\": \"chartOfAccountsGroupName\",\n    \"pending\": true,\n    \"route\": \"5656daa5-5b2a-4637-955f-e43bafceaf5d\",\n    \"description\": \"Pending Transaction\",\n    \"metadata\": {\n        \"key_1_string\": \"value_1_string\",\n        \"key_2_int\": 1,\n        \"key_3_boolean\": true\n    },\n    \"send\": {\n        \"asset\": \"BRL\",\n        \"value\": \"1000\",\n        \"source\": {\n            \"from\": [\n                {\n                    \"accountAlias\": \"@account1_rt_BRL\",\n                    \"amount\": {\n                        \"asset\": \"BRL\",\n                        \"value\": \"1000\"\n                    },\n                    \"description\": \"Pending Transaction - Source Operation\",\n                    \"route\": \"5656daa5-5b2a-4637-955f-e43bafceaf5e\",\n                    \"chartOfAccounts\": \"chartOfAccounts\",\n                    \"metadata\": {\n                        \"key_1_string\": \"value_1_string\",\n                        \"key_2_int\": 1,\n                        \"key_3_boolean\": true\n                    }\n                }\n            ]\n        },\n        \"distribute\": {\n            \"to\": [\n                {\n                    \"accountAlias\": \"@account2_rt_BRL\",\n                    \"amount\": {\n                        \"asset\": \"BRL\",\n                        \"value\": \"100\"\n                    },\n                    \"chartOfAccounts\": \"chartOfAccounts\",\n                    \"description\": \"Pending Transaction - Destination Operation\",\n                    \"route\": \"5656daa5-5b2a-4637-955f-e43bafceaf5f\",\n                    \"metadata\": {\n                        \"key_1_string\": \"value_1_string\",\n                        \"key_2_int\": 1,\n                        \"key_3_boolean\": true\n                    }\n                },\n                {\n                    \"accountAlias\": \"@account3_rt_BRL\",\n                    \"amount\": {\n                        \"asset\": \"BRL\",\n                        \"value\": \"900\"\n                    },\n                    \"chartOfAccounts\": \"chartOfAccounts\",\n                    \"description\": \"Pending Transaction - Destination Operation\",\n                    \"route\": \"5656daa5-5b2a-4637-955f-e43bafceaf5f\",\n                    \"metadata\": {\n                        \"key_1_string\": \"value_1_string\",\n                        \"key_2_int\": 1,\n                        \"key_3_boolean\": true\n                    }\n                }\n            ]\n        }\n    }\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`pending_transaction_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable pending_transaction_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}},{"listen":"test","script":{"id":"postProcessors.1.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        const responseData = pm.response.json();","const creditOperations = 0;","const debitOperations = 0;","const onHoldOperations = 1;","const releaseOperations = 0;","const statusCode = \"PENDING\"","const assetCode = \"BRL\"","const sourceAccounts = [\"@account1_rt_BRL\"];","const destinationAccounts = [\"@account2_rt_BRL\", \"@account3_rt_BRL\"];","","pm.test(\"Validate Transaction Status\", function () {","    pm.expect(responseData.status.code).to.be.equal(statusCode);","});","","pm.test(\"Validate Source Accounts\", function () {","    sourceAccounts.forEach(function(account) {","        pm.expect(responseData.source).to.include(account);","    });","});","","pm.test(\"Validate Destination Accounts\", function () {","    destinationAccounts.forEach(function(account) {","        pm.expect(responseData.destination).to.include(account);","    });","});","","pm.test(\"Validate Operation Data Length\", function () {","    pm.expect(responseData.operations.length).to.be.equal(creditOperations+debitOperations+onHoldOperations+releaseOperations);","});","","pm.test(\"Validate Asset Code \", function () {","    pm.expect(responseData.assetCode).to.be.equal(\"BRL\");","});","","pm.test(\"Validate CREDIT operation quantity\", function () {","    const creditOp = responseData.operations.filter(op => op.type === 'CREDIT');","    pm.expect(creditOp.length).to.be.equal(creditOperations);","});","","pm.test(\"Validate DEBIT operation quantity\", function () {","    const debitOp = responseData.operations.filter(op => op.type === 'DEBIT');","    pm.expect(debitOp.length).to.eql(debitOperations);","});","","pm.test(\"Validate ON_HOLD operation quantity\", function () {","    const heldOp = responseData.operations.filter(op => op.type === 'ON_HOLD');","    pm.expect(heldOp.length).to.eql(onHoldOperations);","});","","pm.test(\"Validate RELEASE operation quantity\", function () {","    const releaseOp = responseData.operations.filter(op => op.type === 'RELEASE');","    pm.expect(releaseOp.length).to.eql(releaseOperations);","});","","pm.test(\"Validate Transaction Metadata\", function () {","    pm.expect(Object.keys(responseData.metadata).length).to.eql(3);","});","","for (const op in responseData.operations) {","    pm.test(`Validate Operation ${op} Metadata`, function () {","    pm.expect(Object.keys(responseData.operations[op].metadata).length).to.eql(3);","});","}","      "]}}],"responseDefinition":{"id":24931433,"name":"Created","code":201,"contentType":"json","jsonSchema":{"$ref":"#/definitions/8641358"},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453},"7325329":{"type":"object","properties":{"available":{"type":"string","x-apidog-mock":"100.00"},"onHold":{"type":"string","x-apidog-mock":"0"}},"x-apidog-orders":["available","onHold"],"required":["available","onHold"],"title":"balance.values.v3.x.x","name":"balance.values.v3.x.x","moduleId":760453},"8641347":{"type":"object","properties":{"id":{"type":"string","description":"The unique identifier of the Operation.","format":"uuid"},"description":{"type":"string","description":"Description of the operation."},"transactionId":{"type":"string","format":"uuid","description":"The unique identifier of the Transaction."},"type":{"type":"string","enum":["CREDIT","DEBIT","ON_HOLD","RELEASE"],"x-apidog-enum":[{"value":"CREDIT","name":"Credit Operation","description":""},{"value":"DEBIT","name":"Debit Operation","description":""},{"value":"ON_HOLD","name":"On Hold Operation","description":"Balance reservation operation, moving the amount to the on_hold balance."},{"value":"RELEASE","name":"Release Operation","description":"Release operation of the reserved balance, returning it to the available balance"}],"description":"The type of the operation.\n`CREDIT` `DEBIT` `ON_HOLD` `RELEASE`"},"assetCode":{"type":"string","description":"The code of the asset used in the operation."},"chartOfAccounts":{"type":"string","description":"The name of the Chart-of-Accounts that the operation belongs to."},"amount":{"type":"object","properties":{"value":{"type":"string","x-apidog-mock":"100.00"}},"x-apidog-orders":["value"],"x-apidog-refs":{},"required":["value"],"description":"An object containing information about the amount used in the operation."},"balance":{"type":"object","properties":{},"x-apidog-orders":["01JXFMCY8985B99D24K818AW5N"],"x-apidog-refs":{"01JXFMCY8985B99D24K818AW5N":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance before the operation."},"balanceAfter":{"type":"object","properties":{},"x-apidog-orders":["01JXFMDFCFGMBQMPBXMDDXN41A"],"x-apidog-refs":{"01JXFMDFCFGMBQMPBXMDDXN41A":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance after the operation."},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":["string","null"]}},"x-apidog-orders":["code","description"],"required":["code","description"],"description":"The transaction status."},"accountId":{"type":"string","format":"uuid","description":"The unique identifier of the Account."},"accountAlias":{"type":"string","description":"The alias for the account used in the operation."},"balanceId":{"type":"string","description":"The unique identifier of the Balance."},"route":{"type":"string","description":"Unique identifier of the operation route assigned to this specific leg of the transaction. This must match the corresponding source and destination configuration, determining how value is moved between accounts within the transaction route."},"balanceAffected":{"type":"boolean","description":"Indicates whether the operation had an impact on the account balance."},"balanceKey":{"type":"string","description":"The key identifier of the Balance"}},"x-apidog-orders":["id","transactionId","01JN71H2XZAMF6F0KY5QH2XTD6","accountId","accountAlias","balanceId","balanceKey","description","type","assetCode","chartOfAccounts","route","amount","balance","balanceAfter","status","balanceAffected","01JN718VEVJGSYKGXJ4PYFJ64Z","01JN718VKY0WWKT5F4317HNQF5"],"required":["id","description","transactionId","type","assetCode","chartOfAccounts","amount","balance","balanceAfter","status","accountId","accountAlias","balanceId","route","balanceAffected","balanceKey"],"x-apidog-refs":{"01JN718VEVJGSYKGXJ4PYFJ64Z":{"$ref":"#/definitions/5299902"},"01JN718VKY0WWKT5F4317HNQF5":{"$ref":"#/definitions/5295307"},"01JN71H2XZAMF6F0KY5QH2XTD6":{"$ref":"#/definitions/5365047"}},"title":"operation.response.v3.1.x","name":"operation.response.v3.1.x","moduleId":760453},"8641358":{"type":"object","properties":{"id":{"type":"string","description":"ID","format":"uuid"},"description":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"x-apidog-orders":["code","description"],"required":["code","description"]},"amount":{"type":"string"},"assetCode":{"type":"string"},"chartOfAccountsGroupName":{"type":"string"},"source":{"type":"array","items":{"type":"string"}},"destination":{"type":"array","items":{"type":"string"}},"operations":{"type":"array","items":{"$ref":"#/definitions/8641347"}},"route":{"type":"string"}},"x-apidog-orders":["id","01JN71ZQSPF1SPSM597SH2N81C","description","route","status","amount","assetCode","chartOfAccountsGroupName","source","destination","01JN72166CQABKZ83FTCMTEQ2S","operations","01JN7275ZNTQQN1PN8XN5ZHHQF"],"required":["id","description","status","amount","assetCode","chartOfAccountsGroupName","source","destination","operations"],"x-apidog-refs":{"01JN71ZQSPF1SPSM597SH2N81C":{"$ref":"#/definitions/5365047"},"01JN72166CQABKZ83FTCMTEQ2S":{"$ref":"#/definitions/5299902"},"01JN7275ZNTQQN1PN8XN5ZHHQF":{"$ref":"#/definitions/5295307"}},"title":"transaction.response.v3.1.x","name":"transaction.response.v3.1.x","moduleId":760453}}},"requestDefinition":{"jsonSchema":{"$ref":"#/definitions/8643885"}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"4b870a88-b2ec-4356-a8ba-00bf0de0fc76","id":"f84cb0a6-5f14-5a8e-acb7-afc37757515c","type":"http","name":"Create a  Transaction to Commit - Pending 1:N","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":60,"httpApiId":17810516,"httpApiCaseId":26176785,"httpApiName":"Create a JSON Transaction ","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/json","httpApiMethod":"post","httpApiCaseName":"Create a JSON Transaction ","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"47065faa-6100-5a58-a177-3f6d881f4dcf","name":"Commit a Pending Transaction 1:N","request":{"url":{"protocol":"http","port":"3001","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","transactions","{{pending_transaction_id}}","commit"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"},{"disabled":false,"type":"string","value":"{{pending_transaction_id}}","key":"transaction_id"}]},"header":[{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"}],"method":"POST","baseUrl":"http://127.0.0.1:3001","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        const responseData = pm.response.json();","const creditOperations = 2;","const debitOperations = 1;","const onHoldOperations = 0;","const releaseOperations = 0;","const statusCode = \"APPROVED\"","const assetCode = \"BRL\"","const sourceAccounts = [\"@account1_rt_BRL\"];","const destinationAccounts = [\"@account2_rt_BRL\", \"@account3_rt_BRL\"];","","pm.test(\"Validate Transaction Status\", function () {","    pm.expect(responseData.status.code).to.be.equal(statusCode);","});","","pm.test(\"Validate Source Accounts\", function () {","    sourceAccounts.forEach(function(account) {","        pm.expect(responseData.source).to.include(account);","    });","});","","pm.test(\"Validate Destination Accounts\", function () {","    destinationAccounts.forEach(function(account) {","        pm.expect(responseData.destination).to.include(account);","    });","});","","pm.test(\"Validate Operation Data Length\", function () {","    pm.expect(responseData.operations.length).to.be.equal(creditOperations+debitOperations+onHoldOperations+releaseOperations);","});","","pm.test(\"Validate Asset Code \", function () {","    pm.expect(responseData.assetCode).to.be.equal(\"BRL\");","});","","pm.test(\"Validate CREDIT operation quantity\", function () {","    const creditOp = responseData.operations.filter(op => op.type === 'CREDIT');","    pm.expect(creditOp.length).to.be.equal(creditOperations);","});","","pm.test(\"Validate DEBIT operation quantity\", function () {","    const debitOp = responseData.operations.filter(op => op.type === 'DEBIT');","    pm.expect(debitOp.length).to.eql(debitOperations);","});","","pm.test(\"Validate ON_HOLD operation quantity\", function () {","    const heldOp = responseData.operations.filter(op => op.type === 'ON_HOLD');","    pm.expect(heldOp.length).to.eql(onHoldOperations);","});","","pm.test(\"Validate RELEASE operation quantity\", function () {","    const releaseOp = responseData.operations.filter(op => op.type === 'RELEASE');","    pm.expect(releaseOp.length).to.eql(releaseOperations);","});","","pm.test(\"Validate Transaction Metadata\", function () {","    pm.expect(Object.keys(responseData.metadata).length).to.eql(3);","});","","for (const op in responseData.operations) {","    pm.test(`Validate Operation ${op} Metadata`, function () {","    pm.expect(Object.keys(responseData.operations[op].metadata).length).to.eql(3);","});","}","      "]}}],"responseDefinition":{"id":25051272,"name":"Created","code":201,"contentType":"json","jsonSchema":{"$ref":"#/definitions/8641358"},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453},"7325329":{"type":"object","properties":{"available":{"type":"string","x-apidog-mock":"100.00"},"onHold":{"type":"string","x-apidog-mock":"0"}},"x-apidog-orders":["available","onHold"],"required":["available","onHold"],"title":"balance.values.v3.x.x","name":"balance.values.v3.x.x","moduleId":760453},"8641347":{"type":"object","properties":{"id":{"type":"string","description":"The unique identifier of the Operation.","format":"uuid"},"description":{"type":"string","description":"Description of the operation."},"transactionId":{"type":"string","format":"uuid","description":"The unique identifier of the Transaction."},"type":{"type":"string","enum":["CREDIT","DEBIT","ON_HOLD","RELEASE"],"x-apidog-enum":[{"value":"CREDIT","name":"Credit Operation","description":""},{"value":"DEBIT","name":"Debit Operation","description":""},{"value":"ON_HOLD","name":"On Hold Operation","description":"Balance reservation operation, moving the amount to the on_hold balance."},{"value":"RELEASE","name":"Release Operation","description":"Release operation of the reserved balance, returning it to the available balance"}],"description":"The type of the operation.\n`CREDIT` `DEBIT` `ON_HOLD` `RELEASE`"},"assetCode":{"type":"string","description":"The code of the asset used in the operation."},"chartOfAccounts":{"type":"string","description":"The name of the Chart-of-Accounts that the operation belongs to."},"amount":{"type":"object","properties":{"value":{"type":"string","x-apidog-mock":"100.00"}},"x-apidog-orders":["value"],"x-apidog-refs":{},"required":["value"],"description":"An object containing information about the amount used in the operation."},"balance":{"type":"object","properties":{},"x-apidog-orders":["01JXFMCY8985B99D24K818AW5N"],"x-apidog-refs":{"01JXFMCY8985B99D24K818AW5N":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance before the operation."},"balanceAfter":{"type":"object","properties":{},"x-apidog-orders":["01JXFMDFCFGMBQMPBXMDDXN41A"],"x-apidog-refs":{"01JXFMDFCFGMBQMPBXMDDXN41A":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance after the operation."},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":["string","null"]}},"x-apidog-orders":["code","description"],"required":["code","description"],"description":"The transaction status."},"accountId":{"type":"string","format":"uuid","description":"The unique identifier of the Account."},"accountAlias":{"type":"string","description":"The alias for the account used in the operation."},"balanceId":{"type":"string","description":"The unique identifier of the Balance."},"route":{"type":"string","description":"Unique identifier of the operation route assigned to this specific leg of the transaction. This must match the corresponding source and destination configuration, determining how value is moved between accounts within the transaction route."},"balanceAffected":{"type":"boolean","description":"Indicates whether the operation had an impact on the account balance."},"balanceKey":{"type":"string","description":"The key identifier of the Balance"}},"x-apidog-orders":["id","transactionId","01JN71H2XZAMF6F0KY5QH2XTD6","accountId","accountAlias","balanceId","balanceKey","description","type","assetCode","chartOfAccounts","route","amount","balance","balanceAfter","status","balanceAffected","01JN718VEVJGSYKGXJ4PYFJ64Z","01JN718VKY0WWKT5F4317HNQF5"],"required":["id","description","transactionId","type","assetCode","chartOfAccounts","amount","balance","balanceAfter","status","accountId","accountAlias","balanceId","route","balanceAffected","balanceKey"],"x-apidog-refs":{"01JN718VEVJGSYKGXJ4PYFJ64Z":{"$ref":"#/definitions/5299902"},"01JN718VKY0WWKT5F4317HNQF5":{"$ref":"#/definitions/5295307"},"01JN71H2XZAMF6F0KY5QH2XTD6":{"$ref":"#/definitions/5365047"}},"title":"operation.response.v3.1.x","name":"operation.response.v3.1.x","moduleId":760453},"8641358":{"type":"object","properties":{"id":{"type":"string","description":"ID","format":"uuid"},"description":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"x-apidog-orders":["code","description"],"required":["code","description"]},"amount":{"type":"string"},"assetCode":{"type":"string"},"chartOfAccountsGroupName":{"type":"string"},"source":{"type":"array","items":{"type":"string"}},"destination":{"type":"array","items":{"type":"string"}},"operations":{"type":"array","items":{"$ref":"#/definitions/8641347"}},"route":{"type":"string"}},"x-apidog-orders":["id","01JN71ZQSPF1SPSM597SH2N81C","description","route","status","amount","assetCode","chartOfAccountsGroupName","source","destination","01JN72166CQABKZ83FTCMTEQ2S","operations","01JN7275ZNTQQN1PN8XN5ZHHQF"],"required":["id","description","status","amount","assetCode","chartOfAccountsGroupName","source","destination","operations"],"x-apidog-refs":{"01JN71ZQSPF1SPSM597SH2N81C":{"$ref":"#/definitions/5365047"},"01JN72166CQABKZ83FTCMTEQ2S":{"$ref":"#/definitions/5299902"},"01JN7275ZNTQQN1PN8XN5ZHHQF":{"$ref":"#/definitions/5295307"}},"title":"transaction.response.v3.1.x","name":"transaction.response.v3.1.x","moduleId":760453}}},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"a4ff37f3-1a2f-4528-89ad-046b18a4a3e3","id":"47065faa-6100-5a58-a177-3f6d881f4dcf","type":"http","name":"Commit a Pending Transaction 1:N","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":62,"httpApiId":17886200,"httpApiCaseId":26176913,"httpApiName":"Commit a Pending Transaction","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/{transaction_id}/commit","httpApiMethod":"post","httpApiCaseName":"Commit a Pending Transaction","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"f31588a4-94be-501b-8057-8e7f74ecc81b","type":"delay","metaInfo":{"id":"f31588a4-94be-501b-8057-8e7f74ecc81b","type":"delay","timeout":1000}},{"id":"3ab64426-1bff-5c02-818a-c3b8929249a5","name":"Retrieve a Commited Transaction 1:N","request":{"url":{"protocol":"http","port":"3001","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","transactions","{{pending_transaction_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"},{"disabled":false,"type":"string","value":"{{pending_transaction_id}}","key":"transaction_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","baseUrl":"http://127.0.0.1:3001","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        const responseData = pm.response.json();","const creditOperations = 2;","const debitOperations = 1;","const onHoldOperations = 1;","const releaseOperations = 0;","const statusCode = \"APPROVED\"","const assetCode = \"BRL\"","const sourceAccounts = [\"@account1_rt_BRL\"];","const destinationAccounts = [\"@account2_rt_BRL\", \"@account3_rt_BRL\"];","","pm.test(\"Validate Transaction Status\", function () {","    pm.expect(responseData.status.code).to.be.equal(statusCode);","});","","pm.test(\"Validate Source Accounts\", function () {","    sourceAccounts.forEach(function(account) {","        pm.expect(responseData.source).to.include(account);","    });","});","","pm.test(\"Validate Destination Accounts\", function () {","    destinationAccounts.forEach(function(account) {","        pm.expect(responseData.destination).to.include(account);","    });","});","","pm.test(\"Validate Operation Data Length\", function () {","    pm.expect(responseData.operations.length).to.be.equal(creditOperations+debitOperations+onHoldOperations+releaseOperations);","});","","pm.test(\"Validate Asset Code \", function () {","    pm.expect(responseData.assetCode).to.be.equal(\"BRL\");","});","","pm.test(\"Validate CREDIT operation quantity\", function () {","    const creditOp = responseData.operations.filter(op => op.type === 'CREDIT');","    pm.expect(creditOp.length).to.be.equal(creditOperations);","});","","pm.test(\"Validate DEBIT operation quantity\", function () {","    const debitOp = responseData.operations.filter(op => op.type === 'DEBIT');","    pm.expect(debitOp.length).to.eql(debitOperations);","});","","pm.test(\"Validate ON_HOLD operation quantity\", function () {","    const heldOp = responseData.operations.filter(op => op.type === 'ON_HOLD');","    pm.expect(heldOp.length).to.eql(onHoldOperations);","});","","pm.test(\"Validate RELEASE operation quantity\", function () {","    const releaseOp = responseData.operations.filter(op => op.type === 'RELEASE');","    pm.expect(releaseOp.length).to.eql(releaseOperations);","});","","pm.test(\"Validate Transaction Metadata\", function () {","    pm.expect(Object.keys(responseData.metadata).length).to.eql(3);","});","","for (const op in responseData.operations) {","    pm.test(`Validate Operation ${op} Metadata`, function () {","    pm.expect(Object.keys(responseData.operations[op].metadata).length).to.eql(3);","});","}","      "]}}],"responseDefinition":{"id":24932086,"name":"Success","code":200,"contentType":"json","jsonSchema":{"$ref":"#/definitions/8641358"},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453},"7325329":{"type":"object","properties":{"available":{"type":"string","x-apidog-mock":"100.00"},"onHold":{"type":"string","x-apidog-mock":"0"}},"x-apidog-orders":["available","onHold"],"required":["available","onHold"],"title":"balance.values.v3.x.x","name":"balance.values.v3.x.x","moduleId":760453},"8641347":{"type":"object","properties":{"id":{"type":"string","description":"The unique identifier of the Operation.","format":"uuid"},"description":{"type":"string","description":"Description of the operation."},"transactionId":{"type":"string","format":"uuid","description":"The unique identifier of the Transaction."},"type":{"type":"string","enum":["CREDIT","DEBIT","ON_HOLD","RELEASE"],"x-apidog-enum":[{"value":"CREDIT","name":"Credit Operation","description":""},{"value":"DEBIT","name":"Debit Operation","description":""},{"value":"ON_HOLD","name":"On Hold Operation","description":"Balance reservation operation, moving the amount to the on_hold balance."},{"value":"RELEASE","name":"Release Operation","description":"Release operation of the reserved balance, returning it to the available balance"}],"description":"The type of the operation.\n`CREDIT` `DEBIT` `ON_HOLD` `RELEASE`"},"assetCode":{"type":"string","description":"The code of the asset used in the operation."},"chartOfAccounts":{"type":"string","description":"The name of the Chart-of-Accounts that the operation belongs to."},"amount":{"type":"object","properties":{"value":{"type":"string","x-apidog-mock":"100.00"}},"x-apidog-orders":["value"],"x-apidog-refs":{},"required":["value"],"description":"An object containing information about the amount used in the operation."},"balance":{"type":"object","properties":{},"x-apidog-orders":["01JXFMCY8985B99D24K818AW5N"],"x-apidog-refs":{"01JXFMCY8985B99D24K818AW5N":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance before the operation."},"balanceAfter":{"type":"object","properties":{},"x-apidog-orders":["01JXFMDFCFGMBQMPBXMDDXN41A"],"x-apidog-refs":{"01JXFMDFCFGMBQMPBXMDDXN41A":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance after the operation."},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":["string","null"]}},"x-apidog-orders":["code","description"],"required":["code","description"],"description":"The transaction status."},"accountId":{"type":"string","format":"uuid","description":"The unique identifier of the Account."},"accountAlias":{"type":"string","description":"The alias for the account used in the operation."},"balanceId":{"type":"string","description":"The unique identifier of the Balance."},"route":{"type":"string","description":"Unique identifier of the operation route assigned to this specific leg of the transaction. This must match the corresponding source and destination configuration, determining how value is moved between accounts within the transaction route."},"balanceAffected":{"type":"boolean","description":"Indicates whether the operation had an impact on the account balance."},"balanceKey":{"type":"string","description":"The key identifier of the Balance"}},"x-apidog-orders":["id","transactionId","01JN71H2XZAMF6F0KY5QH2XTD6","accountId","accountAlias","balanceId","balanceKey","description","type","assetCode","chartOfAccounts","route","amount","balance","balanceAfter","status","balanceAffected","01JN718VEVJGSYKGXJ4PYFJ64Z","01JN718VKY0WWKT5F4317HNQF5"],"required":["id","description","transactionId","type","assetCode","chartOfAccounts","amount","balance","balanceAfter","status","accountId","accountAlias","balanceId","route","balanceAffected","balanceKey"],"x-apidog-refs":{"01JN718VEVJGSYKGXJ4PYFJ64Z":{"$ref":"#/definitions/5299902"},"01JN718VKY0WWKT5F4317HNQF5":{"$ref":"#/definitions/5295307"},"01JN71H2XZAMF6F0KY5QH2XTD6":{"$ref":"#/definitions/5365047"}},"title":"operation.response.v3.1.x","name":"operation.response.v3.1.x","moduleId":760453},"8641358":{"type":"object","properties":{"id":{"type":"string","description":"ID","format":"uuid"},"description":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"x-apidog-orders":["code","description"],"required":["code","description"]},"amount":{"type":"string"},"assetCode":{"type":"string"},"chartOfAccountsGroupName":{"type":"string"},"source":{"type":"array","items":{"type":"string"}},"destination":{"type":"array","items":{"type":"string"}},"operations":{"type":"array","items":{"$ref":"#/definitions/8641347"}},"route":{"type":"string"}},"x-apidog-orders":["id","01JN71ZQSPF1SPSM597SH2N81C","description","route","status","amount","assetCode","chartOfAccountsGroupName","source","destination","01JN72166CQABKZ83FTCMTEQ2S","operations","01JN7275ZNTQQN1PN8XN5ZHHQF"],"required":["id","description","status","amount","assetCode","chartOfAccountsGroupName","source","destination","operations"],"x-apidog-refs":{"01JN71ZQSPF1SPSM597SH2N81C":{"$ref":"#/definitions/5365047"},"01JN72166CQABKZ83FTCMTEQ2S":{"$ref":"#/definitions/5299902"},"01JN7275ZNTQQN1PN8XN5ZHHQF":{"$ref":"#/definitions/5295307"}},"title":"transaction.response.v3.1.x","name":"transaction.response.v3.1.x","moduleId":760453}}},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"2b83cc79-38ea-4a55-985d-244671839db5","id":"3ab64426-1bff-5c02-818a-c3b8929249a5","type":"http","name":"Retrieve a Commited Transaction 1:N","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":63,"httpApiId":17810519,"httpApiCaseId":26176951,"httpApiName":"Retrieve a Transaction","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/{transaction_id}","httpApiMethod":"get","httpApiCaseName":"Retrieve a Transaction","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":true,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"e8bbf821-fe96-57c2-b2d4-38d8403bea9a","type":"group","metaInfo":{"id":"e8bbf821-fe96-57c2-b2d4-38d8403bea9a","type":"group","scopeType":"end","scopeStartId":"9f77a9be-01ea-5e71-8127-aad79017abbe"}},{"id":"1ca8cccd-4bcd-5eea-85c5-d545b398a8f0","type":"group","metaInfo":{"id":"1ca8cccd-4bcd-5eea-85c5-d545b398a8f0","type":"group","scopeType":"start","scopeEndId":"b6231060-b0c7-5b51-979b-941a69121c8f","name":"List Transactions"}},{"id":"a82c79e4-0930-5c0b-823c-6347cbb63f01","name":"List Transactions - Limit 5","request":{"url":{"protocol":"http","port":"3001","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","transactions"],"host":["127","0","0","1"],"query":[{"disabled":false,"key":"limit","value":"5"},{"disabled":true,"key":"metadata.message","value":"pagamento"},{"disabled":true,"key":"start_date","value":"2021-01-01"},{"disabled":true,"key":"end_date","value":"2025-01-01"},{"disabled":true,"key":"sort_order","value":"asc"},{"disabled":true,"key":"cursor","value":"eyJpZCI6IjAxOTNiNTZmLWJhY2YtNzQ0MS05NDU4LTEyZTE5MjVlOGI4NCIsInBvaW50c19uZXh0Ijp0cnVlfQ=="}],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","baseUrl":"http://127.0.0.1:3001","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        var responseData = pm.response.json();","var requestQueryParam = pm.request.url.query.toObject();","","pm.test(\"Validate Response Data Length \", function () {","  pm.expect(responseData.items.length).to.be.within(1, parseInt(requestQueryParam.limit));","});","      "]}}],"responseDefinition":{"id":24932085,"name":"Success","code":200,"contentType":"json","jsonSchema":{"type":"object","properties":{"items":{"type":"array","items":{"$ref":"#/definitions/8641358"}}},"x-apidog-orders":["items","01JN72JHDNNFPGRT0YE7N4FHCF"],"required":["items"],"x-apidog-refs":{"01JN72JHDNNFPGRT0YE7N4FHCF":{"$ref":"#/definitions/5381621"}}},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453},"5381621":{"type":"object","properties":{"limit":{"type":"integer","x-apidog-mock":"10"},"next_cursor":{"type":"string","x-apidog-mock":"{{$string.alphanumeric(min=86,max=86)}}"}},"x-apidog-orders":["next_cursor","limit"],"required":["limit"],"title":"pagination.cursor","name":"pagination.cursor","moduleId":760453},"7325329":{"type":"object","properties":{"available":{"type":"string","x-apidog-mock":"100.00"},"onHold":{"type":"string","x-apidog-mock":"0"}},"x-apidog-orders":["available","onHold"],"required":["available","onHold"],"title":"balance.values.v3.x.x","name":"balance.values.v3.x.x","moduleId":760453},"8641347":{"type":"object","properties":{"id":{"type":"string","description":"The unique identifier of the Operation.","format":"uuid"},"description":{"type":"string","description":"Description of the operation."},"transactionId":{"type":"string","format":"uuid","description":"The unique identifier of the Transaction."},"type":{"type":"string","enum":["CREDIT","DEBIT","ON_HOLD","RELEASE"],"x-apidog-enum":[{"value":"CREDIT","name":"Credit Operation","description":""},{"value":"DEBIT","name":"Debit Operation","description":""},{"value":"ON_HOLD","name":"On Hold Operation","description":"Balance reservation operation, moving the amount to the on_hold balance."},{"value":"RELEASE","name":"Release Operation","description":"Release operation of the reserved balance, returning it to the available balance"}],"description":"The type of the operation.\n`CREDIT` `DEBIT` `ON_HOLD` `RELEASE`"},"assetCode":{"type":"string","description":"The code of the asset used in the operation."},"chartOfAccounts":{"type":"string","description":"The name of the Chart-of-Accounts that the operation belongs to."},"amount":{"type":"object","properties":{"value":{"type":"string","x-apidog-mock":"100.00"}},"x-apidog-orders":["value"],"x-apidog-refs":{},"required":["value"],"description":"An object containing information about the amount used in the operation."},"balance":{"type":"object","properties":{},"x-apidog-orders":["01JXFMCY8985B99D24K818AW5N"],"x-apidog-refs":{"01JXFMCY8985B99D24K818AW5N":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance before the operation."},"balanceAfter":{"type":"object","properties":{},"x-apidog-orders":["01JXFMDFCFGMBQMPBXMDDXN41A"],"x-apidog-refs":{"01JXFMDFCFGMBQMPBXMDDXN41A":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance after the operation."},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":["string","null"]}},"x-apidog-orders":["code","description"],"required":["code","description"],"description":"The transaction status."},"accountId":{"type":"string","format":"uuid","description":"The unique identifier of the Account."},"accountAlias":{"type":"string","description":"The alias for the account used in the operation."},"balanceId":{"type":"string","description":"The unique identifier of the Balance."},"route":{"type":"string","description":"Unique identifier of the operation route assigned to this specific leg of the transaction. This must match the corresponding source and destination configuration, determining how value is moved between accounts within the transaction route."},"balanceAffected":{"type":"boolean","description":"Indicates whether the operation had an impact on the account balance."},"balanceKey":{"type":"string","description":"The key identifier of the Balance"}},"x-apidog-orders":["id","transactionId","01JN71H2XZAMF6F0KY5QH2XTD6","accountId","accountAlias","balanceId","balanceKey","description","type","assetCode","chartOfAccounts","route","amount","balance","balanceAfter","status","balanceAffected","01JN718VEVJGSYKGXJ4PYFJ64Z","01JN718VKY0WWKT5F4317HNQF5"],"required":["id","description","transactionId","type","assetCode","chartOfAccounts","amount","balance","balanceAfter","status","accountId","accountAlias","balanceId","route","balanceAffected","balanceKey"],"x-apidog-refs":{"01JN718VEVJGSYKGXJ4PYFJ64Z":{"$ref":"#/definitions/5299902"},"01JN718VKY0WWKT5F4317HNQF5":{"$ref":"#/definitions/5295307"},"01JN71H2XZAMF6F0KY5QH2XTD6":{"$ref":"#/definitions/5365047"}},"title":"operation.response.v3.1.x","name":"operation.response.v3.1.x","moduleId":760453},"8641358":{"type":"object","properties":{"id":{"type":"string","description":"ID","format":"uuid"},"description":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"x-apidog-orders":["code","description"],"required":["code","description"]},"amount":{"type":"string"},"assetCode":{"type":"string"},"chartOfAccountsGroupName":{"type":"string"},"source":{"type":"array","items":{"type":"string"}},"destination":{"type":"array","items":{"type":"string"}},"operations":{"type":"array","items":{"$ref":"#/definitions/8641347"}},"route":{"type":"string"}},"x-apidog-orders":["id","01JN71ZQSPF1SPSM597SH2N81C","description","route","status","amount","assetCode","chartOfAccountsGroupName","source","destination","01JN72166CQABKZ83FTCMTEQ2S","operations","01JN7275ZNTQQN1PN8XN5ZHHQF"],"required":["id","description","status","amount","assetCode","chartOfAccountsGroupName","source","destination","operations"],"x-apidog-refs":{"01JN71ZQSPF1SPSM597SH2N81C":{"$ref":"#/definitions/5365047"},"01JN72166CQABKZ83FTCMTEQ2S":{"$ref":"#/definitions/5299902"},"01JN7275ZNTQQN1PN8XN5ZHHQF":{"$ref":"#/definitions/5295307"}},"title":"transaction.response.v3.1.x","name":"transaction.response.v3.1.x","moduleId":760453}}},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"fd0bf294-ac06-4747-9c1c-11591d65b127","id":"a82c79e4-0930-5c0b-823c-6347cbb63f01","type":"http","name":"List Transactions - Limit 5","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":52,"httpApiId":17810518,"httpApiCaseId":26070610,"httpApiName":"List Transactions","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions","httpApiMethod":"get","httpApiCaseName":"List Transactions","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"d4597fe0-72d8-52f9-bd3c-1587611e73fc","name":"List Transactions - Limit 10","request":{"url":{"protocol":"http","port":"3001","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","transactions"],"host":["127","0","0","1"],"query":[{"disabled":false,"key":"limit","value":"10"},{"disabled":true,"key":"metadata.message","value":"pagamento"},{"disabled":true,"key":"start_date","value":"2021-01-01"},{"disabled":true,"key":"end_date","value":"2025-01-01"},{"disabled":true,"key":"sort_order","value":"asc"},{"disabled":true,"key":"cursor","value":"eyJpZCI6IjAxOTNiNTZmLWJhY2YtNzQ0MS05NDU4LTEyZTE5MjVlOGI4NCIsInBvaW50c19uZXh0Ijp0cnVlfQ=="}],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","baseUrl":"http://127.0.0.1:3001","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        var responseData = pm.response.json();","var requestQueryParam = pm.request.url.query.toObject();","","pm.test(\"Validate Response Data Length \", function () {","  pm.expect(responseData.items.length).to.be.within(1, parseInt(requestQueryParam.limit));","});","      "]}}],"responseDefinition":{"id":24932085,"name":"Success","code":200,"contentType":"json","jsonSchema":{"type":"object","properties":{"items":{"type":"array","items":{"$ref":"#/definitions/8641358"}}},"x-apidog-orders":["items","01JN72JHDNNFPGRT0YE7N4FHCF"],"required":["items"],"x-apidog-refs":{"01JN72JHDNNFPGRT0YE7N4FHCF":{"$ref":"#/definitions/5381621"}}},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453},"5381621":{"type":"object","properties":{"limit":{"type":"integer","x-apidog-mock":"10"},"next_cursor":{"type":"string","x-apidog-mock":"{{$string.alphanumeric(min=86,max=86)}}"}},"x-apidog-orders":["next_cursor","limit"],"required":["limit"],"title":"pagination.cursor","name":"pagination.cursor","moduleId":760453},"7325329":{"type":"object","properties":{"available":{"type":"string","x-apidog-mock":"100.00"},"onHold":{"type":"string","x-apidog-mock":"0"}},"x-apidog-orders":["available","onHold"],"required":["available","onHold"],"title":"balance.values.v3.x.x","name":"balance.values.v3.x.x","moduleId":760453},"8641347":{"type":"object","properties":{"id":{"type":"string","description":"The unique identifier of the Operation.","format":"uuid"},"description":{"type":"string","description":"Description of the operation."},"transactionId":{"type":"string","format":"uuid","description":"The unique identifier of the Transaction."},"type":{"type":"string","enum":["CREDIT","DEBIT","ON_HOLD","RELEASE"],"x-apidog-enum":[{"value":"CREDIT","name":"Credit Operation","description":""},{"value":"DEBIT","name":"Debit Operation","description":""},{"value":"ON_HOLD","name":"On Hold Operation","description":"Balance reservation operation, moving the amount to the on_hold balance."},{"value":"RELEASE","name":"Release Operation","description":"Release operation of the reserved balance, returning it to the available balance"}],"description":"The type of the operation.\n`CREDIT` `DEBIT` `ON_HOLD` `RELEASE`"},"assetCode":{"type":"string","description":"The code of the asset used in the operation."},"chartOfAccounts":{"type":"string","description":"The name of the Chart-of-Accounts that the operation belongs to."},"amount":{"type":"object","properties":{"value":{"type":"string","x-apidog-mock":"100.00"}},"x-apidog-orders":["value"],"x-apidog-refs":{},"required":["value"],"description":"An object containing information about the amount used in the operation."},"balance":{"type":"object","properties":{},"x-apidog-orders":["01JXFMCY8985B99D24K818AW5N"],"x-apidog-refs":{"01JXFMCY8985B99D24K818AW5N":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance before the operation."},"balanceAfter":{"type":"object","properties":{},"x-apidog-orders":["01JXFMDFCFGMBQMPBXMDDXN41A"],"x-apidog-refs":{"01JXFMDFCFGMBQMPBXMDDXN41A":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance after the operation."},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":["string","null"]}},"x-apidog-orders":["code","description"],"required":["code","description"],"description":"The transaction status."},"accountId":{"type":"string","format":"uuid","description":"The unique identifier of the Account."},"accountAlias":{"type":"string","description":"The alias for the account used in the operation."},"balanceId":{"type":"string","description":"The unique identifier of the Balance."},"route":{"type":"string","description":"Unique identifier of the operation route assigned to this specific leg of the transaction. This must match the corresponding source and destination configuration, determining how value is moved between accounts within the transaction route."},"balanceAffected":{"type":"boolean","description":"Indicates whether the operation had an impact on the account balance."},"balanceKey":{"type":"string","description":"The key identifier of the Balance"}},"x-apidog-orders":["id","transactionId","01JN71H2XZAMF6F0KY5QH2XTD6","accountId","accountAlias","balanceId","balanceKey","description","type","assetCode","chartOfAccounts","route","amount","balance","balanceAfter","status","balanceAffected","01JN718VEVJGSYKGXJ4PYFJ64Z","01JN718VKY0WWKT5F4317HNQF5"],"required":["id","description","transactionId","type","assetCode","chartOfAccounts","amount","balance","balanceAfter","status","accountId","accountAlias","balanceId","route","balanceAffected","balanceKey"],"x-apidog-refs":{"01JN718VEVJGSYKGXJ4PYFJ64Z":{"$ref":"#/definitions/5299902"},"01JN718VKY0WWKT5F4317HNQF5":{"$ref":"#/definitions/5295307"},"01JN71H2XZAMF6F0KY5QH2XTD6":{"$ref":"#/definitions/5365047"}},"title":"operation.response.v3.1.x","name":"operation.response.v3.1.x","moduleId":760453},"8641358":{"type":"object","properties":{"id":{"type":"string","description":"ID","format":"uuid"},"description":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"x-apidog-orders":["code","description"],"required":["code","description"]},"amount":{"type":"string"},"assetCode":{"type":"string"},"chartOfAccountsGroupName":{"type":"string"},"source":{"type":"array","items":{"type":"string"}},"destination":{"type":"array","items":{"type":"string"}},"operations":{"type":"array","items":{"$ref":"#/definitions/8641347"}},"route":{"type":"string"}},"x-apidog-orders":["id","01JN71ZQSPF1SPSM597SH2N81C","description","route","status","amount","assetCode","chartOfAccountsGroupName","source","destination","01JN72166CQABKZ83FTCMTEQ2S","operations","01JN7275ZNTQQN1PN8XN5ZHHQF"],"required":["id","description","status","amount","assetCode","chartOfAccountsGroupName","source","destination","operations"],"x-apidog-refs":{"01JN71ZQSPF1SPSM597SH2N81C":{"$ref":"#/definitions/5365047"},"01JN72166CQABKZ83FTCMTEQ2S":{"$ref":"#/definitions/5299902"},"01JN7275ZNTQQN1PN8XN5ZHHQF":{"$ref":"#/definitions/5295307"}},"title":"transaction.response.v3.1.x","name":"transaction.response.v3.1.x","moduleId":760453}}},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"fd008bd7-11d6-4b63-8c66-07a8cd28f305","id":"d4597fe0-72d8-52f9-bd3c-1587611e73fc","type":"http","name":"List Transactions - Limit 10","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":67,"httpApiId":17810518,"httpApiCaseId":26178207,"httpApiName":"List Transactions","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions","httpApiMethod":"get","httpApiCaseName":"List Transactions","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"fa68c346-a78a-511b-a539-9e5166502922","name":"List Transactions - Limit 15","request":{"url":{"protocol":"http","port":"3001","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","transactions"],"host":["127","0","0","1"],"query":[{"disabled":false,"key":"limit","value":"15"},{"disabled":true,"key":"metadata.message","value":"pagamento"},{"disabled":true,"key":"start_date","value":"2021-01-01"},{"disabled":true,"key":"end_date","value":"2025-01-01"},{"disabled":true,"key":"sort_order","value":"asc"},{"disabled":true,"key":"cursor","value":"eyJpZCI6IjAxOTNiNTZmLWJhY2YtNzQ0MS05NDU4LTEyZTE5MjVlOGI4NCIsInBvaW50c19uZXh0Ijp0cnVlfQ=="}],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","baseUrl":"http://127.0.0.1:3001","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        var responseData = pm.response.json();","var requestQueryParam = pm.request.url.query.toObject();","","pm.test(\"Validate Response Data Length \", function () {","  pm.expect(responseData.items.length).to.be.within(1, parseInt(requestQueryParam.limit));","});","      "]}}],"responseDefinition":{"id":24932085,"name":"Success","code":200,"contentType":"json","jsonSchema":{"type":"object","properties":{"items":{"type":"array","items":{"$ref":"#/definitions/8641358"}}},"x-apidog-orders":["items","01JN72JHDNNFPGRT0YE7N4FHCF"],"required":["items"],"x-apidog-refs":{"01JN72JHDNNFPGRT0YE7N4FHCF":{"$ref":"#/definitions/5381621"}}},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453},"5381621":{"type":"object","properties":{"limit":{"type":"integer","x-apidog-mock":"10"},"next_cursor":{"type":"string","x-apidog-mock":"{{$string.alphanumeric(min=86,max=86)}}"}},"x-apidog-orders":["next_cursor","limit"],"required":["limit"],"title":"pagination.cursor","name":"pagination.cursor","moduleId":760453},"7325329":{"type":"object","properties":{"available":{"type":"string","x-apidog-mock":"100.00"},"onHold":{"type":"string","x-apidog-mock":"0"}},"x-apidog-orders":["available","onHold"],"required":["available","onHold"],"title":"balance.values.v3.x.x","name":"balance.values.v3.x.x","moduleId":760453},"8641347":{"type":"object","properties":{"id":{"type":"string","description":"The unique identifier of the Operation.","format":"uuid"},"description":{"type":"string","description":"Description of the operation."},"transactionId":{"type":"string","format":"uuid","description":"The unique identifier of the Transaction."},"type":{"type":"string","enum":["CREDIT","DEBIT","ON_HOLD","RELEASE"],"x-apidog-enum":[{"value":"CREDIT","name":"Credit Operation","description":""},{"value":"DEBIT","name":"Debit Operation","description":""},{"value":"ON_HOLD","name":"On Hold Operation","description":"Balance reservation operation, moving the amount to the on_hold balance."},{"value":"RELEASE","name":"Release Operation","description":"Release operation of the reserved balance, returning it to the available balance"}],"description":"The type of the operation.\n`CREDIT` `DEBIT` `ON_HOLD` `RELEASE`"},"assetCode":{"type":"string","description":"The code of the asset used in the operation."},"chartOfAccounts":{"type":"string","description":"The name of the Chart-of-Accounts that the operation belongs to."},"amount":{"type":"object","properties":{"value":{"type":"string","x-apidog-mock":"100.00"}},"x-apidog-orders":["value"],"x-apidog-refs":{},"required":["value"],"description":"An object containing information about the amount used in the operation."},"balance":{"type":"object","properties":{},"x-apidog-orders":["01JXFMCY8985B99D24K818AW5N"],"x-apidog-refs":{"01JXFMCY8985B99D24K818AW5N":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance before the operation."},"balanceAfter":{"type":"object","properties":{},"x-apidog-orders":["01JXFMDFCFGMBQMPBXMDDXN41A"],"x-apidog-refs":{"01JXFMDFCFGMBQMPBXMDDXN41A":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance after the operation."},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":["string","null"]}},"x-apidog-orders":["code","description"],"required":["code","description"],"description":"The transaction status."},"accountId":{"type":"string","format":"uuid","description":"The unique identifier of the Account."},"accountAlias":{"type":"string","description":"The alias for the account used in the operation."},"balanceId":{"type":"string","description":"The unique identifier of the Balance."},"route":{"type":"string","description":"Unique identifier of the operation route assigned to this specific leg of the transaction. This must match the corresponding source and destination configuration, determining how value is moved between accounts within the transaction route."},"balanceAffected":{"type":"boolean","description":"Indicates whether the operation had an impact on the account balance."},"balanceKey":{"type":"string","description":"The key identifier of the Balance"}},"x-apidog-orders":["id","transactionId","01JN71H2XZAMF6F0KY5QH2XTD6","accountId","accountAlias","balanceId","balanceKey","description","type","assetCode","chartOfAccounts","route","amount","balance","balanceAfter","status","balanceAffected","01JN718VEVJGSYKGXJ4PYFJ64Z","01JN718VKY0WWKT5F4317HNQF5"],"required":["id","description","transactionId","type","assetCode","chartOfAccounts","amount","balance","balanceAfter","status","accountId","accountAlias","balanceId","route","balanceAffected","balanceKey"],"x-apidog-refs":{"01JN718VEVJGSYKGXJ4PYFJ64Z":{"$ref":"#/definitions/5299902"},"01JN718VKY0WWKT5F4317HNQF5":{"$ref":"#/definitions/5295307"},"01JN71H2XZAMF6F0KY5QH2XTD6":{"$ref":"#/definitions/5365047"}},"title":"operation.response.v3.1.x","name":"operation.response.v3.1.x","moduleId":760453},"8641358":{"type":"object","properties":{"id":{"type":"string","description":"ID","format":"uuid"},"description":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"x-apidog-orders":["code","description"],"required":["code","description"]},"amount":{"type":"string"},"assetCode":{"type":"string"},"chartOfAccountsGroupName":{"type":"string"},"source":{"type":"array","items":{"type":"string"}},"destination":{"type":"array","items":{"type":"string"}},"operations":{"type":"array","items":{"$ref":"#/definitions/8641347"}},"route":{"type":"string"}},"x-apidog-orders":["id","01JN71ZQSPF1SPSM597SH2N81C","description","route","status","amount","assetCode","chartOfAccountsGroupName","source","destination","01JN72166CQABKZ83FTCMTEQ2S","operations","01JN7275ZNTQQN1PN8XN5ZHHQF"],"required":["id","description","status","amount","assetCode","chartOfAccountsGroupName","source","destination","operations"],"x-apidog-refs":{"01JN71ZQSPF1SPSM597SH2N81C":{"$ref":"#/definitions/5365047"},"01JN72166CQABKZ83FTCMTEQ2S":{"$ref":"#/definitions/5299902"},"01JN7275ZNTQQN1PN8XN5ZHHQF":{"$ref":"#/definitions/5295307"}},"title":"transaction.response.v3.1.x","name":"transaction.response.v3.1.x","moduleId":760453}}},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"edf59753-d157-43b1-87f8-0ed32b2870bc","id":"fa68c346-a78a-511b-a539-9e5166502922","type":"http","name":"List Transactions - Limit 15","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":68,"httpApiId":17810518,"httpApiCaseId":26178208,"httpApiName":"List Transactions","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions","httpApiMethod":"get","httpApiCaseName":"List Transactions","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"1db2b286-d39f-5f2a-8d6b-23425b55438a","name":"List Transactions - Validations Limit 100","request":{"url":{"protocol":"http","port":"3001","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","transactions"],"host":["127","0","0","1"],"query":[{"disabled":false,"key":"limit","value":"100"},{"disabled":true,"key":"metadata.message","value":"pagamento"},{"disabled":true,"key":"start_date","value":"2021-01-01"},{"disabled":true,"key":"end_date","value":"2025-01-01"},{"disabled":true,"key":"sort_order","value":"asc"},{"disabled":true,"key":"cursor","value":"eyJpZCI6IjAxOTNiNTZmLWJhY2YtNzQ0MS05NDU4LTEyZTE5MjVlOGI4NCIsInBvaW50c19uZXh0Ijp0cnVlfQ=="}],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","baseUrl":"http://127.0.0.1:3001","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        var responseData = pm.response.json();","var requestQueryParam = pm.request.url.query.toObject();","","pm.test(\"Validate Response Data Length \", function () {","  pm.expect(responseData.items.length).to.be.within(1, parseInt(requestQueryParam.limit));","});","      "]}},{"listen":"test","script":{"id":"postProcessors.1.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        const responseData = pm.response.json().items;","","for (transaction in responseData) {","    pm.test(`Validate Transaction ${responseData[transaction].id} Status`, function () {","        pm.expect([\"APPROVED\", \"CANCELED\", \"PENDING\"]).to.include(responseData[transaction].status.code);","    });","","    if (responseData[transaction].status.code === \"APPROVED\") {","        pm.test(`Validate Transaction ${responseData[transaction].id} Data`, function () {","            const creditOp = responseData[transaction].operations.filter(op => op.type === 'CREDIT');","            pm.expect(creditOp.length).to.be.above(0);","","            const debitOp = responseData[transaction].operations.filter(op => op.type === 'DEBIT');","            pm.expect(debitOp.length).to.be.above(0);","","            pm.expect(responseData[transaction].source.length).to.be.above(0);","            pm.expect(responseData[transaction].destination.length).to.be.above(0);","        });","    }","    else if (responseData[transaction].status.code === \"PENDING\") {","        const heldOp = responseData[transaction].operations.filter(op => op.type === 'ON_HOLD');","        pm.expect(heldOp.length).to.be.above(0);","        ","        pm.expect(responseData[transaction].source.length).to.be.above(0);","        pm.expect(responseData[transaction].destination.length).to.be.above(0);","    }","    else if (responseData[transaction].status.code === \"CANCELED\") {","        const heldOp = responseData[transaction].operations.filter(op => op.type === 'ON_HOLD');","        pm.expect(heldOp.length).to.be.above(0);","","        const releaseOp = responseData[transaction].operations.filter(op => op.type === 'RELEASE');","        pm.expect(releaseOp.length).to.be.above(0);","","        pm.expect(responseData[transaction].source.length).to.be.equal(0);","        pm.expect(responseData[transaction].destination.length).to.be.equal(0);","    }","}","      "]}}],"responseDefinition":{"id":24932085,"name":"Success","code":200,"contentType":"json","jsonSchema":{"type":"object","properties":{"items":{"type":"array","items":{"$ref":"#/definitions/8641358"}}},"x-apidog-orders":["items","01JN72JHDNNFPGRT0YE7N4FHCF"],"required":["items"],"x-apidog-refs":{"01JN72JHDNNFPGRT0YE7N4FHCF":{"$ref":"#/definitions/5381621"}}},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453},"5381621":{"type":"object","properties":{"limit":{"type":"integer","x-apidog-mock":"10"},"next_cursor":{"type":"string","x-apidog-mock":"{{$string.alphanumeric(min=86,max=86)}}"}},"x-apidog-orders":["next_cursor","limit"],"required":["limit"],"title":"pagination.cursor","name":"pagination.cursor","moduleId":760453},"7325329":{"type":"object","properties":{"available":{"type":"string","x-apidog-mock":"100.00"},"onHold":{"type":"string","x-apidog-mock":"0"}},"x-apidog-orders":["available","onHold"],"required":["available","onHold"],"title":"balance.values.v3.x.x","name":"balance.values.v3.x.x","moduleId":760453},"8641347":{"type":"object","properties":{"id":{"type":"string","description":"The unique identifier of the Operation.","format":"uuid"},"description":{"type":"string","description":"Description of the operation."},"transactionId":{"type":"string","format":"uuid","description":"The unique identifier of the Transaction."},"type":{"type":"string","enum":["CREDIT","DEBIT","ON_HOLD","RELEASE"],"x-apidog-enum":[{"value":"CREDIT","name":"Credit Operation","description":""},{"value":"DEBIT","name":"Debit Operation","description":""},{"value":"ON_HOLD","name":"On Hold Operation","description":"Balance reservation operation, moving the amount to the on_hold balance."},{"value":"RELEASE","name":"Release Operation","description":"Release operation of the reserved balance, returning it to the available balance"}],"description":"The type of the operation.\n`CREDIT` `DEBIT` `ON_HOLD` `RELEASE`"},"assetCode":{"type":"string","description":"The code of the asset used in the operation."},"chartOfAccounts":{"type":"string","description":"The name of the Chart-of-Accounts that the operation belongs to."},"amount":{"type":"object","properties":{"value":{"type":"string","x-apidog-mock":"100.00"}},"x-apidog-orders":["value"],"x-apidog-refs":{},"required":["value"],"description":"An object containing information about the amount used in the operation."},"balance":{"type":"object","properties":{},"x-apidog-orders":["01JXFMCY8985B99D24K818AW5N"],"x-apidog-refs":{"01JXFMCY8985B99D24K818AW5N":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance before the operation."},"balanceAfter":{"type":"object","properties":{},"x-apidog-orders":["01JXFMDFCFGMBQMPBXMDDXN41A"],"x-apidog-refs":{"01JXFMDFCFGMBQMPBXMDDXN41A":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance after the operation."},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":["string","null"]}},"x-apidog-orders":["code","description"],"required":["code","description"],"description":"The transaction status."},"accountId":{"type":"string","format":"uuid","description":"The unique identifier of the Account."},"accountAlias":{"type":"string","description":"The alias for the account used in the operation."},"balanceId":{"type":"string","description":"The unique identifier of the Balance."},"route":{"type":"string","description":"Unique identifier of the operation route assigned to this specific leg of the transaction. This must match the corresponding source and destination configuration, determining how value is moved between accounts within the transaction route."},"balanceAffected":{"type":"boolean","description":"Indicates whether the operation had an impact on the account balance."},"balanceKey":{"type":"string","description":"The key identifier of the Balance"}},"x-apidog-orders":["id","transactionId","01JN71H2XZAMF6F0KY5QH2XTD6","accountId","accountAlias","balanceId","balanceKey","description","type","assetCode","chartOfAccounts","route","amount","balance","balanceAfter","status","balanceAffected","01JN718VEVJGSYKGXJ4PYFJ64Z","01JN718VKY0WWKT5F4317HNQF5"],"required":["id","description","transactionId","type","assetCode","chartOfAccounts","amount","balance","balanceAfter","status","accountId","accountAlias","balanceId","route","balanceAffected","balanceKey"],"x-apidog-refs":{"01JN718VEVJGSYKGXJ4PYFJ64Z":{"$ref":"#/definitions/5299902"},"01JN718VKY0WWKT5F4317HNQF5":{"$ref":"#/definitions/5295307"},"01JN71H2XZAMF6F0KY5QH2XTD6":{"$ref":"#/definitions/5365047"}},"title":"operation.response.v3.1.x","name":"operation.response.v3.1.x","moduleId":760453},"8641358":{"type":"object","properties":{"id":{"type":"string","description":"ID","format":"uuid"},"description":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"x-apidog-orders":["code","description"],"required":["code","description"]},"amount":{"type":"string"},"assetCode":{"type":"string"},"chartOfAccountsGroupName":{"type":"string"},"source":{"type":"array","items":{"type":"string"}},"destination":{"type":"array","items":{"type":"string"}},"operations":{"type":"array","items":{"$ref":"#/definitions/8641347"}},"route":{"type":"string"}},"x-apidog-orders":["id","01JN71ZQSPF1SPSM597SH2N81C","description","route","status","amount","assetCode","chartOfAccountsGroupName","source","destination","01JN72166CQABKZ83FTCMTEQ2S","operations","01JN7275ZNTQQN1PN8XN5ZHHQF"],"required":["id","description","status","amount","assetCode","chartOfAccountsGroupName","source","destination","operations"],"x-apidog-refs":{"01JN71ZQSPF1SPSM597SH2N81C":{"$ref":"#/definitions/5365047"},"01JN72166CQABKZ83FTCMTEQ2S":{"$ref":"#/definitions/5299902"},"01JN7275ZNTQQN1PN8XN5ZHHQF":{"$ref":"#/definitions/5295307"}},"title":"transaction.response.v3.1.x","name":"transaction.response.v3.1.x","moduleId":760453}}},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"61efd544-b83f-4012-9d6a-b52f56f82d5c","id":"1db2b286-d39f-5f2a-8d6b-23425b55438a","type":"http","name":"List Transactions - Validations Limit 100","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":69,"httpApiId":17810518,"httpApiCaseId":26178360,"httpApiName":"List Transactions","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions","httpApiMethod":"get","httpApiCaseName":"List Transactions","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"b6231060-b0c7-5b51-979b-941a69121c8f","type":"group","metaInfo":{"id":"b6231060-b0c7-5b51-979b-941a69121c8f","type":"group","scopeType":"end","scopeStartId":"1ca8cccd-4bcd-5eea-85c5-d545b398a8f0"}},{"id":"12086737-0e52-5e7a-b43c-b441e25120a0","type":"group","metaInfo":{"id":"12086737-0e52-5e7a-b43c-b441e25120a0","type":"group","scopeType":"start","scopeEndId":"5fe825ee-a2f0-528d-9b4c-43dae418a768","name":"Errors"}},{"id":"d2f0d5b9-7a47-5c6a-8027-a10ded8cd1ec","name":"[0019] Account Ineligibility","request":{"url":{"protocol":"http","port":"3001","path":["v1","organizations","01946120-0f45-7c5f-86a0-0ea7c59fdbd4","ledgers","01946123-14ea-7575-aa2a-addbd8457348","transactions","json"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"01946120-0f45-7c5f-86a0-0ea7c59fdbd4","key":"organization_id"},{"disabled":false,"type":"string","value":"01946123-14ea-7575-aa2a-addbd8457348","key":"ledger_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-Idempotency","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-TTL","value":"{{$number.int(min=0,max=3600)}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","baseUrl":"http://127.0.0.1:3001","body":{"mode":"raw","raw":"{\n    \"chartOfAccountsGroupName\": \"chart_of_accounts_group\",\n    \"pending\": false,\n    \"route\": \"5656daa5-5b2a-4637-955f-e43bafceaf5d\",\n    \"description\": \"transaction example using amount values\",\n    \"metadata\": {\n        \"key\": \"value\"\n    },\n    \"send\": {\n        \"asset\": \"BRL\",\n        \"value\": \"100.50\",\n        \"source\": {\n            \"from\": [\n                {\n                    \"accountAlias\": \"@external/BRL\",\n                    \"amount\": {\n                        \"asset\": \"BRL\",\n                        \"value\": \"100.50\"\n                    },\n                    \"description\": \"source operation example\",\n                    \"route\": \"5656daa5-5b2a-4637-955f-e43bafceaf5e\",\n                    \"chartOfAccounts\": \"chart_of_accounts\",\n                    \"metadata\": {\n                        \"key\": \"value\"\n                    }\n                }\n            ]\n        },\n        \"distribute\": {\n            \"to\": [\n                {\n                    \"accountAlias\": \"@error_account\",\n                    \"amount\": {\n                        \"asset\": \"BRL\",\n                        \"value\": \"100.50\"\n                    },\n                    \"chartOfAccounts\": \"chart_of_accounts\",\n                    \"description\": \"destination operation example\",\n                    \"route\": \"5656daa5-5b2a-4637-955f-e43bafceaf5f\",\n                    \"metadata\": {\n                        \"key\": \"value\"\n                    }\n                }\n            ]\n        }\n    }\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Response Code is 0019`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0019`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"id":2739852,"createdAt":"2024-10-21T13:33:15.000Z","updatedAt":"2025-09-18T19:31:13.000Z","name":"[0019] Account Ineligibility Error","apiDetailId":0,"projectId":699928,"moduleId":760453,"code":422,"contentType":"json","ordering":250,"jsonSchema":{"type":"object","properties":{"code":{"type":"string"},"title":{"type":"string"},"message":{"type":"string"}},"required":["code","title","message"],"x-apidog-orders":["code","title","message"]},"defaultEnable":false,"folderId":743415,"responseExamples":[{"id":3970653,"name":"Account Ineligibility Error","data":"{\n    \"code\": \"0019\",\n    \"title\": \"Account Ineligibility Error\",\n    \"message\": \"One or more accounts listed in the transaction are not eligible to participate. Please review the account statuses and try again.\"\n}","apiDetailId":0,"responseId":2739852,"ordering":1,"description":null,"oasKey":"","oasExtensions":null}],"mediaType":"","headers":[],"description":"","oasExtensions":null,"schemaDefinitions":{}},"requestDefinition":{"jsonSchema":{"$ref":"#/definitions/8643885"}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"5a9c8010-f459-442f-b479-6ef1ab264416","id":"d2f0d5b9-7a47-5c6a-8027-a10ded8cd1ec","type":"http","name":"[0019] Account Ineligibility","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":71,"httpApiId":17810516,"httpApiCaseId":26237543,"httpApiName":"Create a JSON Transaction ","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/json","httpApiMethod":"post","httpApiCaseName":"Create a JSON Transaction ","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"857c8540-6470-5e48-85df-0f40ba2f104a","name":"[0073] Values Mismatch","request":{"url":{"protocol":"http","port":"3001","path":["v1","organizations","01946120-0f45-7c5f-86a0-0ea7c59fdbd4","ledgers","01946123-14ea-7575-aa2a-addbd8457348","transactions","json"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"01946120-0f45-7c5f-86a0-0ea7c59fdbd4","key":"organization_id"},{"disabled":false,"type":"string","value":"01946123-14ea-7575-aa2a-addbd8457348","key":"ledger_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-Idempotency","value":"{{$string.uuid}}"},{"disabled":false,"key":"X-TTL","value":"{{$number.int(min=0,max=3600)}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"POST","baseUrl":"http://127.0.0.1:3001","body":{"mode":"raw","raw":"{\n    \"chartOfAccountsGroupName\": \"chart_of_accounts_group\",\n    \"pending\": false,\n    \"route\": \"5656daa5-5b2a-4637-955f-e43bafceaf5d\",\n    \"description\": \"transaction example using amount values\",\n    \"metadata\": {\n        \"key\": \"value\"\n    },\n    \"send\": {\n        \"asset\": \"BRL\",\n        \"value\": \"100\",\n        \"source\": {\n            \"from\": [\n                {\n                    \"accountAlias\": \"@external/BRL\",\n                    \"amount\": {\n                        \"asset\": \"BRL\",\n                        \"value\": \"100\"\n                    },\n                    \"description\": \"source operation example\",\n                    \"route\": \"5656daa5-5b2a-4637-955f-e43bafceaf5e\",\n                    \"chartOfAccounts\": \"chart_of_accounts\",\n                    \"metadata\": {\n                        \"key\": \"value\"\n                    }\n                }\n            ]\n        },\n        \"distribute\": {\n            \"to\": [\n                {\n                    \"accountAlias\": \"@account1_rt_BRL\",\n                    \"amount\": {\n                        \"asset\": \"BRL\",\n                        \"value\": \"100.50\"\n                    },\n                    \"chartOfAccounts\": \"chart_of_accounts\",\n                    \"description\": \"destination operation example\",\n                    \"route\": \"5656daa5-5b2a-4637-955f-e43bafceaf5f\",\n                    \"metadata\": {\n                        \"key\": \"value\"\n                    }\n                }\n            ]\n        }\n    }\n}","generateMode":"normal","type":"application/json"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"prerequest","script":{"id":"commonScript.assertion","type":"text/javascript","exec":["","  ____string2Array = function(value) {","    if(typeof value === 'object'){","      return value;","    }","    try {","      return JSON.parse(value);","    } catch (e) {","      return value;","    }","  }","  ____string2Number = function(value, errorMsg) {","   if(typeof value !== 'string'){","     return value;","   }","   if (/^\\-?\\d+$/.test(value)) {","       return parseInt(value);","   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {","       return parseFloat(value);","   } else {","       throw new Error(errorMsg || 'Data type mismatch')","   }"," }","","  ____formatValues = function(value, stringCompareValue, comparison) {","   try{","     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);","     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);","     let compareValue;","     switch (typeof value) {","         case 'string':","             if (isNumberComparisons) {","                value = ____string2Number(value);","                compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","                compareValue = ____string2Array(stringCompareValue);","             } else if (comparison === 'exists' || comparison === 'notExist') {","                value = /^({%.*%})|({{.*}})$/.test(value) ? undefined : value;","             } else {","                compareValue = stringCompareValue;","             }","             break;","         case 'object':","             const isArray = value instanceof Array;","             if (isNumberComparisons) {","                 throw new Error('Values of type object cannot be compared using the ' + comparison + ' method')","             } else if (isCollectionComparisons && isArray) {","              throw new Error('Values of type array cannot be compared using the ' + comparison + ' method')","            } else if (","              isArray &&","              comparison === 'include' &&","              value.includes(stringCompareValue)","            ) {","              compareValue = stringCompareValue;","            } else {","              try {","                  compareValue = JSON.parse(stringCompareValue);","              } catch (e) {","                  compareValue = stringCompareValue;","              }","            }","             break;","         case 'boolean':","             if (isNumberComparisons || isCollectionComparisons) {","                 throw new Error('Values of type boolean cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);","             break;","           case 'bigint':","           case 'number':","             if (isNumberComparisons) {","               compareValue = ____string2Number(stringCompareValue);","             } else if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","              value = '' + value;","            } else {","               compareValue = stringCompareValue;","               value = '' + value;","             }","             break;","         case 'null':","             if (isNumberComparisons) {","                 throw new Error('Values of type null cannot be compared using the ' + comparison + ' method')","             }","             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;","             break;","         default:","            if (isCollectionComparisons) {","              compareValue = ____string2Array(stringCompareValue);","            } else {","              compareValue = stringCompareValue;","            }","            break;","     }","     return { compareValue, value };","   } catch(e) {","     console.log(e);","     throw e;","   }"," }"," "]}},{"listen":"test","script":{"id":"postProcessors.0.assertion","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","  async function ____replaceIn(value) {","    if (typeof pm.variables.replaceInAsync === 'function') {","      return await pm.variables.replaceInAsync(value);","    }","    return pm.variables.replaceIn(value);","  };","","  ;(async () => {","    try {","      const formattedName = await ____replaceIn(`Response Code is 0073`);","      pm.test(formattedName, async function(done) {","        try {","          ","          const expression = await ____replaceIn(`$.code`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          let jsonData;","          try {","            jsonData = pm.response.json();","          } catch(e) {","            let text = pm.response.text();","            const xml2js = require('xml2js');","            function removeXmlUselessPrefixAndSuffix(text) {","              const start = text.indexOf('<');","              const end = text.lastIndexOf('>');","              if (start === -1 || end === -1) {","                return text;","              }","              return text.substring(start, end + 1);","            }","            text = removeXmlUselessPrefixAndSuffix(text);","            let json;","            let xmlParseOptions = {","                explicitArray: false,","                trim: true,","                ignoreAttrs: true,","            };","            xml2js.parseString(text, xmlParseOptions, function (_, result) {","                jsonData = result;","            });","          }","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","","          ","          ","    const compareValue = await ____replaceIn(`0073`);","    const formattedValues = ____formatValues(value, compareValue, 'equal');","  ","          pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);","          done();","        } catch (err) {","          done(err);","        }","      });","    } catch(e) {","      setImmediate(() => { throw e });","    }","  })();","      "]}}],"responseDefinition":{"id":2839090,"createdAt":"2024-12-26T17:47:39.000Z","updatedAt":"2024-12-26T17:48:21.000Z","name":"[0073] Transaction Value Mismatch","apiDetailId":0,"projectId":699928,"moduleId":760453,"code":400,"contentType":"json","ordering":720,"jsonSchema":{"type":"object","properties":{"code":{"type":"string"},"title":{"type":"string"},"message":{"type":"string"}},"required":["code","title","message"],"x-apidog-orders":["code","title","message"]},"defaultEnable":false,"folderId":743415,"responseExamples":[{"id":3974045,"name":"Transaction Value Mismatch","data":"{\n    \"code\": \"0073\",\n    \"title\": \"Transaction Value Mismatch\",\n    \"message\": \"The values for the source, the destination, or both do not match the specified transaction amount. Please verify the values and try again.\"\n}","apiDetailId":0,"responseId":2839090,"ordering":1,"description":null,"oasKey":"","oasExtensions":null}],"mediaType":"","headers":[],"description":"","oasExtensions":null,"schemaDefinitions":{}},"requestDefinition":{"jsonSchema":{"$ref":"#/definitions/8643885"}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"c573655f-1cd8-4777-90a2-cab59143986e","id":"857c8540-6470-5e48-85df-0f40ba2f104a","type":"http","name":"[0073] Values Mismatch","projectId":699928,"relatedId":1259300,"environmentId":2661460,"blockNumber":72,"httpApiId":17810516,"httpApiCaseId":26237564,"httpApiName":"Create a JSON Transaction ","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/json","httpApiMethod":"post","httpApiCaseName":"Create a JSON Transaction ","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"5fe825ee-a2f0-528d-9b4c-43dae418a768","type":"group","metaInfo":{"id":"5fe825ee-a2f0-528d-9b4c-43dae418a768","type":"group","scopeType":"end","scopeStartId":"12086737-0e52-5e7a-b43c-b441e25120a0"}},{"id":"5923ebac-c551-5ff0-879d-449ce2487df2","type":"group","metaInfo":{"id":"5923ebac-c551-5ff0-879d-449ce2487df2","type":"group","scopeType":"start","scopeEndId":"c1ff9bde-0255-5657-ae2d-c1dfd291741d","name":"Setup - Get Account"}},{"id":"a8c81e73-8e9d-5caa-aa48-7a46d85bfcf9","name":"Retrieve an Account by Alias","request":{"url":{"protocol":"http","port":"3000","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","accounts","alias","@account1_rt_BRL"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"},{"disabled":false,"type":"string","value":"@account1_rt_BRL","key":"alias"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","baseUrl":"http://127.0.0.1:3000","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`account_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable account_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}}],"responseDefinition":{"id":17249573,"name":"Success","code":200,"contentType":"json","jsonSchema":{"type":"object","properties":{},"x-apidog-orders":["01JMWNX2JCG7SCG48PJY6CH1MG"],"required":[],"x-apidog-refs":{"01JMWNX2JCG7SCG48PJY6CH1MG":{"$ref":"#/definitions/5299913"}}},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"3672507":{"type":"object","properties":{"assetCode":{"type":"string","description":"The code used to refer to the Asset. If the Asset is a currency (type = currency), the code must follow the ISO 4217 values.","x-apidog-mock":"{{$finance.currencyCode}}"},"name":{"type":"string","description":"The name of the Account.","maxLength":256},"alias":{"type":"string","description":"An alternative name or identifier associated with the Account.","x-apidog-mock":"@accountAlias"},"type":{"type":"string","description":"The type of account."},"parentAccountId":{"type":["string","null"],"x-apidog-mock":"{{$string.uuid}}","format":"uuid","description":"The unique identifier of the Parent Account. If the account does not have a parent account, this field will be null."},"entityId":{"type":["string","null"],"description":"The unique identifier of the Entity responsible for the Account.","x-apidog-mock":"{{$string.uuid}}"},"portfolioId":{"type":["string","null"],"description":"The unique identifier of the associated Portfolio.","x-apidog-mock":"{{$string.uuid}}","format":"uuid"},"segmentId":{"type":["string","null"],"description":"The unique identifier of the Segment which is used to cluster customer accounts.","x-apidog-mock":"{{$string.uuid}}","format":"uuid"}},"required":["assetCode","type","alias"],"x-apidog-orders":["assetCode","name","alias","type","parentAccountId","entityId","portfolioId","segmentId","01JMWR9599FT29ESEDJ701PJHA","01JMWR9ETVQ01BRRDFBY1ZS1V9"],"x-apidog-refs":{"01JMWR9599FT29ESEDJ701PJHA":{"$ref":"#/definitions/5295306"},"01JMWR9ETVQ01BRRDFBY1ZS1V9":{"$ref":"#/definitions/5295307"}},"title":"account.request.v3.x.x","name":"account.request.v3.x.x","moduleId":760453},"5295306":{"type":"object","properties":{"status":{"type":"object","properties":{"description":{"type":["string","null"],"description":"The description of the status. Max length: 256"},"code":{"type":"string","description":"The name of the status. Max length:100"}},"x-apidog-orders":["description","code"],"description":"An object containing information about the status."}},"x-apidog-orders":["status"],"title":"status","name":"status","moduleId":760453},"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5299913":{"type":"object","properties":{"id":{"type":"string","description":"The unique reference of the Account.","format":"uuid"}},"x-apidog-orders":["id","01JMJC8Z3Z9F3WMSYBQ2DXKQ7W","01JMCZTG16JSTRBDM44SXTM6E5","01JMCZV03J6A4BH9SMCY4PJ3VC"],"required":["id"],"x-apidog-refs":{"01JMCZTG16JSTRBDM44SXTM6E5":{"$ref":"#/definitions/3672507","x-apidog-overrides":{}},"01JMCZV03J6A4BH9SMCY4PJ3VC":{"$ref":"#/definitions/5299902"},"01JMJC8Z3Z9F3WMSYBQ2DXKQ7W":{"$ref":"#/definitions/5365047"}},"title":"account.response.v3.x.x","name":"account.response.v3.x.x","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453}}},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"bfcdf162-90e7-4290-9266-a5bb83f58b7f","id":"a8c81e73-8e9d-5caa-aa48-7a46d85bfcf9","type":"http","name":"Retrieve an Account by Alias","projectId":699928,"relatedId":1259301,"environmentId":2661460,"blockNumber":4,"httpApiId":13138016,"httpApiCaseId":26069860,"httpApiName":"Retrieve an Account by Alias","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/alias/{alias}","httpApiMethod":"get","httpApiCaseName":"Retrieve an Account by Alias","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"c1ff9bde-0255-5657-ae2d-c1dfd291741d","type":"group","metaInfo":{"id":"c1ff9bde-0255-5657-ae2d-c1dfd291741d","type":"group","scopeType":"end","scopeStartId":"5923ebac-c551-5ff0-879d-449ce2487df2"}},{"id":"5d0cc5f5-7399-5bf8-853e-ba977b48e0e2","type":"group","metaInfo":{"id":"5d0cc5f5-7399-5bf8-853e-ba977b48e0e2","type":"group","scopeType":"start","scopeEndId":"8f1ec015-7873-5441-8298-e580e6421bea","name":"List Operations"}},{"id":"941f3d05-26e6-516b-8876-da3e844e5d71","name":"List Account Operations","request":{"url":{"protocol":"http","port":"3001","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","accounts","{{account_id}}","operations"],"host":["127","0","0","1"],"query":[{"disabled":true,"key":"limit","value":"10"},{"disabled":true,"key":"start_date","value":"2021-01-01"},{"disabled":true,"key":"end_date","value":"2025-01-01"},{"disabled":true,"key":"sort_order","value":"asc"},{"disabled":true,"key":"cursor","value":"eyJpZCI6IjAxOTNiNTZmLWJhY2YtNzQ0MS05NDU4LTEyZTE5MjVlOGI4NCIsInBvaW50c19uZXh0Ijp0cnVlfQ=="},{"disabled":false,"key":"type"}],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"},{"disabled":false,"type":"string","value":"{{account_id}}","key":"account_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","baseUrl":"http://127.0.0.1:3001","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[{"listen":"test","script":{"id":"postProcessors.0.customScript","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        pm.test(\"Validate Response Data Length \", function () {","  var jsonData = pm.response.json();","  pm.expect(jsonData.items.length).to.be.above(0);","});","      "]}},{"listen":"test","script":{"id":"postProcessors.1.extractor","type":"text/javascript","exec":["","        if (JSON.setEnableBigInt) {","          JSON.setEnableBigInt(undefined);","        }","        ","      async function ____replaceIn(value) {","        if (typeof pm.variables.replaceInAsync === 'function') {","          return await pm.variables.replaceInAsync(value);","        }","        return pm.variables.replaceIn(value);","      };","      ;(async () => {","        try{","          ","          const expression = pm.variables.replaceIn(`$.items[0].id`);","          const JSONPath = require('jsonpath-plus').JSONPath;","          const jsonData = pm.response.json();","          let value = JSONPath({","            json: jsonData,","            path: expression,","            wrap: false","          });","","","          if (false && undefined !== undefined) {","            if (Array.isArray(value)) {","              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];","            } else {","              value = undefined;","            }","          }","          ","          ","        switch (typeof value) {","          case 'object':","            value = JSON.stringify(value);","            break;","          default:","            value = String(value);","            break;","        }","      ","          const formattedName = await ____replaceIn(`operation_id`);pm.environment.set(formattedName, value);console.log('___label_placeholder__processor___', 'The value of the Environment variable ' + formattedName + ' has been set to' + ' ' + '' + value + '')","        } catch(e) {","          e.message = `error occurred in extracting variable operation_id, error message: ` + e.message;","          setImmediate(() => { throw e });","        }","      })();","      "]}}],"responseDefinition":{"id":24932091,"name":"Success","code":200,"contentType":"json","jsonSchema":{"type":"object","properties":{"items":{"type":"array","items":{"$ref":"#/definitions/8641347"}}},"x-apidog-orders":["items","01JN71TAEBRGS41HJVYQ3Y3DV6"],"required":["items"],"x-apidog-refs":{"01JN71TAEBRGS41HJVYQ3Y3DV6":{"$ref":"#/definitions/5381621"}}},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453},"5381621":{"type":"object","properties":{"limit":{"type":"integer","x-apidog-mock":"10"},"next_cursor":{"type":"string","x-apidog-mock":"{{$string.alphanumeric(min=86,max=86)}}"}},"x-apidog-orders":["next_cursor","limit"],"required":["limit"],"title":"pagination.cursor","name":"pagination.cursor","moduleId":760453},"7325329":{"type":"object","properties":{"available":{"type":"string","x-apidog-mock":"100.00"},"onHold":{"type":"string","x-apidog-mock":"0"}},"x-apidog-orders":["available","onHold"],"required":["available","onHold"],"title":"balance.values.v3.x.x","name":"balance.values.v3.x.x","moduleId":760453},"8641347":{"type":"object","properties":{"id":{"type":"string","description":"The unique identifier of the Operation.","format":"uuid"},"description":{"type":"string","description":"Description of the operation."},"transactionId":{"type":"string","format":"uuid","description":"The unique identifier of the Transaction."},"type":{"type":"string","enum":["CREDIT","DEBIT","ON_HOLD","RELEASE"],"x-apidog-enum":[{"value":"CREDIT","name":"Credit Operation","description":""},{"value":"DEBIT","name":"Debit Operation","description":""},{"value":"ON_HOLD","name":"On Hold Operation","description":"Balance reservation operation, moving the amount to the on_hold balance."},{"value":"RELEASE","name":"Release Operation","description":"Release operation of the reserved balance, returning it to the available balance"}],"description":"The type of the operation.\n`CREDIT` `DEBIT` `ON_HOLD` `RELEASE`"},"assetCode":{"type":"string","description":"The code of the asset used in the operation."},"chartOfAccounts":{"type":"string","description":"The name of the Chart-of-Accounts that the operation belongs to."},"amount":{"type":"object","properties":{"value":{"type":"string","x-apidog-mock":"100.00"}},"x-apidog-orders":["value"],"x-apidog-refs":{},"required":["value"],"description":"An object containing information about the amount used in the operation."},"balance":{"type":"object","properties":{},"x-apidog-orders":["01JXFMCY8985B99D24K818AW5N"],"x-apidog-refs":{"01JXFMCY8985B99D24K818AW5N":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance before the operation."},"balanceAfter":{"type":"object","properties":{},"x-apidog-orders":["01JXFMDFCFGMBQMPBXMDDXN41A"],"x-apidog-refs":{"01JXFMDFCFGMBQMPBXMDDXN41A":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance after the operation."},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":["string","null"]}},"x-apidog-orders":["code","description"],"required":["code","description"],"description":"The transaction status."},"accountId":{"type":"string","format":"uuid","description":"The unique identifier of the Account."},"accountAlias":{"type":"string","description":"The alias for the account used in the operation."},"balanceId":{"type":"string","description":"The unique identifier of the Balance."},"route":{"type":"string","description":"Unique identifier of the operation route assigned to this specific leg of the transaction. This must match the corresponding source and destination configuration, determining how value is moved between accounts within the transaction route."},"balanceAffected":{"type":"boolean","description":"Indicates whether the operation had an impact on the account balance."},"balanceKey":{"type":"string","description":"The key identifier of the Balance"}},"x-apidog-orders":["id","transactionId","01JN71H2XZAMF6F0KY5QH2XTD6","accountId","accountAlias","balanceId","balanceKey","description","type","assetCode","chartOfAccounts","route","amount","balance","balanceAfter","status","balanceAffected","01JN718VEVJGSYKGXJ4PYFJ64Z","01JN718VKY0WWKT5F4317HNQF5"],"required":["id","description","transactionId","type","assetCode","chartOfAccounts","amount","balance","balanceAfter","status","accountId","accountAlias","balanceId","route","balanceAffected","balanceKey"],"x-apidog-refs":{"01JN718VEVJGSYKGXJ4PYFJ64Z":{"$ref":"#/definitions/5299902"},"01JN718VKY0WWKT5F4317HNQF5":{"$ref":"#/definitions/5295307"},"01JN71H2XZAMF6F0KY5QH2XTD6":{"$ref":"#/definitions/5365047"}},"title":"operation.response.v3.1.x","name":"operation.response.v3.1.x","moduleId":760453}}},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"073a6406-0b7a-42b5-b3c1-8b7ce60b7a20","id":"941f3d05-26e6-516b-8876-da3e844e5d71","type":"http","name":"List Account Operations","projectId":699928,"relatedId":1259301,"environmentId":2661460,"blockNumber":6,"httpApiId":17810524,"httpApiCaseId":26070665,"httpApiName":"List Account Operations","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/{account_id}/operations","httpApiMethod":"get","httpApiCaseName":"List Account Operations","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"2a8a83e8-229b-5c5f-aed3-c9dbd11f9b7b","name":"Retrieve an Account Operation","request":{"url":{"protocol":"http","port":"3001","path":["v1","organizations","{{organization_id}}","ledgers","{{ledger_id}}","accounts","{{account_id}}","operations","{{operation_id}}"],"host":["127","0","0","1"],"query":[],"variable":[{"disabled":false,"type":"string","value":"{{organization_id}}","key":"organization_id"},{"disabled":false,"type":"string","value":"{{ledger_id}}","key":"ledger_id"},{"disabled":false,"type":"string","value":"{{account_id}}","key":"account_id"},{"disabled":false,"type":"string","value":"{{operation_id}}","key":"operation_id"}]},"header":[{"disabled":false,"key":"X-Request-Id","value":"{{$string.uuid}}"},{"key":"User-Agent","value":"Apidog/1.0.0 (https://apidog.com)"},{"key":"Content-Type","value":"application/json"}],"method":"GET","baseUrl":"http://127.0.0.1:3001","body":{},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{access_token}}","key":"token"}]},"type":"http"},"response":[],"event":[],"responseDefinition":{"id":24932092,"name":"Success","code":200,"contentType":"json","jsonSchema":{"$ref":"#/definitions/8641347"},"description":"","mediaType":"","headers":[],"oasExtensions":"","schemaDefinitions":{"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453},"7325329":{"type":"object","properties":{"available":{"type":"string","x-apidog-mock":"100.00"},"onHold":{"type":"string","x-apidog-mock":"0"}},"x-apidog-orders":["available","onHold"],"required":["available","onHold"],"title":"balance.values.v3.x.x","name":"balance.values.v3.x.x","moduleId":760453},"8641347":{"type":"object","properties":{"id":{"type":"string","description":"The unique identifier of the Operation.","format":"uuid"},"description":{"type":"string","description":"Description of the operation."},"transactionId":{"type":"string","format":"uuid","description":"The unique identifier of the Transaction."},"type":{"type":"string","enum":["CREDIT","DEBIT","ON_HOLD","RELEASE"],"x-apidog-enum":[{"value":"CREDIT","name":"Credit Operation","description":""},{"value":"DEBIT","name":"Debit Operation","description":""},{"value":"ON_HOLD","name":"On Hold Operation","description":"Balance reservation operation, moving the amount to the on_hold balance."},{"value":"RELEASE","name":"Release Operation","description":"Release operation of the reserved balance, returning it to the available balance"}],"description":"The type of the operation.\n`CREDIT` `DEBIT` `ON_HOLD` `RELEASE`"},"assetCode":{"type":"string","description":"The code of the asset used in the operation."},"chartOfAccounts":{"type":"string","description":"The name of the Chart-of-Accounts that the operation belongs to."},"amount":{"type":"object","properties":{"value":{"type":"string","x-apidog-mock":"100.00"}},"x-apidog-orders":["value"],"x-apidog-refs":{},"required":["value"],"description":"An object containing information about the amount used in the operation."},"balance":{"type":"object","properties":{},"x-apidog-orders":["01JXFMCY8985B99D24K818AW5N"],"x-apidog-refs":{"01JXFMCY8985B99D24K818AW5N":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance before the operation."},"balanceAfter":{"type":"object","properties":{},"x-apidog-orders":["01JXFMDFCFGMBQMPBXMDDXN41A"],"x-apidog-refs":{"01JXFMDFCFGMBQMPBXMDDXN41A":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance after the operation."},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":["string","null"]}},"x-apidog-orders":["code","description"],"required":["code","description"],"description":"The transaction status."},"accountId":{"type":"string","format":"uuid","description":"The unique identifier of the Account."},"accountAlias":{"type":"string","description":"The alias for the account used in the operation."},"balanceId":{"type":"string","description":"The unique identifier of the Balance."},"route":{"type":"string","description":"Unique identifier of the operation route assigned to this specific leg of the transaction. This must match the corresponding source and destination configuration, determining how value is moved between accounts within the transaction route."},"balanceAffected":{"type":"boolean","description":"Indicates whether the operation had an impact on the account balance."},"balanceKey":{"type":"string","description":"The key identifier of the Balance"}},"x-apidog-orders":["id","transactionId","01JN71H2XZAMF6F0KY5QH2XTD6","accountId","accountAlias","balanceId","balanceKey","description","type","assetCode","chartOfAccounts","route","amount","balance","balanceAfter","status","balanceAffected","01JN718VEVJGSYKGXJ4PYFJ64Z","01JN718VKY0WWKT5F4317HNQF5"],"required":["id","description","transactionId","type","assetCode","chartOfAccounts","amount","balance","balanceAfter","status","accountId","accountAlias","balanceId","route","balanceAffected","balanceKey"],"x-apidog-refs":{"01JN718VEVJGSYKGXJ4PYFJ64Z":{"$ref":"#/definitions/5299902"},"01JN718VKY0WWKT5F4317HNQF5":{"$ref":"#/definitions/5295307"},"01JN71H2XZAMF6F0KY5QH2XTD6":{"$ref":"#/definitions/5365047"}},"title":"operation.response.v3.1.x","name":"operation.response.v3.1.x","moduleId":760453}}},"requestDefinition":{"jsonSchema":{}},"overrideRequesterOptions":{"strictSSL":false},"metaInfo":{"blockId":"5bf372a5-e250-43f1-8afa-77a08eaed0ad","id":"2a8a83e8-229b-5c5f-aed3-c9dbd11f9b7b","type":"http","name":"Retrieve an Account Operation","projectId":699928,"relatedId":1259301,"environmentId":2661460,"blockNumber":7,"httpApiId":17810525,"httpApiCaseId":26070669,"httpApiName":"Retrieve an Account Operation","httpApiPath":"/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/{account_id}/operations/{operation_id}","httpApiMethod":"get","httpApiCaseName":"Retrieve an Account Operation","moduleId":760453},"type":"http","protocolProfileBehavior":{"useWhatWGUrlParser":false,"disableUrlEncoding":false,"disabledSystemHeaders":{},"disableCookies":false}},{"id":"8f1ec015-7873-5441-8298-e580e6421bea","type":"group","metaInfo":{"id":"8f1ec015-7873-5441-8298-e580e6421bea","type":"group","scopeType":"end","scopeStartId":"5d0cc5f5-7399-5bf8-853e-ba977b48e0e2"}},{"id":"c4f168c3-92c8-533f-b4c1-a97297937231","type":"group","metaInfo":{"id":"c4f168c3-92c8-533f-b4c1-a97297937231","type":"group","scopeType":"end","scopeStartId":"5f7ad94c-4e59-54d4-ba12-68b56db1e78e"}}],"name":"Release Tests - Local"}],"info":{"name":"Release Tests - Local"},"dataSchemas":{"3670550":{"type":"object","properties":{"legalName":{"type":"string","description":"The legal name of the Organization. Max length: 256","x-apidog-mock":"{{$company.name}}","maxLength":256},"parentOrganizationId":{"type":["string","null"],"description":"The unique identifier of the parent Organization.","x-apidog-mock":"{{$string.uuid}}","format":"uuid"},"doingBusinessAs":{"type":["string","null"],"x-apidog-mock":"{{$company.name}}","maxLength":256,"description":"The trade name of the Organization. Max length: 256"},"legalDocument":{"type":"string","description":"The document of the Organization. Max length: 256","x-apidog-mock":"{{$string.numeric(min=14,max=14)}}","maxLength":256},"address":{"type":"object","properties":{"line1":{"type":"string","x-apidog-mock":"{{$location.streetAddress}}","description":"The first line of the address. Usually used to inform the name of the street and the number of the building"},"line2":{"type":"string","x-apidog-mock":"{{$location.secondaryAddress}}","description":"The second line of the address. Usually used to inform about any complements such as the number of the apartment."},"zipCode":{"type":"string","x-apidog-mock":"{{$location.zipCode}}","description":"The postal code."},"city":{"type":"string","x-apidog-mock":"{{$location.city}}","description":"The name of the city where the Organization is established."},"state":{"type":"string","x-apidog-mock":"{{$location.state}}","description":"The two-letter abbreviation that represents the State where the Organization is."},"country":{"description":"The two-letter code (ISO 3166-1 alpha2) that represents the country where the Organization is.","type":"string","x-apidog-mock":"{{$location.countryCode}}"}},"required":["line1","line2","zipCode","city","state","country"],"x-apidog-orders":["line1","line2","zipCode","city","state","country"],"description":"An object containing information about the address of the Organization."}},"required":["legalName","legalDocument"],"x-apidog-orders":["legalName","parentOrganizationId","doingBusinessAs","legalDocument","01JMJCWQRYRQYHWPFNAXCR6EWK","address","01JMJCQ30S11CPHT86CSTND4PF"],"x-apidog-refs":{"01JMJCQ30S11CPHT86CSTND4PF":{"$ref":"#/definitions/5295307"},"01JMJCWQRYRQYHWPFNAXCR6EWK":{"$ref":"#/definitions/5295306"}},"title":"organization.request.v3.x.x","name":"organization.request.v3.x.x","moduleId":760453},"3672507":{"type":"object","properties":{"assetCode":{"type":"string","description":"The code used to refer to the Asset. If the Asset is a currency (type = currency), the code must follow the ISO 4217 values.","x-apidog-mock":"{{$finance.currencyCode}}"},"name":{"type":"string","description":"The name of the Account.","maxLength":256},"alias":{"type":"string","description":"An alternative name or identifier associated with the Account.","x-apidog-mock":"@accountAlias"},"type":{"type":"string","description":"The type of account."},"parentAccountId":{"type":["string","null"],"x-apidog-mock":"{{$string.uuid}}","format":"uuid","description":"The unique identifier of the Parent Account. If the account does not have a parent account, this field will be null."},"entityId":{"type":["string","null"],"description":"The unique identifier of the Entity responsible for the Account.","x-apidog-mock":"{{$string.uuid}}"},"portfolioId":{"type":["string","null"],"description":"The unique identifier of the associated Portfolio.","x-apidog-mock":"{{$string.uuid}}","format":"uuid"},"segmentId":{"type":["string","null"],"description":"The unique identifier of the Segment which is used to cluster customer accounts.","x-apidog-mock":"{{$string.uuid}}","format":"uuid"}},"required":["assetCode","type","alias"],"x-apidog-orders":["assetCode","name","alias","type","parentAccountId","entityId","portfolioId","segmentId","01JMWR9599FT29ESEDJ701PJHA","01JMWR9ETVQ01BRRDFBY1ZS1V9"],"x-apidog-refs":{"01JMWR9599FT29ESEDJ701PJHA":{"$ref":"#/definitions/5295306"},"01JMWR9ETVQ01BRRDFBY1ZS1V9":{"$ref":"#/definitions/5295307"}},"title":"account.request.v3.x.x","name":"account.request.v3.x.x","moduleId":760453},"5295306":{"type":"object","properties":{"status":{"type":"object","properties":{"description":{"type":["string","null"],"description":"The description of the status. Max length: 256"},"code":{"type":"string","description":"The name of the status. Max length:100"}},"x-apidog-orders":["description","code"],"description":"An object containing information about the status."}},"x-apidog-orders":["status"],"title":"status","name":"status","moduleId":760453},"5295307":{"type":"object","properties":{"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value. For example, to add a Cost Center, use \"costCenter\": \"BR_11101997\"."}},"x-apidog-orders":["metadata"],"title":"metadata","name":"metadata","moduleId":760453},"5299823":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique reference of the Organization."}},"x-apidog-orders":["id","01JMCYXQ79XF1Z2H2FCZFK6T1J","01JMCZEPGEYNEKH7NZZHJHM7TJ"],"x-apidog-refs":{"01JMCYXQ79XF1Z2H2FCZFK6T1J":{"$ref":"#/definitions/3670550"},"01JMCZEPGEYNEKH7NZZHJHM7TJ":{"$ref":"#/definitions/5299902"}},"title":"organization.response.v3.x.x","name":"organization.response.v3.x.x","moduleId":760453},"5299902":{"type":"object","properties":{"createdAt":{"type":"string","format":"date-time","description":"The date when the record was created."},"updatedAt":{"type":"string","format":"date-time","description":"The date when the record was last updated."},"deletedAt":{"type":["string","null"],"format":"date-time","description":"The date when the record was deleted."}},"x-apidog-orders":["createdAt","updatedAt","deletedAt"],"required":["createdAt","updatedAt","deletedAt"],"title":"database.datetime","name":"database.datetime","moduleId":760453},"5299913":{"type":"object","properties":{"id":{"type":"string","description":"The unique reference of the Account.","format":"uuid"}},"x-apidog-orders":["id","01JMJC8Z3Z9F3WMSYBQ2DXKQ7W","01JMCZTG16JSTRBDM44SXTM6E5","01JMCZV03J6A4BH9SMCY4PJ3VC"],"required":["id"],"x-apidog-refs":{"01JMCZTG16JSTRBDM44SXTM6E5":{"$ref":"#/definitions/3672507","x-apidog-overrides":{}},"01JMCZV03J6A4BH9SMCY4PJ3VC":{"$ref":"#/definitions/5299902"},"01JMJC8Z3Z9F3WMSYBQ2DXKQ7W":{"$ref":"#/definitions/5365047"}},"title":"account.response.v3.x.x","name":"account.response.v3.x.x","moduleId":760453},"5365042":{"type":"object","properties":{"organizationId":{"type":"string","format":"uuid","description":"The unique identifier of the Organization."}},"x-apidog-orders":["organizationId"],"required":["organizationId"],"title":"organization.id","name":"organization.id","moduleId":760453},"5365046":{"type":"object","properties":{"ledgerId":{"type":"string","description":"The unique identifier of the Ledger.","format":"uuid"}},"x-apidog-orders":["ledgerId"],"required":["ledgerId"],"title":"ledger.id","name":"ledger.id","moduleId":760453},"5365047":{"type":"object","properties":{},"x-apidog-orders":["01JMJC5C6GY89Y6T9TSVGPNE1Z","01JMJC5TV70RW156PSFRPED652"],"required":[],"x-apidog-refs":{"01JMJC5C6GY89Y6T9TSVGPNE1Z":{"$ref":"#/definitions/5365042"},"01JMJC5TV70RW156PSFRPED652":{"$ref":"#/definitions/5365046"}},"title":"organization.ledger.ids","name":"organization.ledger.ids","moduleId":760453},"5381621":{"type":"object","properties":{"limit":{"type":"integer","x-apidog-mock":"10"},"next_cursor":{"type":"string","x-apidog-mock":"{{$string.alphanumeric(min=86,max=86)}}"}},"x-apidog-orders":["next_cursor","limit"],"required":["limit"],"title":"pagination.cursor","name":"pagination.cursor","moduleId":760453},"5381622":{"type":"object","properties":{"page":{"type":"integer","x-apidog-mock":"1"},"limit":{"type":"integer","x-apidog-mock":"10"}},"x-apidog-orders":["page","limit"],"required":["page","limit"],"title":"pagination.pagenumber","name":"pagination.pagenumber","moduleId":760453},"5398340":{"type":"object","properties":{},"x-apidog-orders":["01JMWN3P3FCDEVG7PY3GRZQGWG"],"x-apidog-refs":{"01JMWN3P3FCDEVG7PY3GRZQGWG":{"$ref":"#/definitions/3670550","x-apidog-overrides":{"legalDocument":null}}},"title":"organization.update.request.v3.x.x","name":"organization.update.request.v3.x.x","moduleId":760453},"7253978":{"type":"object","properties":{"chartOfAccountsGroupName":{"type":"string","description":"The chart of accounts group name which categorizes this transaction under a specific group","x-apidog-mock":"CHART_OF_ACCOUNT_GROUP_NAME"},"description":{"type":"string","description":"A description for the transaction.","x-apidog-mock":"Send USD 100"},"send":{"type":"object","properties":{"asset":{"type":"string","description":"The code that identifies the asset that will be sent.","x-apidog-mock":"USD"},"value":{"type":"string","description":"The amount that will be sent","x-apidog-mock":"100.00"},"distribute":{"type":"object","properties":{"to":{"type":"array","items":{"$ref":"#/definitions/7253981"},"description":"A list of the accounts to which the amount will be transferred.","minItems":1}},"required":["to"],"x-apidog-orders":["to"],"description":"An object containing the information of the account to which the amount will be transferred."}},"required":["asset","value","distribute"],"x-apidog-orders":["asset","value","distribute"],"description":"An object containing information about the transaction that will be sent."},"route":{"type":"string"}},"required":["chartOfAccountsGroupName","description","send"],"x-apidog-orders":["chartOfAccountsGroupName","description","route","send","01JN16H9S2FTMHTD0FYZ0HDHFZ"],"x-apidog-refs":{"01JN16H9S2FTMHTD0FYZ0HDHFZ":{"$ref":"#/definitions/5295307"}},"title":"transaction.inflow.request.v3.x.x","name":"transaction.inflow.request.v3.x.x","moduleId":760453},"7253979":{"type":"object","properties":{"chartOfAccountsGroupName":{"type":"string","description":"The chart of accounts group name which categorizes this transaction under a specific group","x-apidog-mock":"CHART_OF_ACCOUNT_GROUP_NAME"},"description":{"type":"string","description":"A description for the transaction.","x-apidog-mock":"Send USD 100"},"send":{"type":"object","properties":{"asset":{"type":"string","description":"The code that identifies the asset that will be sent.","x-apidog-mock":"USD"},"value":{"type":"string","description":"The amount that will be sent","x-apidog-mock":"10000"},"source":{"type":"object","properties":{"from":{"type":"array","items":{"$ref":"#/definitions/7253981"},"description":"The list of accounts that will be used as source. (DEBIT operations)","minItems":1}},"required":["from"],"x-apidog-orders":["from"],"description":"The list of accounts that will be used as source."}},"required":["asset","value","source"],"x-apidog-orders":["asset","value","source"],"description":"An object containing information about the transaction that will be sent."},"route":{"type":"string"},"pending":{"type":"boolean","description":"Indicates whether a transaction will be executed in two phases, leaving it in a pending state.","x-apidog-mock":"false","default":false}},"required":["chartOfAccountsGroupName","description","send"],"x-apidog-orders":["chartOfAccountsGroupName","pending","description","route","send","01JN16H9S2FTMHTD0FYZ0HDHFZ"],"x-apidog-refs":{"01JN16H9S2FTMHTD0FYZ0HDHFZ":{"$ref":"#/definitions/5295307"}},"title":"transaction.outflow.request.v3.x.x","name":"transaction.outflow.request.v3.x.x","moduleId":760453},"7253981":{"type":"object","properties":{"amount":{"type":"object","properties":{"asset":{"type":"string","description":"The name of the asset used in the operation.","x-apidog-mock":"USD"},"value":{"type":"string","description":"The amount that will be sent.","x-apidog-mock":"100.00"}},"required":["asset","value"],"x-apidog-orders":["asset","value"],"description":"An object containing information about the amount that will be used in the operation."},"description":{"type":"string","description":"A description for the operation.","x-apidog-mock":"Operation"},"metadata":{"type":["object","null"],"properties":{},"x-apidog-orders":[],"description":"An object containing key-value pairs to add as metadata, where the field name is the key and the field value is the value."},"share":{"type":"object","properties":{"percentage":{"type":"integer","description":"The percentage that will be shared.","x-apidog-mock":"100"},"percentageOfPercentage":{"type":"integer","description":"The percentage of the percentage that will be shared.","x-apidog-mock":"0"}},"x-apidog-orders":["percentage","percentageOfPercentage"],"description":"If different accounts are part of the operation, this object will contain the information about the percentage used for each account.","required":["percentage"]},"remaining":{"type":"string","x-apidog-mock":"remaining"},"accountAlias":{"type":"string","description":"The account used in the operation. UniqueId or Account Alias","x-apidog-mock":"@account_alias"},"route":{"type":"string","x-apidog-mock":"{{$string.uuid}}","description":"Unique identifier of the operation route assigned to this specific leg of the transaction. This must match the corresponding source and destination configuration, determining how value is moved between accounts within the transaction route."},"balanceKey":{"type":"string","description":"Unique identifier key for the account balance","x-apidog-mock":"additional"}},"x-apidog-orders":["accountAlias","balanceKey","route","amount","share","remaining","description","metadata"],"oneOf":[{"required":["amount"]},{"required":["share"]},{"required":["remaining"]}],"required":["accountAlias"],"title":"operation.transaction.request.v3.x.x","name":"operation.transaction.request.v3.x.x","moduleId":760453},"7325329":{"type":"object","properties":{"available":{"type":"string","x-apidog-mock":"100.00"},"onHold":{"type":"string","x-apidog-mock":"0"}},"x-apidog-orders":["available","onHold"],"required":["available","onHold"],"title":"balance.values.v3.x.x","name":"balance.values.v3.x.x","moduleId":760453},"8641347":{"type":"object","properties":{"id":{"type":"string","description":"The unique identifier of the Operation.","format":"uuid"},"description":{"type":"string","description":"Description of the operation."},"transactionId":{"type":"string","format":"uuid","description":"The unique identifier of the Transaction."},"type":{"type":"string","enum":["CREDIT","DEBIT","ON_HOLD","RELEASE"],"x-apidog-enum":[{"value":"CREDIT","name":"Credit Operation","description":""},{"value":"DEBIT","name":"Debit Operation","description":""},{"value":"ON_HOLD","name":"On Hold Operation","description":"Balance reservation operation, moving the amount to the on_hold balance."},{"value":"RELEASE","name":"Release Operation","description":"Release operation of the reserved balance, returning it to the available balance"}],"description":"The type of the operation.\n`CREDIT` `DEBIT` `ON_HOLD` `RELEASE`"},"assetCode":{"type":"string","description":"The code of the asset used in the operation."},"chartOfAccounts":{"type":"string","description":"The name of the Chart-of-Accounts that the operation belongs to."},"amount":{"type":"object","properties":{"value":{"type":"string","x-apidog-mock":"100.00"}},"x-apidog-orders":["value"],"x-apidog-refs":{},"required":["value"],"description":"An object containing information about the amount used in the operation."},"balance":{"type":"object","properties":{},"x-apidog-orders":["01JXFMCY8985B99D24K818AW5N"],"x-apidog-refs":{"01JXFMCY8985B99D24K818AW5N":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance before the operation."},"balanceAfter":{"type":"object","properties":{},"x-apidog-orders":["01JXFMDFCFGMBQMPBXMDDXN41A"],"x-apidog-refs":{"01JXFMDFCFGMBQMPBXMDDXN41A":{"$ref":"#/definitions/7325329"}},"description":"An object containing information about the balance after the operation."},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":["string","null"]}},"x-apidog-orders":["code","description"],"required":["code","description"],"description":"The transaction status."},"accountId":{"type":"string","format":"uuid","description":"The unique identifier of the Account."},"accountAlias":{"type":"string","description":"The alias for the account used in the operation."},"balanceId":{"type":"string","description":"The unique identifier of the Balance."},"route":{"type":"string","description":"Unique identifier of the operation route assigned to this specific leg of the transaction. This must match the corresponding source and destination configuration, determining how value is moved between accounts within the transaction route."},"balanceAffected":{"type":"boolean","description":"Indicates whether the operation had an impact on the account balance."},"balanceKey":{"type":"string","description":"The key identifier of the Balance"}},"x-apidog-orders":["id","transactionId","01JN71H2XZAMF6F0KY5QH2XTD6","accountId","accountAlias","balanceId","balanceKey","description","type","assetCode","chartOfAccounts","route","amount","balance","balanceAfter","status","balanceAffected","01JN718VEVJGSYKGXJ4PYFJ64Z","01JN718VKY0WWKT5F4317HNQF5"],"required":["id","description","transactionId","type","assetCode","chartOfAccounts","amount","balance","balanceAfter","status","accountId","accountAlias","balanceId","route","balanceAffected","balanceKey"],"x-apidog-refs":{"01JN718VEVJGSYKGXJ4PYFJ64Z":{"$ref":"#/definitions/5299902"},"01JN718VKY0WWKT5F4317HNQF5":{"$ref":"#/definitions/5295307"},"01JN71H2XZAMF6F0KY5QH2XTD6":{"$ref":"#/definitions/5365047"}},"title":"operation.response.v3.1.x","name":"operation.response.v3.1.x","moduleId":760453},"8641358":{"type":"object","properties":{"id":{"type":"string","description":"ID","format":"uuid"},"description":{"type":"string"},"status":{"type":"object","properties":{"code":{"type":"string"},"description":{"type":"string"}},"x-apidog-orders":["code","description"],"required":["code","description"]},"amount":{"type":"string"},"assetCode":{"type":"string"},"chartOfAccountsGroupName":{"type":"string"},"source":{"type":"array","items":{"type":"string"}},"destination":{"type":"array","items":{"type":"string"}},"operations":{"type":"array","items":{"$ref":"#/definitions/8641347"}},"route":{"type":"string"}},"x-apidog-orders":["id","01JN71ZQSPF1SPSM597SH2N81C","description","route","status","amount","assetCode","chartOfAccountsGroupName","source","destination","01JN72166CQABKZ83FTCMTEQ2S","operations","01JN7275ZNTQQN1PN8XN5ZHHQF"],"required":["id","description","status","amount","assetCode","chartOfAccountsGroupName","source","destination","operations"],"x-apidog-refs":{"01JN71ZQSPF1SPSM597SH2N81C":{"$ref":"#/definitions/5365047"},"01JN72166CQABKZ83FTCMTEQ2S":{"$ref":"#/definitions/5299902"},"01JN7275ZNTQQN1PN8XN5ZHHQF":{"$ref":"#/definitions/5295307"}},"title":"transaction.response.v3.1.x","name":"transaction.response.v3.1.x","moduleId":760453},"8643885":{"type":"object","properties":{"description":{"type":"string","description":"A description for the transaction.","x-apidog-mock":"Send USD 100.00"},"send":{"type":"object","properties":{"asset":{"type":"string","description":"The code that identifies the asset that will be sent.","x-apidog-mock":"USD"},"value":{"type":"string","description":"The amount that will be sent","x-apidog-mock":"100.00"},"source":{"type":"object","properties":{"from":{"type":"array","items":{"$ref":"#/definitions/7253981"},"description":"The list of accounts that will be used as source. (DEBIT operations)","minItems":1}},"required":["from"],"x-apidog-orders":["from"],"description":"The list of accounts that will be used as source."},"distribute":{"type":"object","properties":{"to":{"type":"array","items":{"$ref":"#/definitions/7253981"},"description":"A list of the accounts to which the amount will be transferred.","minItems":1}},"required":["to"],"x-apidog-orders":["to"],"description":"An object containing the information of the account to which the amount will be transferred."}},"required":["asset","value","source","distribute"],"x-apidog-orders":["asset","value","source","distribute"],"description":"An object containing information about the transaction that will be sent."},"pending":{"type":"boolean","description":"Indicates whether a transaction will be executed in two phases, leaving it in a pending state.","x-apidog-mock":"false","default":false},"route":{"type":"string","description":"Unique identifier of the transaction route configuration. It defines the overall flow of the transaction, including the structure of the operations to be executed."},"transactionDate":{"type":"string","format":"date-time"}},"required":["description","send"],"x-apidog-orders":["description","pending","route","transactionDate","send","01JN16H9S2FTMHTD0FYZ0HDHFZ"],"x-apidog-refs":{"01JN16H9S2FTMHTD0FYZ0HDHFZ":{"$ref":"#/definitions/5295307"}},"title":"transaction.request.v3.1.x","name":"transaction.request.v3.1.x","moduleId":760453}},"mockRules":{"rules":[],"enableSystemRule":true},"environment":{"id":2661460,"name":"MIDAZ LOCAL","baseUrl":"http://127.0.0.1:3000","baseUrls":{"5d4d8c97-0469-4b0f-a875-0d7db199b5fd":"http://127.0.0.1:8080","default":"http://127.0.0.1:3000","c619c175-e291-4b88-9816-a68c237e500f":"http://127.0.0.1:3001","7ff7248b-3a97-46b4-b29c-dab28cd09ac8":""},"variable":{"id":"92bc4dba-28fc-4ee0-96f2-9f9fc1b8015e","name":"MIDAZ LOCAL","values":[{"type":"any","value":"01974637-b3a7-7190-a53b-e9b8d8b2b3cf","key":"organization_id","isBindInitial":false,"initialValue":"01967507-c970-7a74-b36f-1bfe281379df","securityType":""},{"type":"any","value":"0197463a-3c43-755a-9553-31ad88b57beb","key":"ledger_id","isBindInitial":false,"initialValue":"01967507-c9c4-75d7-b151-f118b63e908a","securityType":""},{"type":"any","value":"","key":"product_id","isBindInitial":true,"initialValue":"","securityType":""},{"type":"any","value":"","key":"portfolio_id","isBindInitial":true,"initialValue":"","securityType":""},{"type":"any","value":"","key":"asset_id","isBindInitial":true,"initialValue":"","securityType":""},{"type":"any","value":"01967507-caa6-7166-9b07-a65dabd22761","key":"account_id","isBindInitial":true,"initialValue":"01967507-caa6-7166-9b07-a65dabd22761","securityType":""},{"type":"any","value":"","key":"transaction_id","isBindInitial":true,"initialValue":"","securityType":""},{"type":"any","value":"","key":"asset_rate_id","isBindInitial":true,"initialValue":"","securityType":""},{"type":"any","value":"","key":"operation_id","isBindInitial":true,"initialValue":"","securityType":""},{"type":"any","value":"","key":"asset_rate_external_id","isBindInitial":true,"initialValue":""},{"type":"any","value":"","key":"asset_rate_from_asset_code","isBindInitial":true,"initialValue":""},{"type":"any","value":"","key":"asset_rate_to_asset_code","isBindInitial":true,"initialValue":""},{"type":"any","value":"","key":"segment_id","isBindInitial":true,"initialValue":""}]},"requestProxyAgentSettings":{"5d4d8c97-0469-4b0f-a875-0d7db199b5fd":{"agentId":2},"default":{"agentId":2},"c619c175-e291-4b88-9816-a68c237e500f":{"agentId":2},"6bbe6800-cd1d-4d91-81fd-3a8a044959e9":{"agentId":2},"7ff7248b-3a97-46b4-b29c-dab28cd09ac8":{"agentId":2}},"type":"normal","parameter":{"header":[],"query":[],"body":[],"cookie":[]}},"globals":{"baseUrl":"","baseUrls":{},"variable":{"id":"dae7a888-301a-441e-8bbf-02afe4775b3f","values":[{"type":"any","value":"1","key":"id","isBindInitial":true,"initialValue":"1"},{"type":"any","value":"https://postman-rest-api-learner.glitch.me/","key":"base_url","isBindInitial":true,"initialValue":"https://postman-rest-api-learner.glitch.me/"}]},"parameter":{"header":[],"query":[],"body":[],"cookie":[]}},"moduleVariablesMap":{"760453":[]},"defaultModuleId":760453,"isServerBuild":false,"isTestFlowControl":true,"projectOptions":{"enableJsonc":true,"enableBigint":false,"responseValidate":true,"isDefaultUrlEncoding":3,"enableTestScenarioSetting":false,"enableYAPICompatScript":false,"publishedDocUrlRules":{"defaultRule":"RESOURCE_KEY_ONLY","resourceKeyStandard":"LEGACY","enableResourceKeyStandard":true},"preferredHttpVersion":{},"folderShareExpandModeSettings":{"expandId":[],"mode":"AUTO"},"mockSettings":{"engine":"fakerjs"},"language":"en-US"}}