// Code generated by MockGen. DO NOT EDIT.
// Source: /home/max/Workspace/LerianStudio/midaz/pkg/utils.go
//
// Generated by this command:
//
//	mockgen -source=/home/max/Workspace/LerianStudio/midaz/pkg/utils.go -destination=/home/max/Workspace/LerianStudio/midaz/pkg/utils_mock.go -package pkg
//

// Package pkg is a generated GoMock package.
package pkg

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSyscmdI is a mock of SyscmdI interface.
type MockSyscmdI struct {
	ctrl     *gomock.Controller
	recorder *MockSyscmdIMockRecorder
	isgomock struct{}
}

// MockSyscmdIMockRecorder is the mock recorder for MockSyscmdI.
type MockSyscmdIMockRecorder struct {
	mock *MockSyscmdI
}

// NewMockSyscmdI creates a new mock instance.
func NewMockSyscmdI(ctrl *gomock.Controller) *MockSyscmdI {
	mock := &MockSyscmdI{ctrl: ctrl}
	mock.recorder = &MockSyscmdIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyscmdI) EXPECT() *MockSyscmdIMockRecorder {
	return m.recorder
}

// ExecCmd mocks base method.
func (m *MockSyscmdI) ExecCmd(name string, arg ...string) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []any{name}
	for _, a := range arg {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecCmd", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecCmd indicates an expected call of ExecCmd.
func (mr *MockSyscmdIMockRecorder) ExecCmd(name any, arg ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name}, arg...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecCmd", reflect.TypeOf((*MockSyscmdI)(nil).ExecCmd), varargs...)
}
