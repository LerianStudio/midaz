// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/LerianStudio/midaz/sdks/go-sdk/builders (interfaces: AssetRateBuilder,AssetRateClientInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	builders "github.com/LerianStudio/midaz/sdks/go-sdk/builders"
	models "github.com/LerianStudio/midaz/sdks/go-sdk/models"
	gomock "github.com/golang/mock/gomock"
)

// MockAssetRateBuilder is a mock of AssetRateBuilder interface.
type MockAssetRateBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockAssetRateBuilderMockRecorder
}

// MockAssetRateBuilderMockRecorder is the mock recorder for MockAssetRateBuilder.
type MockAssetRateBuilderMockRecorder struct {
	mock *MockAssetRateBuilder
}

// NewMockAssetRateBuilder creates a new mock instance.
func NewMockAssetRateBuilder(ctrl *gomock.Controller) *MockAssetRateBuilder {
	mock := &MockAssetRateBuilder{ctrl: ctrl}

	mock.recorder = &MockAssetRateBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssetRateBuilder) EXPECT() *MockAssetRateBuilderMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockAssetRateBuilder) CreateOrUpdate(arg0 context.Context) (*models.AssetRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0)
	ret0, _ := ret[0].(*models.AssetRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockAssetRateBuilderMockRecorder) CreateOrUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockAssetRateBuilder)(nil).CreateOrUpdate), arg0)
}

// WithEffectiveAt mocks base method.
func (m *MockAssetRateBuilder) WithEffectiveAt(arg0 time.Time) builders.AssetRateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithEffectiveAt", arg0)
	ret0, _ := ret[0].(builders.AssetRateBuilder)
	return ret0
}

// WithEffectiveAt indicates an expected call of WithEffectiveAt.
func (mr *MockAssetRateBuilderMockRecorder) WithEffectiveAt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithEffectiveAt", reflect.TypeOf((*MockAssetRateBuilder)(nil).WithEffectiveAt), arg0)
}

// WithExpirationAt mocks base method.
func (m *MockAssetRateBuilder) WithExpirationAt(arg0 time.Time) builders.AssetRateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithExpirationAt", arg0)
	ret0, _ := ret[0].(builders.AssetRateBuilder)
	return ret0
}

// WithExpirationAt indicates an expected call of WithExpirationAt.
func (mr *MockAssetRateBuilderMockRecorder) WithExpirationAt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithExpirationAt", reflect.TypeOf((*MockAssetRateBuilder)(nil).WithExpirationAt), arg0)
}

// WithFromAsset mocks base method.
func (m *MockAssetRateBuilder) WithFromAsset(arg0 string) builders.AssetRateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithFromAsset", arg0)
	ret0, _ := ret[0].(builders.AssetRateBuilder)
	return ret0
}

// WithFromAsset indicates an expected call of WithFromAsset.
func (mr *MockAssetRateBuilderMockRecorder) WithFromAsset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithFromAsset", reflect.TypeOf((*MockAssetRateBuilder)(nil).WithFromAsset), arg0)
}

// WithLedger mocks base method.
func (m *MockAssetRateBuilder) WithLedger(arg0 string) builders.AssetRateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithLedger", arg0)
	ret0, _ := ret[0].(builders.AssetRateBuilder)
	return ret0
}

// WithLedger indicates an expected call of WithLedger.
func (mr *MockAssetRateBuilderMockRecorder) WithLedger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLedger", reflect.TypeOf((*MockAssetRateBuilder)(nil).WithLedger), arg0)
}

// WithOrganization mocks base method.
func (m *MockAssetRateBuilder) WithOrganization(arg0 string) builders.AssetRateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithOrganization", arg0)
	ret0, _ := ret[0].(builders.AssetRateBuilder)
	return ret0
}

// WithOrganization indicates an expected call of WithOrganization.
func (mr *MockAssetRateBuilderMockRecorder) WithOrganization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithOrganization", reflect.TypeOf((*MockAssetRateBuilder)(nil).WithOrganization), arg0)
}

// WithRate mocks base method.
func (m *MockAssetRateBuilder) WithRate(arg0 float64) builders.AssetRateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithRate", arg0)
	ret0, _ := ret[0].(builders.AssetRateBuilder)
	return ret0
}

// WithRate indicates an expected call of WithRate.
func (mr *MockAssetRateBuilderMockRecorder) WithRate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithRate", reflect.TypeOf((*MockAssetRateBuilder)(nil).WithRate), arg0)
}

// WithToAsset mocks base method.
func (m *MockAssetRateBuilder) WithToAsset(arg0 string) builders.AssetRateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithToAsset", arg0)
	ret0, _ := ret[0].(builders.AssetRateBuilder)
	return ret0
}

// WithToAsset indicates an expected call of WithToAsset.
func (mr *MockAssetRateBuilderMockRecorder) WithToAsset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithToAsset", reflect.TypeOf((*MockAssetRateBuilder)(nil).WithToAsset), arg0)
}

// MockAssetRateClientInterface is a mock of AssetRateClientInterface interface.
type MockAssetRateClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAssetRateClientInterfaceMockRecorder
}

// MockAssetRateClientInterfaceMockRecorder is the mock recorder for MockAssetRateClientInterface.
type MockAssetRateClientInterfaceMockRecorder struct {
	mock *MockAssetRateClientInterface
}

// NewMockAssetRateClientInterface creates a new mock instance.
func NewMockAssetRateClientInterface(ctrl *gomock.Controller) *MockAssetRateClientInterface {
	mock := &MockAssetRateClientInterface{ctrl: ctrl}

	mock.recorder = &MockAssetRateClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssetRateClientInterface) EXPECT() *MockAssetRateClientInterfaceMockRecorder {
	return m.recorder
}

// CreateOrUpdateAssetRate mocks base method.
func (m *MockAssetRateClientInterface) CreateOrUpdateAssetRate(arg0 context.Context, arg1, arg2 string, arg3 *models.UpdateAssetRateInput) (*models.AssetRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateAssetRate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.AssetRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateAssetRate indicates an expected call of CreateOrUpdateAssetRate.
func (mr *MockAssetRateClientInterfaceMockRecorder) CreateOrUpdateAssetRate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateAssetRate", reflect.TypeOf((*MockAssetRateClientInterface)(nil).CreateOrUpdateAssetRate), arg0, arg1, arg2, arg3)
}
