// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/LerianStudio/midaz/sdks/go-sdk/builders (interfaces: DepositBuilder,WithdrawalBuilder,TransferBuilder,ClientInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	builders "github.com/LerianStudio/midaz/sdks/go-sdk/builders"
	models "github.com/LerianStudio/midaz/sdks/go-sdk/models"
	gomock "github.com/golang/mock/gomock"
)

// MockDepositBuilder is a mock of DepositBuilder interface.
type MockDepositBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockDepositBuilderMockRecorder
}

// MockDepositBuilderMockRecorder is the mock recorder for MockDepositBuilder.
type MockDepositBuilderMockRecorder struct {
	mock *MockDepositBuilder
}

// NewMockDepositBuilder creates a new mock instance.
func NewMockDepositBuilder(ctrl *gomock.Controller) *MockDepositBuilder {
	mock := &MockDepositBuilder{ctrl: ctrl}

	mock.recorder = &MockDepositBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDepositBuilder) EXPECT() *MockDepositBuilderMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockDepositBuilder) Execute(arg0 context.Context) (*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockDepositBuilderMockRecorder) Execute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockDepositBuilder)(nil).Execute), arg0)
}

// ToAccount mocks base method.
func (m *MockDepositBuilder) ToAccount(arg0 string) builders.DepositBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToAccount", arg0)
	ret0, _ := ret[0].(builders.DepositBuilder)
	return ret0
}

// ToAccount indicates an expected call of ToAccount.
func (mr *MockDepositBuilderMockRecorder) ToAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToAccount", reflect.TypeOf((*MockDepositBuilder)(nil).ToAccount), arg0)
}

// WithAmount mocks base method.
func (m *MockDepositBuilder) WithAmount(arg0 int64, arg1 int) builders.DepositBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithAmount", arg0, arg1)
	ret0, _ := ret[0].(builders.DepositBuilder)
	return ret0
}

// WithAmount indicates an expected call of WithAmount.
func (mr *MockDepositBuilderMockRecorder) WithAmount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithAmount", reflect.TypeOf((*MockDepositBuilder)(nil).WithAmount), arg0, arg1)
}

// WithAssetCode mocks base method.
func (m *MockDepositBuilder) WithAssetCode(arg0 string) builders.DepositBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithAssetCode", arg0)
	ret0, _ := ret[0].(builders.DepositBuilder)
	return ret0
}

// WithAssetCode indicates an expected call of WithAssetCode.
func (mr *MockDepositBuilderMockRecorder) WithAssetCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithAssetCode", reflect.TypeOf((*MockDepositBuilder)(nil).WithAssetCode), arg0)
}

// WithDescription mocks base method.
func (m *MockDepositBuilder) WithDescription(arg0 string) builders.DepositBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithDescription", arg0)
	ret0, _ := ret[0].(builders.DepositBuilder)
	return ret0
}

// WithDescription indicates an expected call of WithDescription.
func (mr *MockDepositBuilderMockRecorder) WithDescription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithDescription", reflect.TypeOf((*MockDepositBuilder)(nil).WithDescription), arg0)
}

// WithExternalID mocks base method.
func (m *MockDepositBuilder) WithExternalID(arg0 string) builders.DepositBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithExternalID", arg0)
	ret0, _ := ret[0].(builders.DepositBuilder)
	return ret0
}

// WithExternalID indicates an expected call of WithExternalID.
func (mr *MockDepositBuilderMockRecorder) WithExternalID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithExternalID", reflect.TypeOf((*MockDepositBuilder)(nil).WithExternalID), arg0)
}

// WithIdempotencyKey mocks base method.
func (m *MockDepositBuilder) WithIdempotencyKey(arg0 string) builders.DepositBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithIdempotencyKey", arg0)
	ret0, _ := ret[0].(builders.DepositBuilder)
	return ret0
}

// WithIdempotencyKey indicates an expected call of WithIdempotencyKey.
func (mr *MockDepositBuilderMockRecorder) WithIdempotencyKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithIdempotencyKey", reflect.TypeOf((*MockDepositBuilder)(nil).WithIdempotencyKey), arg0)
}

// WithLedger mocks base method.
func (m *MockDepositBuilder) WithLedger(arg0 string) builders.DepositBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithLedger", arg0)
	ret0, _ := ret[0].(builders.DepositBuilder)
	return ret0
}

// WithLedger indicates an expected call of WithLedger.
func (mr *MockDepositBuilderMockRecorder) WithLedger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLedger", reflect.TypeOf((*MockDepositBuilder)(nil).WithLedger), arg0)
}

// WithMetadata mocks base method.
func (m *MockDepositBuilder) WithMetadata(arg0 map[string]interface{}) builders.DepositBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithMetadata", arg0)
	ret0, _ := ret[0].(builders.DepositBuilder)
	return ret0
}

// WithMetadata indicates an expected call of WithMetadata.
func (mr *MockDepositBuilderMockRecorder) WithMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithMetadata", reflect.TypeOf((*MockDepositBuilder)(nil).WithMetadata), arg0)
}

// WithOrganization mocks base method.
func (m *MockDepositBuilder) WithOrganization(arg0 string) builders.DepositBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithOrganization", arg0)
	ret0, _ := ret[0].(builders.DepositBuilder)
	return ret0
}

// WithOrganization indicates an expected call of WithOrganization.
func (mr *MockDepositBuilderMockRecorder) WithOrganization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithOrganization", reflect.TypeOf((*MockDepositBuilder)(nil).WithOrganization), arg0)
}

// WithTag mocks base method.
func (m *MockDepositBuilder) WithTag(arg0 string) builders.DepositBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTag", arg0)
	ret0, _ := ret[0].(builders.DepositBuilder)
	return ret0
}

// WithTag indicates an expected call of WithTag.
func (mr *MockDepositBuilderMockRecorder) WithTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTag", reflect.TypeOf((*MockDepositBuilder)(nil).WithTag), arg0)
}

// WithTags mocks base method.
func (m *MockDepositBuilder) WithTags(arg0 []string) builders.DepositBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTags", arg0)
	ret0, _ := ret[0].(builders.DepositBuilder)
	return ret0
}

// WithTags indicates an expected call of WithTags.
func (mr *MockDepositBuilderMockRecorder) WithTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTags", reflect.TypeOf((*MockDepositBuilder)(nil).WithTags), arg0)
}

// MockWithdrawalBuilder is a mock of WithdrawalBuilder interface.
type MockWithdrawalBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawalBuilderMockRecorder
}

// MockWithdrawalBuilderMockRecorder is the mock recorder for MockWithdrawalBuilder.
type MockWithdrawalBuilderMockRecorder struct {
	mock *MockWithdrawalBuilder
}

// NewMockWithdrawalBuilder creates a new mock instance.
func NewMockWithdrawalBuilder(ctrl *gomock.Controller) *MockWithdrawalBuilder {
	mock := &MockWithdrawalBuilder{ctrl: ctrl}

	mock.recorder = &MockWithdrawalBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawalBuilder) EXPECT() *MockWithdrawalBuilderMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockWithdrawalBuilder) Execute(arg0 context.Context) (*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockWithdrawalBuilderMockRecorder) Execute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockWithdrawalBuilder)(nil).Execute), arg0)
}

// FromAccount mocks base method.
func (m *MockWithdrawalBuilder) FromAccount(arg0 string) builders.WithdrawalBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromAccount", arg0)
	ret0, _ := ret[0].(builders.WithdrawalBuilder)
	return ret0
}

// FromAccount indicates an expected call of FromAccount.
func (mr *MockWithdrawalBuilderMockRecorder) FromAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromAccount", reflect.TypeOf((*MockWithdrawalBuilder)(nil).FromAccount), arg0)
}

// WithAmount mocks base method.
func (m *MockWithdrawalBuilder) WithAmount(arg0 int64, arg1 int) builders.WithdrawalBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithAmount", arg0, arg1)
	ret0, _ := ret[0].(builders.WithdrawalBuilder)
	return ret0
}

// WithAmount indicates an expected call of WithAmount.
func (mr *MockWithdrawalBuilderMockRecorder) WithAmount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithAmount", reflect.TypeOf((*MockWithdrawalBuilder)(nil).WithAmount), arg0, arg1)
}

// WithAssetCode mocks base method.
func (m *MockWithdrawalBuilder) WithAssetCode(arg0 string) builders.WithdrawalBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithAssetCode", arg0)
	ret0, _ := ret[0].(builders.WithdrawalBuilder)
	return ret0
}

// WithAssetCode indicates an expected call of WithAssetCode.
func (mr *MockWithdrawalBuilderMockRecorder) WithAssetCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithAssetCode", reflect.TypeOf((*MockWithdrawalBuilder)(nil).WithAssetCode), arg0)
}

// WithDescription mocks base method.
func (m *MockWithdrawalBuilder) WithDescription(arg0 string) builders.WithdrawalBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithDescription", arg0)
	ret0, _ := ret[0].(builders.WithdrawalBuilder)
	return ret0
}

// WithDescription indicates an expected call of WithDescription.
func (mr *MockWithdrawalBuilderMockRecorder) WithDescription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithDescription", reflect.TypeOf((*MockWithdrawalBuilder)(nil).WithDescription), arg0)
}

// WithExternalID mocks base method.
func (m *MockWithdrawalBuilder) WithExternalID(arg0 string) builders.WithdrawalBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithExternalID", arg0)
	ret0, _ := ret[0].(builders.WithdrawalBuilder)
	return ret0
}

// WithExternalID indicates an expected call of WithExternalID.
func (mr *MockWithdrawalBuilderMockRecorder) WithExternalID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithExternalID", reflect.TypeOf((*MockWithdrawalBuilder)(nil).WithExternalID), arg0)
}

// WithIdempotencyKey mocks base method.
func (m *MockWithdrawalBuilder) WithIdempotencyKey(arg0 string) builders.WithdrawalBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithIdempotencyKey", arg0)
	ret0, _ := ret[0].(builders.WithdrawalBuilder)
	return ret0
}

// WithIdempotencyKey indicates an expected call of WithIdempotencyKey.
func (mr *MockWithdrawalBuilderMockRecorder) WithIdempotencyKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithIdempotencyKey", reflect.TypeOf((*MockWithdrawalBuilder)(nil).WithIdempotencyKey), arg0)
}

// WithLedger mocks base method.
func (m *MockWithdrawalBuilder) WithLedger(arg0 string) builders.WithdrawalBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithLedger", arg0)
	ret0, _ := ret[0].(builders.WithdrawalBuilder)
	return ret0
}

// WithLedger indicates an expected call of WithLedger.
func (mr *MockWithdrawalBuilderMockRecorder) WithLedger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLedger", reflect.TypeOf((*MockWithdrawalBuilder)(nil).WithLedger), arg0)
}

// WithMetadata mocks base method.
func (m *MockWithdrawalBuilder) WithMetadata(arg0 map[string]interface{}) builders.WithdrawalBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithMetadata", arg0)
	ret0, _ := ret[0].(builders.WithdrawalBuilder)
	return ret0
}

// WithMetadata indicates an expected call of WithMetadata.
func (mr *MockWithdrawalBuilderMockRecorder) WithMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithMetadata", reflect.TypeOf((*MockWithdrawalBuilder)(nil).WithMetadata), arg0)
}

// WithOrganization mocks base method.
func (m *MockWithdrawalBuilder) WithOrganization(arg0 string) builders.WithdrawalBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithOrganization", arg0)
	ret0, _ := ret[0].(builders.WithdrawalBuilder)
	return ret0
}

// WithOrganization indicates an expected call of WithOrganization.
func (mr *MockWithdrawalBuilderMockRecorder) WithOrganization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithOrganization", reflect.TypeOf((*MockWithdrawalBuilder)(nil).WithOrganization), arg0)
}

// WithTag mocks base method.
func (m *MockWithdrawalBuilder) WithTag(arg0 string) builders.WithdrawalBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTag", arg0)
	ret0, _ := ret[0].(builders.WithdrawalBuilder)
	return ret0
}

// WithTag indicates an expected call of WithTag.
func (mr *MockWithdrawalBuilderMockRecorder) WithTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTag", reflect.TypeOf((*MockWithdrawalBuilder)(nil).WithTag), arg0)
}

// WithTags mocks base method.
func (m *MockWithdrawalBuilder) WithTags(arg0 []string) builders.WithdrawalBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTags", arg0)
	ret0, _ := ret[0].(builders.WithdrawalBuilder)
	return ret0
}

// WithTags indicates an expected call of WithTags.
func (mr *MockWithdrawalBuilderMockRecorder) WithTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTags", reflect.TypeOf((*MockWithdrawalBuilder)(nil).WithTags), arg0)
}

// MockTransferBuilder is a mock of TransferBuilder interface.
type MockTransferBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockTransferBuilderMockRecorder
}

// MockTransferBuilderMockRecorder is the mock recorder for MockTransferBuilder.
type MockTransferBuilderMockRecorder struct {
	mock *MockTransferBuilder
}

// NewMockTransferBuilder creates a new mock instance.
func NewMockTransferBuilder(ctrl *gomock.Controller) *MockTransferBuilder {
	mock := &MockTransferBuilder{ctrl: ctrl}

	mock.recorder = &MockTransferBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferBuilder) EXPECT() *MockTransferBuilderMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockTransferBuilder) Execute(arg0 context.Context) (*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockTransferBuilderMockRecorder) Execute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockTransferBuilder)(nil).Execute), arg0)
}

// FromAccount mocks base method.
func (m *MockTransferBuilder) FromAccount(arg0 string) builders.TransferBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromAccount", arg0)
	ret0, _ := ret[0].(builders.TransferBuilder)
	return ret0
}

// FromAccount indicates an expected call of FromAccount.
func (mr *MockTransferBuilderMockRecorder) FromAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromAccount", reflect.TypeOf((*MockTransferBuilder)(nil).FromAccount), arg0)
}

// ToAccount mocks base method.
func (m *MockTransferBuilder) ToAccount(arg0 string) builders.TransferBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToAccount", arg0)
	ret0, _ := ret[0].(builders.TransferBuilder)
	return ret0
}

// ToAccount indicates an expected call of ToAccount.
func (mr *MockTransferBuilderMockRecorder) ToAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToAccount", reflect.TypeOf((*MockTransferBuilder)(nil).ToAccount), arg0)
}

// WithAmount mocks base method.
func (m *MockTransferBuilder) WithAmount(arg0 int64, arg1 int) builders.TransferBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithAmount", arg0, arg1)
	ret0, _ := ret[0].(builders.TransferBuilder)
	return ret0
}

// WithAmount indicates an expected call of WithAmount.
func (mr *MockTransferBuilderMockRecorder) WithAmount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithAmount", reflect.TypeOf((*MockTransferBuilder)(nil).WithAmount), arg0, arg1)
}

// WithAssetCode mocks base method.
func (m *MockTransferBuilder) WithAssetCode(arg0 string) builders.TransferBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithAssetCode", arg0)
	ret0, _ := ret[0].(builders.TransferBuilder)
	return ret0
}

// WithAssetCode indicates an expected call of WithAssetCode.
func (mr *MockTransferBuilderMockRecorder) WithAssetCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithAssetCode", reflect.TypeOf((*MockTransferBuilder)(nil).WithAssetCode), arg0)
}

// WithDescription mocks base method.
func (m *MockTransferBuilder) WithDescription(arg0 string) builders.TransferBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithDescription", arg0)
	ret0, _ := ret[0].(builders.TransferBuilder)
	return ret0
}

// WithDescription indicates an expected call of WithDescription.
func (mr *MockTransferBuilderMockRecorder) WithDescription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithDescription", reflect.TypeOf((*MockTransferBuilder)(nil).WithDescription), arg0)
}

// WithExternalID mocks base method.
func (m *MockTransferBuilder) WithExternalID(arg0 string) builders.TransferBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithExternalID", arg0)
	ret0, _ := ret[0].(builders.TransferBuilder)
	return ret0
}

// WithExternalID indicates an expected call of WithExternalID.
func (mr *MockTransferBuilderMockRecorder) WithExternalID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithExternalID", reflect.TypeOf((*MockTransferBuilder)(nil).WithExternalID), arg0)
}

// WithIdempotencyKey mocks base method.
func (m *MockTransferBuilder) WithIdempotencyKey(arg0 string) builders.TransferBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithIdempotencyKey", arg0)
	ret0, _ := ret[0].(builders.TransferBuilder)
	return ret0
}

// WithIdempotencyKey indicates an expected call of WithIdempotencyKey.
func (mr *MockTransferBuilderMockRecorder) WithIdempotencyKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithIdempotencyKey", reflect.TypeOf((*MockTransferBuilder)(nil).WithIdempotencyKey), arg0)
}

// WithLedger mocks base method.
func (m *MockTransferBuilder) WithLedger(arg0 string) builders.TransferBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithLedger", arg0)
	ret0, _ := ret[0].(builders.TransferBuilder)
	return ret0
}

// WithLedger indicates an expected call of WithLedger.
func (mr *MockTransferBuilderMockRecorder) WithLedger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLedger", reflect.TypeOf((*MockTransferBuilder)(nil).WithLedger), arg0)
}

// WithMetadata mocks base method.
func (m *MockTransferBuilder) WithMetadata(arg0 map[string]interface{}) builders.TransferBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithMetadata", arg0)
	ret0, _ := ret[0].(builders.TransferBuilder)
	return ret0
}

// WithMetadata indicates an expected call of WithMetadata.
func (mr *MockTransferBuilderMockRecorder) WithMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithMetadata", reflect.TypeOf((*MockTransferBuilder)(nil).WithMetadata), arg0)
}

// WithOrganization mocks base method.
func (m *MockTransferBuilder) WithOrganization(arg0 string) builders.TransferBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithOrganization", arg0)
	ret0, _ := ret[0].(builders.TransferBuilder)
	return ret0
}

// WithOrganization indicates an expected call of WithOrganization.
func (mr *MockTransferBuilderMockRecorder) WithOrganization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithOrganization", reflect.TypeOf((*MockTransferBuilder)(nil).WithOrganization), arg0)
}

// WithTag mocks base method.
func (m *MockTransferBuilder) WithTag(arg0 string) builders.TransferBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTag", arg0)
	ret0, _ := ret[0].(builders.TransferBuilder)
	return ret0
}

// WithTag indicates an expected call of WithTag.
func (mr *MockTransferBuilderMockRecorder) WithTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTag", reflect.TypeOf((*MockTransferBuilder)(nil).WithTag), arg0)
}

// WithTags mocks base method.
func (m *MockTransferBuilder) WithTags(arg0 []string) builders.TransferBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTags", arg0)
	ret0, _ := ret[0].(builders.TransferBuilder)
	return ret0
}

// WithTags indicates an expected call of WithTags.
func (mr *MockTransferBuilderMockRecorder) WithTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTags", reflect.TypeOf((*MockTransferBuilder)(nil).WithTags), arg0)
}

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}

	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockClientInterface) CreateTransaction(arg0 context.Context, arg1, arg2 string, arg3 *models.TransactionDSLInput) (*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockClientInterfaceMockRecorder) CreateTransaction(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockClientInterface)(nil).CreateTransaction), arg0, arg1, arg2, arg3)
}
