// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/LerianStudio/midaz/sdks/go-sdk/builders (interfaces: LedgerBuilder,LedgerClientInterface,LedgerUpdateBuilder)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	builders "github.com/LerianStudio/midaz/sdks/go-sdk/builders"
	models "github.com/LerianStudio/midaz/sdks/go-sdk/models"
	gomock "github.com/golang/mock/gomock"
)

// MockLedgerBuilder is a mock of LedgerBuilder interface.
type MockLedgerBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockLedgerBuilderMockRecorder
}

// MockLedgerBuilderMockRecorder is the mock recorder for MockLedgerBuilder.
type MockLedgerBuilderMockRecorder struct {
	mock *MockLedgerBuilder
}

// NewMockLedgerBuilder creates a new mock instance.
func NewMockLedgerBuilder(ctrl *gomock.Controller) *MockLedgerBuilder {
	mock := &MockLedgerBuilder{ctrl: ctrl}

	mock.recorder = &MockLedgerBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLedgerBuilder) EXPECT() *MockLedgerBuilderMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLedgerBuilder) Create(arg0 context.Context) (*models.Ledger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*models.Ledger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockLedgerBuilderMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLedgerBuilder)(nil).Create), arg0)
}

// WithMetadata mocks base method.
func (m *MockLedgerBuilder) WithMetadata(arg0 map[string]interface{}) builders.LedgerBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithMetadata", arg0)
	ret0, _ := ret[0].(builders.LedgerBuilder)
	return ret0
}

// WithMetadata indicates an expected call of WithMetadata.
func (mr *MockLedgerBuilderMockRecorder) WithMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithMetadata", reflect.TypeOf((*MockLedgerBuilder)(nil).WithMetadata), arg0)
}

// WithName mocks base method.
func (m *MockLedgerBuilder) WithName(arg0 string) builders.LedgerBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithName", arg0)
	ret0, _ := ret[0].(builders.LedgerBuilder)
	return ret0
}

// WithName indicates an expected call of WithName.
func (mr *MockLedgerBuilderMockRecorder) WithName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithName", reflect.TypeOf((*MockLedgerBuilder)(nil).WithName), arg0)
}

// WithOrganization mocks base method.
func (m *MockLedgerBuilder) WithOrganization(arg0 string) builders.LedgerBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithOrganization", arg0)
	ret0, _ := ret[0].(builders.LedgerBuilder)
	return ret0
}

// WithOrganization indicates an expected call of WithOrganization.
func (mr *MockLedgerBuilderMockRecorder) WithOrganization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithOrganization", reflect.TypeOf((*MockLedgerBuilder)(nil).WithOrganization), arg0)
}

// WithStatus mocks base method.
func (m *MockLedgerBuilder) WithStatus(arg0 string) builders.LedgerBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithStatus", arg0)
	ret0, _ := ret[0].(builders.LedgerBuilder)
	return ret0
}

// WithStatus indicates an expected call of WithStatus.
func (mr *MockLedgerBuilderMockRecorder) WithStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStatus", reflect.TypeOf((*MockLedgerBuilder)(nil).WithStatus), arg0)
}

// WithTag mocks base method.
func (m *MockLedgerBuilder) WithTag(arg0 string) builders.LedgerBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTag", arg0)
	ret0, _ := ret[0].(builders.LedgerBuilder)
	return ret0
}

// WithTag indicates an expected call of WithTag.
func (mr *MockLedgerBuilderMockRecorder) WithTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTag", reflect.TypeOf((*MockLedgerBuilder)(nil).WithTag), arg0)
}

// WithTags mocks base method.
func (m *MockLedgerBuilder) WithTags(arg0 []string) builders.LedgerBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTags", arg0)
	ret0, _ := ret[0].(builders.LedgerBuilder)
	return ret0
}

// WithTags indicates an expected call of WithTags.
func (mr *MockLedgerBuilderMockRecorder) WithTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTags", reflect.TypeOf((*MockLedgerBuilder)(nil).WithTags), arg0)
}

// MockLedgerClientInterface is a mock of LedgerClientInterface interface.
type MockLedgerClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLedgerClientInterfaceMockRecorder
}

// MockLedgerClientInterfaceMockRecorder is the mock recorder for MockLedgerClientInterface.
type MockLedgerClientInterfaceMockRecorder struct {
	mock *MockLedgerClientInterface
}

// NewMockLedgerClientInterface creates a new mock instance.
func NewMockLedgerClientInterface(ctrl *gomock.Controller) *MockLedgerClientInterface {
	mock := &MockLedgerClientInterface{ctrl: ctrl}

	mock.recorder = &MockLedgerClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLedgerClientInterface) EXPECT() *MockLedgerClientInterfaceMockRecorder {
	return m.recorder
}

// CreateLedger mocks base method.
func (m *MockLedgerClientInterface) CreateLedger(arg0 context.Context, arg1 string, arg2 *models.CreateLedgerInput) (*models.Ledger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLedger", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Ledger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLedger indicates an expected call of CreateLedger.
func (mr *MockLedgerClientInterfaceMockRecorder) CreateLedger(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLedger", reflect.TypeOf((*MockLedgerClientInterface)(nil).CreateLedger), arg0, arg1, arg2)
}

// UpdateLedger mocks base method.
func (m *MockLedgerClientInterface) UpdateLedger(arg0 context.Context, arg1, arg2 string, arg3 *models.UpdateLedgerInput) (*models.Ledger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLedger", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.Ledger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLedger indicates an expected call of UpdateLedger.
func (mr *MockLedgerClientInterfaceMockRecorder) UpdateLedger(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLedger", reflect.TypeOf((*MockLedgerClientInterface)(nil).UpdateLedger), arg0, arg1, arg2, arg3)
}

// MockLedgerUpdateBuilder is a mock of LedgerUpdateBuilder interface.
type MockLedgerUpdateBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockLedgerUpdateBuilderMockRecorder
}

// MockLedgerUpdateBuilderMockRecorder is the mock recorder for MockLedgerUpdateBuilder.
type MockLedgerUpdateBuilderMockRecorder struct {
	mock *MockLedgerUpdateBuilder
}

// NewMockLedgerUpdateBuilder creates a new mock instance.
func NewMockLedgerUpdateBuilder(ctrl *gomock.Controller) *MockLedgerUpdateBuilder {
	mock := &MockLedgerUpdateBuilder{ctrl: ctrl}

	mock.recorder = &MockLedgerUpdateBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLedgerUpdateBuilder) EXPECT() *MockLedgerUpdateBuilderMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockLedgerUpdateBuilder) Update(arg0 context.Context) (*models.Ledger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*models.Ledger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockLedgerUpdateBuilderMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockLedgerUpdateBuilder)(nil).Update), arg0)
}

// WithMetadata mocks base method.
func (m *MockLedgerUpdateBuilder) WithMetadata(arg0 map[string]interface{}) builders.LedgerUpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithMetadata", arg0)
	ret0, _ := ret[0].(builders.LedgerUpdateBuilder)
	return ret0
}

// WithMetadata indicates an expected call of WithMetadata.
func (mr *MockLedgerUpdateBuilderMockRecorder) WithMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithMetadata", reflect.TypeOf((*MockLedgerUpdateBuilder)(nil).WithMetadata), arg0)
}

// WithName mocks base method.
func (m *MockLedgerUpdateBuilder) WithName(arg0 string) builders.LedgerUpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithName", arg0)
	ret0, _ := ret[0].(builders.LedgerUpdateBuilder)
	return ret0
}

// WithName indicates an expected call of WithName.
func (mr *MockLedgerUpdateBuilderMockRecorder) WithName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithName", reflect.TypeOf((*MockLedgerUpdateBuilder)(nil).WithName), arg0)
}

// WithOrganization mocks base method.
func (m *MockLedgerUpdateBuilder) WithOrganization(arg0 string) builders.LedgerUpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithOrganization", arg0)
	ret0, _ := ret[0].(builders.LedgerUpdateBuilder)
	return ret0
}

// WithOrganization indicates an expected call of WithOrganization.
func (mr *MockLedgerUpdateBuilderMockRecorder) WithOrganization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithOrganization", reflect.TypeOf((*MockLedgerUpdateBuilder)(nil).WithOrganization), arg0)
}

// WithStatus mocks base method.
func (m *MockLedgerUpdateBuilder) WithStatus(arg0 string) builders.LedgerUpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithStatus", arg0)
	ret0, _ := ret[0].(builders.LedgerUpdateBuilder)
	return ret0
}

// WithStatus indicates an expected call of WithStatus.
func (mr *MockLedgerUpdateBuilderMockRecorder) WithStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStatus", reflect.TypeOf((*MockLedgerUpdateBuilder)(nil).WithStatus), arg0)
}

// WithTag mocks base method.
func (m *MockLedgerUpdateBuilder) WithTag(arg0 string) builders.LedgerUpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTag", arg0)
	ret0, _ := ret[0].(builders.LedgerUpdateBuilder)
	return ret0
}

// WithTag indicates an expected call of WithTag.
func (mr *MockLedgerUpdateBuilderMockRecorder) WithTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTag", reflect.TypeOf((*MockLedgerUpdateBuilder)(nil).WithTag), arg0)
}

// WithTags mocks base method.
func (m *MockLedgerUpdateBuilder) WithTags(arg0 []string) builders.LedgerUpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTags", arg0)
	ret0, _ := ret[0].(builders.LedgerUpdateBuilder)
	return ret0
}

// WithTags indicates an expected call of WithTags.
func (mr *MockLedgerUpdateBuilderMockRecorder) WithTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTags", reflect.TypeOf((*MockLedgerUpdateBuilder)(nil).WithTags), arg0)
}
