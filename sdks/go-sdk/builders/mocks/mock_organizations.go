// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/LerianStudio/midaz/sdks/go-sdk/builders (interfaces: OrganizationBuilder,OrganizationClientInterface,OrganizationUpdateBuilder)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	mmodel "github.com/LerianStudio/midaz/pkg/mmodel"
	builders "github.com/LerianStudio/midaz/sdks/go-sdk/builders"
	models "github.com/LerianStudio/midaz/sdks/go-sdk/models"
	gomock "github.com/golang/mock/gomock"
)

// MockOrganizationBuilder is a mock of OrganizationBuilder interface.
type MockOrganizationBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationBuilderMockRecorder
}

// MockOrganizationBuilderMockRecorder is the mock recorder for MockOrganizationBuilder.
type MockOrganizationBuilderMockRecorder struct {
	mock *MockOrganizationBuilder
}

// NewMockOrganizationBuilder creates a new mock instance.
func NewMockOrganizationBuilder(ctrl *gomock.Controller) *MockOrganizationBuilder {
	mock := &MockOrganizationBuilder{ctrl: ctrl}

	mock.recorder = &MockOrganizationBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationBuilder) EXPECT() *MockOrganizationBuilderMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOrganizationBuilder) Create(arg0 context.Context) (*models.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*models.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOrganizationBuilderMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrganizationBuilder)(nil).Create), arg0)
}

// WithAddress mocks base method.
func (m *MockOrganizationBuilder) WithAddress(arg0, arg1, arg2, arg3, arg4 string) builders.OrganizationBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithAddress", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(builders.OrganizationBuilder)
	return ret0
}

// WithAddress indicates an expected call of WithAddress.
func (mr *MockOrganizationBuilderMockRecorder) WithAddress(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithAddress", reflect.TypeOf((*MockOrganizationBuilder)(nil).WithAddress), arg0, arg1, arg2, arg3, arg4)
}

// WithLegalDocument mocks base method.
func (m *MockOrganizationBuilder) WithLegalDocument(arg0 string) builders.OrganizationBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithLegalDocument", arg0)
	ret0, _ := ret[0].(builders.OrganizationBuilder)
	return ret0
}

// WithLegalDocument indicates an expected call of WithLegalDocument.
func (mr *MockOrganizationBuilderMockRecorder) WithLegalDocument(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLegalDocument", reflect.TypeOf((*MockOrganizationBuilder)(nil).WithLegalDocument), arg0)
}

// WithLegalName mocks base method.
func (m *MockOrganizationBuilder) WithLegalName(arg0 string) builders.OrganizationBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithLegalName", arg0)
	ret0, _ := ret[0].(builders.OrganizationBuilder)
	return ret0
}

// WithLegalName indicates an expected call of WithLegalName.
func (mr *MockOrganizationBuilderMockRecorder) WithLegalName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLegalName", reflect.TypeOf((*MockOrganizationBuilder)(nil).WithLegalName), arg0)
}

// WithMetadata mocks base method.
func (m *MockOrganizationBuilder) WithMetadata(arg0 map[string]interface{}) builders.OrganizationBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithMetadata", arg0)
	ret0, _ := ret[0].(builders.OrganizationBuilder)
	return ret0
}

// WithMetadata indicates an expected call of WithMetadata.
func (mr *MockOrganizationBuilderMockRecorder) WithMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithMetadata", reflect.TypeOf((*MockOrganizationBuilder)(nil).WithMetadata), arg0)
}

// WithStatus mocks base method.
func (m *MockOrganizationBuilder) WithStatus(arg0 string) builders.OrganizationBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithStatus", arg0)
	ret0, _ := ret[0].(builders.OrganizationBuilder)
	return ret0
}

// WithStatus indicates an expected call of WithStatus.
func (mr *MockOrganizationBuilderMockRecorder) WithStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStatus", reflect.TypeOf((*MockOrganizationBuilder)(nil).WithStatus), arg0)
}

// WithTag mocks base method.
func (m *MockOrganizationBuilder) WithTag(arg0 string) builders.OrganizationBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTag", arg0)
	ret0, _ := ret[0].(builders.OrganizationBuilder)
	return ret0
}

// WithTag indicates an expected call of WithTag.
func (mr *MockOrganizationBuilderMockRecorder) WithTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTag", reflect.TypeOf((*MockOrganizationBuilder)(nil).WithTag), arg0)
}

// WithTags mocks base method.
func (m *MockOrganizationBuilder) WithTags(arg0 []string) builders.OrganizationBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTags", arg0)
	ret0, _ := ret[0].(builders.OrganizationBuilder)
	return ret0
}

// WithTags indicates an expected call of WithTags.
func (mr *MockOrganizationBuilderMockRecorder) WithTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTags", reflect.TypeOf((*MockOrganizationBuilder)(nil).WithTags), arg0)
}

// MockOrganizationClientInterface is a mock of OrganizationClientInterface interface.
type MockOrganizationClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationClientInterfaceMockRecorder
}

// MockOrganizationClientInterfaceMockRecorder is the mock recorder for MockOrganizationClientInterface.
type MockOrganizationClientInterfaceMockRecorder struct {
	mock *MockOrganizationClientInterface
}

// NewMockOrganizationClientInterface creates a new mock instance.
func NewMockOrganizationClientInterface(ctrl *gomock.Controller) *MockOrganizationClientInterface {
	mock := &MockOrganizationClientInterface{ctrl: ctrl}

	mock.recorder = &MockOrganizationClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationClientInterface) EXPECT() *MockOrganizationClientInterfaceMockRecorder {
	return m.recorder
}

// CreateOrganization mocks base method.
func (m *MockOrganizationClientInterface) CreateOrganization(arg0 context.Context, arg1 *models.CreateOrganizationInput) (*models.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganization", arg0, arg1)
	ret0, _ := ret[0].(*models.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganization indicates an expected call of CreateOrganization.
func (mr *MockOrganizationClientInterfaceMockRecorder) CreateOrganization(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganization", reflect.TypeOf((*MockOrganizationClientInterface)(nil).CreateOrganization), arg0, arg1)
}

// UpdateOrganization mocks base method.
func (m *MockOrganizationClientInterface) UpdateOrganization(arg0 context.Context, arg1 string, arg2 *mmodel.UpdateOrganizationInput) (*models.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganization", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganization indicates an expected call of UpdateOrganization.
func (mr *MockOrganizationClientInterfaceMockRecorder) UpdateOrganization(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganization", reflect.TypeOf((*MockOrganizationClientInterface)(nil).UpdateOrganization), arg0, arg1, arg2)
}

// MockOrganizationUpdateBuilder is a mock of OrganizationUpdateBuilder interface.
type MockOrganizationUpdateBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationUpdateBuilderMockRecorder
}

// MockOrganizationUpdateBuilderMockRecorder is the mock recorder for MockOrganizationUpdateBuilder.
type MockOrganizationUpdateBuilderMockRecorder struct {
	mock *MockOrganizationUpdateBuilder
}

// NewMockOrganizationUpdateBuilder creates a new mock instance.
func NewMockOrganizationUpdateBuilder(ctrl *gomock.Controller) *MockOrganizationUpdateBuilder {
	mock := &MockOrganizationUpdateBuilder{ctrl: ctrl}

	mock.recorder = &MockOrganizationUpdateBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationUpdateBuilder) EXPECT() *MockOrganizationUpdateBuilderMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockOrganizationUpdateBuilder) Update(arg0 context.Context) (*models.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*models.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockOrganizationUpdateBuilderMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOrganizationUpdateBuilder)(nil).Update), arg0)
}

// WithAddress mocks base method.
func (m *MockOrganizationUpdateBuilder) WithAddress(arg0, arg1, arg2, arg3, arg4 string) builders.OrganizationUpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithAddress", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(builders.OrganizationUpdateBuilder)
	return ret0
}

// WithAddress indicates an expected call of WithAddress.
func (mr *MockOrganizationUpdateBuilderMockRecorder) WithAddress(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithAddress", reflect.TypeOf((*MockOrganizationUpdateBuilder)(nil).WithAddress), arg0, arg1, arg2, arg3, arg4)
}

// WithLegalDocument mocks base method.
func (m *MockOrganizationUpdateBuilder) WithLegalDocument(arg0 string) builders.OrganizationUpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithLegalDocument", arg0)
	ret0, _ := ret[0].(builders.OrganizationUpdateBuilder)
	return ret0
}

// WithLegalDocument indicates an expected call of WithLegalDocument.
func (mr *MockOrganizationUpdateBuilderMockRecorder) WithLegalDocument(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLegalDocument", reflect.TypeOf((*MockOrganizationUpdateBuilder)(nil).WithLegalDocument), arg0)
}

// WithLegalName mocks base method.
func (m *MockOrganizationUpdateBuilder) WithLegalName(arg0 string) builders.OrganizationUpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithLegalName", arg0)
	ret0, _ := ret[0].(builders.OrganizationUpdateBuilder)
	return ret0
}

// WithLegalName indicates an expected call of WithLegalName.
func (mr *MockOrganizationUpdateBuilderMockRecorder) WithLegalName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLegalName", reflect.TypeOf((*MockOrganizationUpdateBuilder)(nil).WithLegalName), arg0)
}

// WithMetadata mocks base method.
func (m *MockOrganizationUpdateBuilder) WithMetadata(arg0 map[string]interface{}) builders.OrganizationUpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithMetadata", arg0)
	ret0, _ := ret[0].(builders.OrganizationUpdateBuilder)
	return ret0
}

// WithMetadata indicates an expected call of WithMetadata.
func (mr *MockOrganizationUpdateBuilderMockRecorder) WithMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithMetadata", reflect.TypeOf((*MockOrganizationUpdateBuilder)(nil).WithMetadata), arg0)
}

// WithStatus mocks base method.
func (m *MockOrganizationUpdateBuilder) WithStatus(arg0 string) builders.OrganizationUpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithStatus", arg0)
	ret0, _ := ret[0].(builders.OrganizationUpdateBuilder)
	return ret0
}

// WithStatus indicates an expected call of WithStatus.
func (mr *MockOrganizationUpdateBuilderMockRecorder) WithStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStatus", reflect.TypeOf((*MockOrganizationUpdateBuilder)(nil).WithStatus), arg0)
}

// WithTag mocks base method.
func (m *MockOrganizationUpdateBuilder) WithTag(arg0 string) builders.OrganizationUpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTag", arg0)
	ret0, _ := ret[0].(builders.OrganizationUpdateBuilder)
	return ret0
}

// WithTag indicates an expected call of WithTag.
func (mr *MockOrganizationUpdateBuilderMockRecorder) WithTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTag", reflect.TypeOf((*MockOrganizationUpdateBuilder)(nil).WithTag), arg0)
}

// WithTags mocks base method.
func (m *MockOrganizationUpdateBuilder) WithTags(arg0 []string) builders.OrganizationUpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTags", arg0)
	ret0, _ := ret[0].(builders.OrganizationUpdateBuilder)
	return ret0
}

// WithTags indicates an expected call of WithTags.
func (mr *MockOrganizationUpdateBuilderMockRecorder) WithTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTags", reflect.TypeOf((*MockOrganizationUpdateBuilder)(nil).WithTags), arg0)
}
