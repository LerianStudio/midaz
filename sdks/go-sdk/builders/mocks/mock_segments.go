// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/LerianStudio/midaz/sdks/go-sdk/builders (interfaces: SegmentBuilder,SegmentClientInterface,SegmentUpdateBuilder)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	builders "github.com/LerianStudio/midaz/sdks/go-sdk/builders"
	models "github.com/LerianStudio/midaz/sdks/go-sdk/models"
	gomock "github.com/golang/mock/gomock"
)

// MockSegmentBuilder is a mock of SegmentBuilder interface.
type MockSegmentBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentBuilderMockRecorder
}

// MockSegmentBuilderMockRecorder is the mock recorder for MockSegmentBuilder.
type MockSegmentBuilderMockRecorder struct {
	mock *MockSegmentBuilder
}

// NewMockSegmentBuilder creates a new mock instance.
func NewMockSegmentBuilder(ctrl *gomock.Controller) *MockSegmentBuilder {
	mock := &MockSegmentBuilder{ctrl: ctrl}

	mock.recorder = &MockSegmentBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegmentBuilder) EXPECT() *MockSegmentBuilderMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSegmentBuilder) Create(arg0 context.Context) (*models.Segment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*models.Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSegmentBuilderMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSegmentBuilder)(nil).Create), arg0)
}

// WithLedger mocks base method.
func (m *MockSegmentBuilder) WithLedger(arg0 string) builders.SegmentBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithLedger", arg0)
	ret0, _ := ret[0].(builders.SegmentBuilder)
	return ret0
}

// WithLedger indicates an expected call of WithLedger.
func (mr *MockSegmentBuilderMockRecorder) WithLedger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLedger", reflect.TypeOf((*MockSegmentBuilder)(nil).WithLedger), arg0)
}

// WithMetadata mocks base method.
func (m *MockSegmentBuilder) WithMetadata(arg0 map[string]interface{}) builders.SegmentBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithMetadata", arg0)
	ret0, _ := ret[0].(builders.SegmentBuilder)
	return ret0
}

// WithMetadata indicates an expected call of WithMetadata.
func (mr *MockSegmentBuilderMockRecorder) WithMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithMetadata", reflect.TypeOf((*MockSegmentBuilder)(nil).WithMetadata), arg0)
}

// WithName mocks base method.
func (m *MockSegmentBuilder) WithName(arg0 string) builders.SegmentBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithName", arg0)
	ret0, _ := ret[0].(builders.SegmentBuilder)
	return ret0
}

// WithName indicates an expected call of WithName.
func (mr *MockSegmentBuilderMockRecorder) WithName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithName", reflect.TypeOf((*MockSegmentBuilder)(nil).WithName), arg0)
}

// WithOrganization mocks base method.
func (m *MockSegmentBuilder) WithOrganization(arg0 string) builders.SegmentBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithOrganization", arg0)
	ret0, _ := ret[0].(builders.SegmentBuilder)
	return ret0
}

// WithOrganization indicates an expected call of WithOrganization.
func (mr *MockSegmentBuilderMockRecorder) WithOrganization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithOrganization", reflect.TypeOf((*MockSegmentBuilder)(nil).WithOrganization), arg0)
}

// WithPortfolio mocks base method.
func (m *MockSegmentBuilder) WithPortfolio(arg0 string) builders.SegmentBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithPortfolio", arg0)
	ret0, _ := ret[0].(builders.SegmentBuilder)
	return ret0
}

// WithPortfolio indicates an expected call of WithPortfolio.
func (mr *MockSegmentBuilderMockRecorder) WithPortfolio(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithPortfolio", reflect.TypeOf((*MockSegmentBuilder)(nil).WithPortfolio), arg0)
}

// WithStatus mocks base method.
func (m *MockSegmentBuilder) WithStatus(arg0 string) builders.SegmentBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithStatus", arg0)
	ret0, _ := ret[0].(builders.SegmentBuilder)
	return ret0
}

// WithStatus indicates an expected call of WithStatus.
func (mr *MockSegmentBuilderMockRecorder) WithStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStatus", reflect.TypeOf((*MockSegmentBuilder)(nil).WithStatus), arg0)
}

// WithTag mocks base method.
func (m *MockSegmentBuilder) WithTag(arg0 string) builders.SegmentBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTag", arg0)
	ret0, _ := ret[0].(builders.SegmentBuilder)
	return ret0
}

// WithTag indicates an expected call of WithTag.
func (mr *MockSegmentBuilderMockRecorder) WithTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTag", reflect.TypeOf((*MockSegmentBuilder)(nil).WithTag), arg0)
}

// WithTags mocks base method.
func (m *MockSegmentBuilder) WithTags(arg0 []string) builders.SegmentBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTags", arg0)
	ret0, _ := ret[0].(builders.SegmentBuilder)
	return ret0
}

// WithTags indicates an expected call of WithTags.
func (mr *MockSegmentBuilderMockRecorder) WithTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTags", reflect.TypeOf((*MockSegmentBuilder)(nil).WithTags), arg0)
}

// MockSegmentClientInterface is a mock of SegmentClientInterface interface.
type MockSegmentClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentClientInterfaceMockRecorder
}

// MockSegmentClientInterfaceMockRecorder is the mock recorder for MockSegmentClientInterface.
type MockSegmentClientInterfaceMockRecorder struct {
	mock *MockSegmentClientInterface
}

// NewMockSegmentClientInterface creates a new mock instance.
func NewMockSegmentClientInterface(ctrl *gomock.Controller) *MockSegmentClientInterface {
	mock := &MockSegmentClientInterface{ctrl: ctrl}

	mock.recorder = &MockSegmentClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegmentClientInterface) EXPECT() *MockSegmentClientInterfaceMockRecorder {
	return m.recorder
}

// CreateSegment mocks base method.
func (m *MockSegmentClientInterface) CreateSegment(arg0 context.Context, arg1, arg2, arg3 string, arg4 *models.CreateSegmentInput) (*models.Segment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSegment", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*models.Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSegment indicates an expected call of CreateSegment.
func (mr *MockSegmentClientInterfaceMockRecorder) CreateSegment(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSegment", reflect.TypeOf((*MockSegmentClientInterface)(nil).CreateSegment), arg0, arg1, arg2, arg3, arg4)
}

// UpdateSegment mocks base method.
func (m *MockSegmentClientInterface) UpdateSegment(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *models.UpdateSegmentInput) (*models.Segment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSegment", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*models.Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSegment indicates an expected call of UpdateSegment.
func (mr *MockSegmentClientInterfaceMockRecorder) UpdateSegment(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSegment", reflect.TypeOf((*MockSegmentClientInterface)(nil).UpdateSegment), arg0, arg1, arg2, arg3, arg4, arg5)
}

// MockSegmentUpdateBuilder is a mock of SegmentUpdateBuilder interface.
type MockSegmentUpdateBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentUpdateBuilderMockRecorder
}

// MockSegmentUpdateBuilderMockRecorder is the mock recorder for MockSegmentUpdateBuilder.
type MockSegmentUpdateBuilderMockRecorder struct {
	mock *MockSegmentUpdateBuilder
}

// NewMockSegmentUpdateBuilder creates a new mock instance.
func NewMockSegmentUpdateBuilder(ctrl *gomock.Controller) *MockSegmentUpdateBuilder {
	mock := &MockSegmentUpdateBuilder{ctrl: ctrl}

	mock.recorder = &MockSegmentUpdateBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegmentUpdateBuilder) EXPECT() *MockSegmentUpdateBuilderMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockSegmentUpdateBuilder) Update(arg0 context.Context) (*models.Segment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*models.Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSegmentUpdateBuilderMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSegmentUpdateBuilder)(nil).Update), arg0)
}

// WithMetadata mocks base method.
func (m *MockSegmentUpdateBuilder) WithMetadata(arg0 map[string]interface{}) builders.SegmentUpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithMetadata", arg0)
	ret0, _ := ret[0].(builders.SegmentUpdateBuilder)
	return ret0
}

// WithMetadata indicates an expected call of WithMetadata.
func (mr *MockSegmentUpdateBuilderMockRecorder) WithMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithMetadata", reflect.TypeOf((*MockSegmentUpdateBuilder)(nil).WithMetadata), arg0)
}

// WithName mocks base method.
func (m *MockSegmentUpdateBuilder) WithName(arg0 string) builders.SegmentUpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithName", arg0)
	ret0, _ := ret[0].(builders.SegmentUpdateBuilder)
	return ret0
}

// WithName indicates an expected call of WithName.
func (mr *MockSegmentUpdateBuilderMockRecorder) WithName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithName", reflect.TypeOf((*MockSegmentUpdateBuilder)(nil).WithName), arg0)
}

// WithStatus mocks base method.
func (m *MockSegmentUpdateBuilder) WithStatus(arg0 string) builders.SegmentUpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithStatus", arg0)
	ret0, _ := ret[0].(builders.SegmentUpdateBuilder)
	return ret0
}

// WithStatus indicates an expected call of WithStatus.
func (mr *MockSegmentUpdateBuilderMockRecorder) WithStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStatus", reflect.TypeOf((*MockSegmentUpdateBuilder)(nil).WithStatus), arg0)
}

// WithTag mocks base method.
func (m *MockSegmentUpdateBuilder) WithTag(arg0 string) builders.SegmentUpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTag", arg0)
	ret0, _ := ret[0].(builders.SegmentUpdateBuilder)
	return ret0
}

// WithTag indicates an expected call of WithTag.
func (mr *MockSegmentUpdateBuilderMockRecorder) WithTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTag", reflect.TypeOf((*MockSegmentUpdateBuilder)(nil).WithTag), arg0)
}

// WithTags mocks base method.
func (m *MockSegmentUpdateBuilder) WithTags(arg0 []string) builders.SegmentUpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTags", arg0)
	ret0, _ := ret[0].(builders.SegmentUpdateBuilder)
	return ret0
}

// WithTags indicates an expected call of WithTags.
func (mr *MockSegmentUpdateBuilderMockRecorder) WithTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTags", reflect.TypeOf((*MockSegmentUpdateBuilder)(nil).WithTags), arg0)
}
