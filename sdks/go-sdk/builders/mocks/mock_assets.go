// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/LerianStudio/midaz/sdks/go-sdk/builders (interfaces: AssetBuilder,AssetClientInterface,AssetUpdateBuilder)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	builders "github.com/LerianStudio/midaz/sdks/go-sdk/builders"
	models "github.com/LerianStudio/midaz/sdks/go-sdk/models"
	gomock "github.com/golang/mock/gomock"
)

// MockAssetBuilder is a mock of AssetBuilder interface.
type MockAssetBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockAssetBuilderMockRecorder
}

// MockAssetBuilderMockRecorder is the mock recorder for MockAssetBuilder.
type MockAssetBuilderMockRecorder struct {
	mock *MockAssetBuilder
}

// NewMockAssetBuilder creates a new mock instance.
func NewMockAssetBuilder(ctrl *gomock.Controller) *MockAssetBuilder {
	mock := &MockAssetBuilder{ctrl: ctrl}

	mock.recorder = &MockAssetBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssetBuilder) EXPECT() *MockAssetBuilderMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAssetBuilder) Create(arg0 context.Context) (*models.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*models.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAssetBuilderMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAssetBuilder)(nil).Create), arg0)
}

// WithCode mocks base method.
func (m *MockAssetBuilder) WithCode(arg0 string) builders.AssetBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithCode", arg0)
	ret0, _ := ret[0].(builders.AssetBuilder)
	return ret0
}

// WithCode indicates an expected call of WithCode.
func (mr *MockAssetBuilderMockRecorder) WithCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithCode", reflect.TypeOf((*MockAssetBuilder)(nil).WithCode), arg0)
}

// WithLedger mocks base method.
func (m *MockAssetBuilder) WithLedger(arg0 string) builders.AssetBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithLedger", arg0)
	ret0, _ := ret[0].(builders.AssetBuilder)
	return ret0
}

// WithLedger indicates an expected call of WithLedger.
func (mr *MockAssetBuilderMockRecorder) WithLedger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLedger", reflect.TypeOf((*MockAssetBuilder)(nil).WithLedger), arg0)
}

// WithMetadata mocks base method.
func (m *MockAssetBuilder) WithMetadata(arg0 map[string]interface{}) builders.AssetBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithMetadata", arg0)
	ret0, _ := ret[0].(builders.AssetBuilder)
	return ret0
}

// WithMetadata indicates an expected call of WithMetadata.
func (mr *MockAssetBuilderMockRecorder) WithMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithMetadata", reflect.TypeOf((*MockAssetBuilder)(nil).WithMetadata), arg0)
}

// WithName mocks base method.
func (m *MockAssetBuilder) WithName(arg0 string) builders.AssetBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithName", arg0)
	ret0, _ := ret[0].(builders.AssetBuilder)
	return ret0
}

// WithName indicates an expected call of WithName.
func (mr *MockAssetBuilderMockRecorder) WithName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithName", reflect.TypeOf((*MockAssetBuilder)(nil).WithName), arg0)
}

// WithOrganization mocks base method.
func (m *MockAssetBuilder) WithOrganization(arg0 string) builders.AssetBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithOrganization", arg0)
	ret0, _ := ret[0].(builders.AssetBuilder)
	return ret0
}

// WithOrganization indicates an expected call of WithOrganization.
func (mr *MockAssetBuilderMockRecorder) WithOrganization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithOrganization", reflect.TypeOf((*MockAssetBuilder)(nil).WithOrganization), arg0)
}

// WithStatus mocks base method.
func (m *MockAssetBuilder) WithStatus(arg0 string) builders.AssetBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithStatus", arg0)
	ret0, _ := ret[0].(builders.AssetBuilder)
	return ret0
}

// WithStatus indicates an expected call of WithStatus.
func (mr *MockAssetBuilderMockRecorder) WithStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStatus", reflect.TypeOf((*MockAssetBuilder)(nil).WithStatus), arg0)
}

// WithTag mocks base method.
func (m *MockAssetBuilder) WithTag(arg0 string) builders.AssetBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTag", arg0)
	ret0, _ := ret[0].(builders.AssetBuilder)
	return ret0
}

// WithTag indicates an expected call of WithTag.
func (mr *MockAssetBuilderMockRecorder) WithTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTag", reflect.TypeOf((*MockAssetBuilder)(nil).WithTag), arg0)
}

// WithTags mocks base method.
func (m *MockAssetBuilder) WithTags(arg0 []string) builders.AssetBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTags", arg0)
	ret0, _ := ret[0].(builders.AssetBuilder)
	return ret0
}

// WithTags indicates an expected call of WithTags.
func (mr *MockAssetBuilderMockRecorder) WithTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTags", reflect.TypeOf((*MockAssetBuilder)(nil).WithTags), arg0)
}

// WithType mocks base method.
func (m *MockAssetBuilder) WithType(arg0 string) builders.AssetBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithType", arg0)
	ret0, _ := ret[0].(builders.AssetBuilder)
	return ret0
}

// WithType indicates an expected call of WithType.
func (mr *MockAssetBuilderMockRecorder) WithType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithType", reflect.TypeOf((*MockAssetBuilder)(nil).WithType), arg0)
}

// MockAssetClientInterface is a mock of AssetClientInterface interface.
type MockAssetClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAssetClientInterfaceMockRecorder
}

// MockAssetClientInterfaceMockRecorder is the mock recorder for MockAssetClientInterface.
type MockAssetClientInterfaceMockRecorder struct {
	mock *MockAssetClientInterface
}

// NewMockAssetClientInterface creates a new mock instance.
func NewMockAssetClientInterface(ctrl *gomock.Controller) *MockAssetClientInterface {
	mock := &MockAssetClientInterface{ctrl: ctrl}

	mock.recorder = &MockAssetClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssetClientInterface) EXPECT() *MockAssetClientInterfaceMockRecorder {
	return m.recorder
}

// CreateAsset mocks base method.
func (m *MockAssetClientInterface) CreateAsset(arg0 context.Context, arg1, arg2 string, arg3 *models.CreateAssetInput) (*models.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAsset", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAsset indicates an expected call of CreateAsset.
func (mr *MockAssetClientInterfaceMockRecorder) CreateAsset(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAsset", reflect.TypeOf((*MockAssetClientInterface)(nil).CreateAsset), arg0, arg1, arg2, arg3)
}

// UpdateAsset mocks base method.
func (m *MockAssetClientInterface) UpdateAsset(arg0 context.Context, arg1, arg2, arg3 string, arg4 *models.UpdateAssetInput) (*models.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAsset", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*models.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAsset indicates an expected call of UpdateAsset.
func (mr *MockAssetClientInterfaceMockRecorder) UpdateAsset(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAsset", reflect.TypeOf((*MockAssetClientInterface)(nil).UpdateAsset), arg0, arg1, arg2, arg3, arg4)
}

// MockAssetUpdateBuilder is a mock of AssetUpdateBuilder interface.
type MockAssetUpdateBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockAssetUpdateBuilderMockRecorder
}

// MockAssetUpdateBuilderMockRecorder is the mock recorder for MockAssetUpdateBuilder.
type MockAssetUpdateBuilderMockRecorder struct {
	mock *MockAssetUpdateBuilder
}

// NewMockAssetUpdateBuilder creates a new mock instance.
func NewMockAssetUpdateBuilder(ctrl *gomock.Controller) *MockAssetUpdateBuilder {
	mock := &MockAssetUpdateBuilder{ctrl: ctrl}

	mock.recorder = &MockAssetUpdateBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssetUpdateBuilder) EXPECT() *MockAssetUpdateBuilderMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockAssetUpdateBuilder) Update(arg0 context.Context) (*models.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*models.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockAssetUpdateBuilderMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAssetUpdateBuilder)(nil).Update), arg0)
}

// WithMetadata mocks base method.
func (m *MockAssetUpdateBuilder) WithMetadata(arg0 map[string]interface{}) builders.AssetUpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithMetadata", arg0)
	ret0, _ := ret[0].(builders.AssetUpdateBuilder)
	return ret0
}

// WithMetadata indicates an expected call of WithMetadata.
func (mr *MockAssetUpdateBuilderMockRecorder) WithMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithMetadata", reflect.TypeOf((*MockAssetUpdateBuilder)(nil).WithMetadata), arg0)
}

// WithName mocks base method.
func (m *MockAssetUpdateBuilder) WithName(arg0 string) builders.AssetUpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithName", arg0)
	ret0, _ := ret[0].(builders.AssetUpdateBuilder)
	return ret0
}

// WithName indicates an expected call of WithName.
func (mr *MockAssetUpdateBuilderMockRecorder) WithName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithName", reflect.TypeOf((*MockAssetUpdateBuilder)(nil).WithName), arg0)
}

// WithStatus mocks base method.
func (m *MockAssetUpdateBuilder) WithStatus(arg0 string) builders.AssetUpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithStatus", arg0)
	ret0, _ := ret[0].(builders.AssetUpdateBuilder)
	return ret0
}

// WithStatus indicates an expected call of WithStatus.
func (mr *MockAssetUpdateBuilderMockRecorder) WithStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStatus", reflect.TypeOf((*MockAssetUpdateBuilder)(nil).WithStatus), arg0)
}

// WithTag mocks base method.
func (m *MockAssetUpdateBuilder) WithTag(arg0 string) builders.AssetUpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTag", arg0)
	ret0, _ := ret[0].(builders.AssetUpdateBuilder)
	return ret0
}

// WithTag indicates an expected call of WithTag.
func (mr *MockAssetUpdateBuilderMockRecorder) WithTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTag", reflect.TypeOf((*MockAssetUpdateBuilder)(nil).WithTag), arg0)
}

// WithTags mocks base method.
func (m *MockAssetUpdateBuilder) WithTags(arg0 []string) builders.AssetUpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTags", arg0)
	ret0, _ := ret[0].(builders.AssetUpdateBuilder)
	return ret0
}

// WithTags indicates an expected call of WithTags.
func (mr *MockAssetUpdateBuilderMockRecorder) WithTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTags", reflect.TypeOf((*MockAssetUpdateBuilder)(nil).WithTags), arg0)
}
