// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/LerianStudio/midaz/sdks/go-sdk/builders (interfaces: AccountBuilder,AccountClientInterface,AccountUpdateBuilder)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	builders "github.com/LerianStudio/midaz/sdks/go-sdk/builders"
	models "github.com/LerianStudio/midaz/sdks/go-sdk/models"
	gomock "github.com/golang/mock/gomock"
)

// MockAccountBuilder is a mock of AccountBuilder interface.
type MockAccountBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockAccountBuilderMockRecorder
}

// MockAccountBuilderMockRecorder is the mock recorder for MockAccountBuilder.
type MockAccountBuilderMockRecorder struct {
	mock *MockAccountBuilder
}

// NewMockAccountBuilder creates a new mock instance.
func NewMockAccountBuilder(ctrl *gomock.Controller) *MockAccountBuilder {
	mock := &MockAccountBuilder{ctrl: ctrl}

	mock.recorder = &MockAccountBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountBuilder) EXPECT() *MockAccountBuilderMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccountBuilder) Create(arg0 context.Context) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAccountBuilderMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountBuilder)(nil).Create), arg0)
}

// WithAlias mocks base method.
func (m *MockAccountBuilder) WithAlias(arg0 string) builders.AccountBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithAlias", arg0)
	ret0, _ := ret[0].(builders.AccountBuilder)
	return ret0
}

// WithAlias indicates an expected call of WithAlias.
func (mr *MockAccountBuilderMockRecorder) WithAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithAlias", reflect.TypeOf((*MockAccountBuilder)(nil).WithAlias), arg0)
}

// WithAssetCode mocks base method.
func (m *MockAccountBuilder) WithAssetCode(arg0 string) builders.AccountBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithAssetCode", arg0)
	ret0, _ := ret[0].(builders.AccountBuilder)
	return ret0
}

// WithAssetCode indicates an expected call of WithAssetCode.
func (mr *MockAccountBuilderMockRecorder) WithAssetCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithAssetCode", reflect.TypeOf((*MockAccountBuilder)(nil).WithAssetCode), arg0)
}

// WithEntityID mocks base method.
func (m *MockAccountBuilder) WithEntityID(arg0 string) builders.AccountBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithEntityID", arg0)
	ret0, _ := ret[0].(builders.AccountBuilder)
	return ret0
}

// WithEntityID indicates an expected call of WithEntityID.
func (mr *MockAccountBuilderMockRecorder) WithEntityID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithEntityID", reflect.TypeOf((*MockAccountBuilder)(nil).WithEntityID), arg0)
}

// WithLedger mocks base method.
func (m *MockAccountBuilder) WithLedger(arg0 string) builders.AccountBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithLedger", arg0)
	ret0, _ := ret[0].(builders.AccountBuilder)
	return ret0
}

// WithLedger indicates an expected call of WithLedger.
func (mr *MockAccountBuilderMockRecorder) WithLedger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLedger", reflect.TypeOf((*MockAccountBuilder)(nil).WithLedger), arg0)
}

// WithMetadata mocks base method.
func (m *MockAccountBuilder) WithMetadata(arg0 map[string]interface{}) builders.AccountBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithMetadata", arg0)
	ret0, _ := ret[0].(builders.AccountBuilder)
	return ret0
}

// WithMetadata indicates an expected call of WithMetadata.
func (mr *MockAccountBuilderMockRecorder) WithMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithMetadata", reflect.TypeOf((*MockAccountBuilder)(nil).WithMetadata), arg0)
}

// WithName mocks base method.
func (m *MockAccountBuilder) WithName(arg0 string) builders.AccountBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithName", arg0)
	ret0, _ := ret[0].(builders.AccountBuilder)
	return ret0
}

// WithName indicates an expected call of WithName.
func (mr *MockAccountBuilderMockRecorder) WithName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithName", reflect.TypeOf((*MockAccountBuilder)(nil).WithName), arg0)
}

// WithOrganization mocks base method.
func (m *MockAccountBuilder) WithOrganization(arg0 string) builders.AccountBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithOrganization", arg0)
	ret0, _ := ret[0].(builders.AccountBuilder)
	return ret0
}

// WithOrganization indicates an expected call of WithOrganization.
func (mr *MockAccountBuilderMockRecorder) WithOrganization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithOrganization", reflect.TypeOf((*MockAccountBuilder)(nil).WithOrganization), arg0)
}

// WithParentAccount mocks base method.
func (m *MockAccountBuilder) WithParentAccount(arg0 string) builders.AccountBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithParentAccount", arg0)
	ret0, _ := ret[0].(builders.AccountBuilder)
	return ret0
}

// WithParentAccount indicates an expected call of WithParentAccount.
func (mr *MockAccountBuilderMockRecorder) WithParentAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithParentAccount", reflect.TypeOf((*MockAccountBuilder)(nil).WithParentAccount), arg0)
}

// WithPortfolio mocks base method.
func (m *MockAccountBuilder) WithPortfolio(arg0 string) builders.AccountBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithPortfolio", arg0)
	ret0, _ := ret[0].(builders.AccountBuilder)
	return ret0
}

// WithPortfolio indicates an expected call of WithPortfolio.
func (mr *MockAccountBuilderMockRecorder) WithPortfolio(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithPortfolio", reflect.TypeOf((*MockAccountBuilder)(nil).WithPortfolio), arg0)
}

// WithSegment mocks base method.
func (m *MockAccountBuilder) WithSegment(arg0 string) builders.AccountBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithSegment", arg0)
	ret0, _ := ret[0].(builders.AccountBuilder)
	return ret0
}

// WithSegment indicates an expected call of WithSegment.
func (mr *MockAccountBuilderMockRecorder) WithSegment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithSegment", reflect.TypeOf((*MockAccountBuilder)(nil).WithSegment), arg0)
}

// WithStatus mocks base method.
func (m *MockAccountBuilder) WithStatus(arg0 string) builders.AccountBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithStatus", arg0)
	ret0, _ := ret[0].(builders.AccountBuilder)
	return ret0
}

// WithStatus indicates an expected call of WithStatus.
func (mr *MockAccountBuilderMockRecorder) WithStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStatus", reflect.TypeOf((*MockAccountBuilder)(nil).WithStatus), arg0)
}

// WithTag mocks base method.
func (m *MockAccountBuilder) WithTag(arg0 string) builders.AccountBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTag", arg0)
	ret0, _ := ret[0].(builders.AccountBuilder)
	return ret0
}

// WithTag indicates an expected call of WithTag.
func (mr *MockAccountBuilderMockRecorder) WithTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTag", reflect.TypeOf((*MockAccountBuilder)(nil).WithTag), arg0)
}

// WithTags mocks base method.
func (m *MockAccountBuilder) WithTags(arg0 []string) builders.AccountBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTags", arg0)
	ret0, _ := ret[0].(builders.AccountBuilder)
	return ret0
}

// WithTags indicates an expected call of WithTags.
func (mr *MockAccountBuilderMockRecorder) WithTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTags", reflect.TypeOf((*MockAccountBuilder)(nil).WithTags), arg0)
}

// WithType mocks base method.
func (m *MockAccountBuilder) WithType(arg0 string) builders.AccountBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithType", arg0)
	ret0, _ := ret[0].(builders.AccountBuilder)
	return ret0
}

// WithType indicates an expected call of WithType.
func (mr *MockAccountBuilderMockRecorder) WithType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithType", reflect.TypeOf((*MockAccountBuilder)(nil).WithType), arg0)
}

// MockAccountClientInterface is a mock of AccountClientInterface interface.
type MockAccountClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAccountClientInterfaceMockRecorder
}

// MockAccountClientInterfaceMockRecorder is the mock recorder for MockAccountClientInterface.
type MockAccountClientInterfaceMockRecorder struct {
	mock *MockAccountClientInterface
}

// NewMockAccountClientInterface creates a new mock instance.
func NewMockAccountClientInterface(ctrl *gomock.Controller) *MockAccountClientInterface {
	mock := &MockAccountClientInterface{ctrl: ctrl}

	mock.recorder = &MockAccountClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountClientInterface) EXPECT() *MockAccountClientInterfaceMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockAccountClientInterface) CreateAccount(arg0 context.Context, arg1, arg2 string, arg3 *models.CreateAccountInput) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockAccountClientInterfaceMockRecorder) CreateAccount(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountClientInterface)(nil).CreateAccount), arg0, arg1, arg2, arg3)
}

// UpdateAccount mocks base method.
func (m *MockAccountClientInterface) UpdateAccount(arg0 context.Context, arg1, arg2, arg3 string, arg4 *models.UpdateAccountInput) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockAccountClientInterfaceMockRecorder) UpdateAccount(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockAccountClientInterface)(nil).UpdateAccount), arg0, arg1, arg2, arg3, arg4)
}

// MockAccountUpdateBuilder is a mock of AccountUpdateBuilder interface.
type MockAccountUpdateBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockAccountUpdateBuilderMockRecorder
}

// MockAccountUpdateBuilderMockRecorder is the mock recorder for MockAccountUpdateBuilder.
type MockAccountUpdateBuilderMockRecorder struct {
	mock *MockAccountUpdateBuilder
}

// NewMockAccountUpdateBuilder creates a new mock instance.
func NewMockAccountUpdateBuilder(ctrl *gomock.Controller) *MockAccountUpdateBuilder {
	mock := &MockAccountUpdateBuilder{ctrl: ctrl}

	mock.recorder = &MockAccountUpdateBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountUpdateBuilder) EXPECT() *MockAccountUpdateBuilderMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockAccountUpdateBuilder) Update(arg0 context.Context) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockAccountUpdateBuilderMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAccountUpdateBuilder)(nil).Update), arg0)
}

// WithMetadata mocks base method.
func (m *MockAccountUpdateBuilder) WithMetadata(arg0 map[string]interface{}) builders.AccountUpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithMetadata", arg0)
	ret0, _ := ret[0].(builders.AccountUpdateBuilder)
	return ret0
}

// WithMetadata indicates an expected call of WithMetadata.
func (mr *MockAccountUpdateBuilderMockRecorder) WithMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithMetadata", reflect.TypeOf((*MockAccountUpdateBuilder)(nil).WithMetadata), arg0)
}

// WithName mocks base method.
func (m *MockAccountUpdateBuilder) WithName(arg0 string) builders.AccountUpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithName", arg0)
	ret0, _ := ret[0].(builders.AccountUpdateBuilder)
	return ret0
}

// WithName indicates an expected call of WithName.
func (mr *MockAccountUpdateBuilderMockRecorder) WithName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithName", reflect.TypeOf((*MockAccountUpdateBuilder)(nil).WithName), arg0)
}

// WithPortfolio mocks base method.
func (m *MockAccountUpdateBuilder) WithPortfolio(arg0 string) builders.AccountUpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithPortfolio", arg0)
	ret0, _ := ret[0].(builders.AccountUpdateBuilder)
	return ret0
}

// WithPortfolio indicates an expected call of WithPortfolio.
func (mr *MockAccountUpdateBuilderMockRecorder) WithPortfolio(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithPortfolio", reflect.TypeOf((*MockAccountUpdateBuilder)(nil).WithPortfolio), arg0)
}

// WithSegment mocks base method.
func (m *MockAccountUpdateBuilder) WithSegment(arg0 string) builders.AccountUpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithSegment", arg0)
	ret0, _ := ret[0].(builders.AccountUpdateBuilder)
	return ret0
}

// WithSegment indicates an expected call of WithSegment.
func (mr *MockAccountUpdateBuilderMockRecorder) WithSegment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithSegment", reflect.TypeOf((*MockAccountUpdateBuilder)(nil).WithSegment), arg0)
}

// WithStatus mocks base method.
func (m *MockAccountUpdateBuilder) WithStatus(arg0 string) builders.AccountUpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithStatus", arg0)
	ret0, _ := ret[0].(builders.AccountUpdateBuilder)
	return ret0
}

// WithStatus indicates an expected call of WithStatus.
func (mr *MockAccountUpdateBuilderMockRecorder) WithStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStatus", reflect.TypeOf((*MockAccountUpdateBuilder)(nil).WithStatus), arg0)
}

// WithTag mocks base method.
func (m *MockAccountUpdateBuilder) WithTag(arg0 string) builders.AccountUpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTag", arg0)
	ret0, _ := ret[0].(builders.AccountUpdateBuilder)
	return ret0
}

// WithTag indicates an expected call of WithTag.
func (mr *MockAccountUpdateBuilderMockRecorder) WithTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTag", reflect.TypeOf((*MockAccountUpdateBuilder)(nil).WithTag), arg0)
}

// WithTags mocks base method.
func (m *MockAccountUpdateBuilder) WithTags(arg0 []string) builders.AccountUpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTags", arg0)
	ret0, _ := ret[0].(builders.AccountUpdateBuilder)
	return ret0
}

// WithTags indicates an expected call of WithTags.
func (mr *MockAccountUpdateBuilderMockRecorder) WithTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTags", reflect.TypeOf((*MockAccountUpdateBuilder)(nil).WithTags), arg0)
}
