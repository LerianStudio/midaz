// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/LerianStudio/midaz/sdks/go-sdk/builders (interfaces: PortfolioBuilder,PortfolioClientInterface,PortfolioUpdateBuilder)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	builders "github.com/LerianStudio/midaz/sdks/go-sdk/builders"
	models "github.com/LerianStudio/midaz/sdks/go-sdk/models"
	gomock "github.com/golang/mock/gomock"
)

// MockPortfolioBuilder is a mock of PortfolioBuilder interface.
type MockPortfolioBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockPortfolioBuilderMockRecorder
}

// MockPortfolioBuilderMockRecorder is the mock recorder for MockPortfolioBuilder.
type MockPortfolioBuilderMockRecorder struct {
	mock *MockPortfolioBuilder
}

// NewMockPortfolioBuilder creates a new mock instance.
func NewMockPortfolioBuilder(ctrl *gomock.Controller) *MockPortfolioBuilder {
	mock := &MockPortfolioBuilder{ctrl: ctrl}

	mock.recorder = &MockPortfolioBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortfolioBuilder) EXPECT() *MockPortfolioBuilderMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPortfolioBuilder) Create(arg0 context.Context) (*models.Portfolio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*models.Portfolio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPortfolioBuilderMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPortfolioBuilder)(nil).Create), arg0)
}

// WithEntityID mocks base method.
func (m *MockPortfolioBuilder) WithEntityID(arg0 string) builders.PortfolioBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithEntityID", arg0)
	ret0, _ := ret[0].(builders.PortfolioBuilder)
	return ret0
}

// WithEntityID indicates an expected call of WithEntityID.
func (mr *MockPortfolioBuilderMockRecorder) WithEntityID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithEntityID", reflect.TypeOf((*MockPortfolioBuilder)(nil).WithEntityID), arg0)
}

// WithLedger mocks base method.
func (m *MockPortfolioBuilder) WithLedger(arg0 string) builders.PortfolioBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithLedger", arg0)
	ret0, _ := ret[0].(builders.PortfolioBuilder)
	return ret0
}

// WithLedger indicates an expected call of WithLedger.
func (mr *MockPortfolioBuilderMockRecorder) WithLedger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLedger", reflect.TypeOf((*MockPortfolioBuilder)(nil).WithLedger), arg0)
}

// WithMetadata mocks base method.
func (m *MockPortfolioBuilder) WithMetadata(arg0 map[string]interface{}) builders.PortfolioBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithMetadata", arg0)
	ret0, _ := ret[0].(builders.PortfolioBuilder)
	return ret0
}

// WithMetadata indicates an expected call of WithMetadata.
func (mr *MockPortfolioBuilderMockRecorder) WithMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithMetadata", reflect.TypeOf((*MockPortfolioBuilder)(nil).WithMetadata), arg0)
}

// WithName mocks base method.
func (m *MockPortfolioBuilder) WithName(arg0 string) builders.PortfolioBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithName", arg0)
	ret0, _ := ret[0].(builders.PortfolioBuilder)
	return ret0
}

// WithName indicates an expected call of WithName.
func (mr *MockPortfolioBuilderMockRecorder) WithName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithName", reflect.TypeOf((*MockPortfolioBuilder)(nil).WithName), arg0)
}

// WithOrganization mocks base method.
func (m *MockPortfolioBuilder) WithOrganization(arg0 string) builders.PortfolioBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithOrganization", arg0)
	ret0, _ := ret[0].(builders.PortfolioBuilder)
	return ret0
}

// WithOrganization indicates an expected call of WithOrganization.
func (mr *MockPortfolioBuilderMockRecorder) WithOrganization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithOrganization", reflect.TypeOf((*MockPortfolioBuilder)(nil).WithOrganization), arg0)
}

// WithStatus mocks base method.
func (m *MockPortfolioBuilder) WithStatus(arg0 string) builders.PortfolioBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithStatus", arg0)
	ret0, _ := ret[0].(builders.PortfolioBuilder)
	return ret0
}

// WithStatus indicates an expected call of WithStatus.
func (mr *MockPortfolioBuilderMockRecorder) WithStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStatus", reflect.TypeOf((*MockPortfolioBuilder)(nil).WithStatus), arg0)
}

// WithTag mocks base method.
func (m *MockPortfolioBuilder) WithTag(arg0 string) builders.PortfolioBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTag", arg0)
	ret0, _ := ret[0].(builders.PortfolioBuilder)
	return ret0
}

// WithTag indicates an expected call of WithTag.
func (mr *MockPortfolioBuilderMockRecorder) WithTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTag", reflect.TypeOf((*MockPortfolioBuilder)(nil).WithTag), arg0)
}

// WithTags mocks base method.
func (m *MockPortfolioBuilder) WithTags(arg0 []string) builders.PortfolioBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTags", arg0)
	ret0, _ := ret[0].(builders.PortfolioBuilder)
	return ret0
}

// WithTags indicates an expected call of WithTags.
func (mr *MockPortfolioBuilderMockRecorder) WithTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTags", reflect.TypeOf((*MockPortfolioBuilder)(nil).WithTags), arg0)
}

// MockPortfolioClientInterface is a mock of PortfolioClientInterface interface.
type MockPortfolioClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPortfolioClientInterfaceMockRecorder
}

// MockPortfolioClientInterfaceMockRecorder is the mock recorder for MockPortfolioClientInterface.
type MockPortfolioClientInterfaceMockRecorder struct {
	mock *MockPortfolioClientInterface
}

// NewMockPortfolioClientInterface creates a new mock instance.
func NewMockPortfolioClientInterface(ctrl *gomock.Controller) *MockPortfolioClientInterface {
	mock := &MockPortfolioClientInterface{ctrl: ctrl}

	mock.recorder = &MockPortfolioClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortfolioClientInterface) EXPECT() *MockPortfolioClientInterfaceMockRecorder {
	return m.recorder
}

// CreatePortfolio mocks base method.
func (m *MockPortfolioClientInterface) CreatePortfolio(arg0 context.Context, arg1, arg2 string, arg3 *models.CreatePortfolioInput) (*models.Portfolio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePortfolio", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.Portfolio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePortfolio indicates an expected call of CreatePortfolio.
func (mr *MockPortfolioClientInterfaceMockRecorder) CreatePortfolio(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePortfolio", reflect.TypeOf((*MockPortfolioClientInterface)(nil).CreatePortfolio), arg0, arg1, arg2, arg3)
}

// UpdatePortfolio mocks base method.
func (m *MockPortfolioClientInterface) UpdatePortfolio(arg0 context.Context, arg1, arg2, arg3 string, arg4 *models.UpdatePortfolioInput) (*models.Portfolio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePortfolio", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*models.Portfolio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePortfolio indicates an expected call of UpdatePortfolio.
func (mr *MockPortfolioClientInterfaceMockRecorder) UpdatePortfolio(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePortfolio", reflect.TypeOf((*MockPortfolioClientInterface)(nil).UpdatePortfolio), arg0, arg1, arg2, arg3, arg4)
}

// MockPortfolioUpdateBuilder is a mock of PortfolioUpdateBuilder interface.
type MockPortfolioUpdateBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockPortfolioUpdateBuilderMockRecorder
}

// MockPortfolioUpdateBuilderMockRecorder is the mock recorder for MockPortfolioUpdateBuilder.
type MockPortfolioUpdateBuilderMockRecorder struct {
	mock *MockPortfolioUpdateBuilder
}

// NewMockPortfolioUpdateBuilder creates a new mock instance.
func NewMockPortfolioUpdateBuilder(ctrl *gomock.Controller) *MockPortfolioUpdateBuilder {
	mock := &MockPortfolioUpdateBuilder{ctrl: ctrl}

	mock.recorder = &MockPortfolioUpdateBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortfolioUpdateBuilder) EXPECT() *MockPortfolioUpdateBuilderMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockPortfolioUpdateBuilder) Update(arg0 context.Context) (*models.Portfolio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*models.Portfolio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPortfolioUpdateBuilderMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPortfolioUpdateBuilder)(nil).Update), arg0)
}

// WithMetadata mocks base method.
func (m *MockPortfolioUpdateBuilder) WithMetadata(arg0 map[string]interface{}) builders.PortfolioUpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithMetadata", arg0)
	ret0, _ := ret[0].(builders.PortfolioUpdateBuilder)
	return ret0
}

// WithMetadata indicates an expected call of WithMetadata.
func (mr *MockPortfolioUpdateBuilderMockRecorder) WithMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithMetadata", reflect.TypeOf((*MockPortfolioUpdateBuilder)(nil).WithMetadata), arg0)
}

// WithName mocks base method.
func (m *MockPortfolioUpdateBuilder) WithName(arg0 string) builders.PortfolioUpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithName", arg0)
	ret0, _ := ret[0].(builders.PortfolioUpdateBuilder)
	return ret0
}

// WithName indicates an expected call of WithName.
func (mr *MockPortfolioUpdateBuilderMockRecorder) WithName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithName", reflect.TypeOf((*MockPortfolioUpdateBuilder)(nil).WithName), arg0)
}

// WithStatus mocks base method.
func (m *MockPortfolioUpdateBuilder) WithStatus(arg0 string) builders.PortfolioUpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithStatus", arg0)
	ret0, _ := ret[0].(builders.PortfolioUpdateBuilder)
	return ret0
}

// WithStatus indicates an expected call of WithStatus.
func (mr *MockPortfolioUpdateBuilderMockRecorder) WithStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStatus", reflect.TypeOf((*MockPortfolioUpdateBuilder)(nil).WithStatus), arg0)
}

// WithTag mocks base method.
func (m *MockPortfolioUpdateBuilder) WithTag(arg0 string) builders.PortfolioUpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTag", arg0)
	ret0, _ := ret[0].(builders.PortfolioUpdateBuilder)
	return ret0
}

// WithTag indicates an expected call of WithTag.
func (mr *MockPortfolioUpdateBuilderMockRecorder) WithTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTag", reflect.TypeOf((*MockPortfolioUpdateBuilder)(nil).WithTag), arg0)
}

// WithTags mocks base method.
func (m *MockPortfolioUpdateBuilder) WithTags(arg0 []string) builders.PortfolioUpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTags", arg0)
	ret0, _ := ret[0].(builders.PortfolioUpdateBuilder)
	return ret0
}

// WithTags indicates an expected call of WithTags.
func (mr *MockPortfolioUpdateBuilderMockRecorder) WithTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTags", reflect.TypeOf((*MockPortfolioUpdateBuilder)(nil).WithTags), arg0)
}
